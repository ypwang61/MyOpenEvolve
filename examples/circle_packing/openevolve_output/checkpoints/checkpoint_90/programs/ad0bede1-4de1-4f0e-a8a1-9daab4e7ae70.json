{"id": "ad0bede1-4de1-4f0e-a8a1-9daab4e7ae70", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Strategy: Optimized hexagonal arrangement with variable radii.\n\n    # Core circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Slightly increased core radius\n\n    # First layer (6 circles) around the core\n    r1 = 0.17  # Slightly increased first layer radius\n    spacing_factor1 = 2.2 #Adjusted spacing\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + spacing_factor1 * r1 * np.cos(angle), 0.5 + spacing_factor1 * r1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Second layer (6 circles) - Adjusted positions and radii\n    r2 = 0.14  # Slightly increased second layer radius\n    spacing_factor2 = 3.8 #Adjusted spacing\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        centers[i + 7] = [0.5 + spacing_factor2 * r1 * np.cos(angle), 0.5 + spacing_factor2 * r1 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Edge circles (4 circles) - Adjusted positions and radii for better packing\n    r_edge = 0.13  # Increased edge radius\n    edge_offset = 0.16 #Adjusted offset\n    centers[13] = [edge_offset, 0.5]\n    centers[14] = [1 - edge_offset, 0.5]\n    centers[15] = [0.5, edge_offset]\n    centers[16] = [0.5, 1 - edge_offset]\n    radii[13:17] = r_edge\n\n    # Corner circles (4 circles)\n    r_corner = 0.11 #Increased corner radius\n    corner_offset = 0.16 #Adjusted offset\n    centers[17] = [corner_offset, corner_offset]\n    centers[18] = [1 - corner_offset, 1 - corner_offset]\n    centers[19] = [1 - corner_offset, corner_offset]\n    centers[20] = [corner_offset, 1 - corner_offset]\n    radii[17:21] = r_corner\n\n    # Fill circles (6 circles) - Positioning to fill gaps, varied radii\n    radii[21] = 0.10\n    centers[21] = [0.33, 0.33]\n\n    radii[22] = 0.10\n    centers[22] = [0.67, 0.67]\n\n    radii[23] = 0.09\n    centers[23] = [0.33, 0.67]\n\n    radii[24] = 0.09\n    centers[24] = [0.67, 0.33]\n\n    radii[25] = 0.08\n    centers[25] = [0.25, 0.75]\n\n    radii[26-1] = 0.08\n    centers[26-1] = [0.75, 0.25]\n\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum + 1e-9:  #Added small tolerance\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "357d23df-3490-41cc-bd51-1aa54467fe68", "generation": 7, "timestamp": 1750749497.8354266, "iteration_found": 86, "metrics": {"validity": 1.0, "sum_radii": 1.3270974997974299, "target_ratio": 0.5036423149136356, "combined_score": 0.5036423149136356, "eval_time": 0.30265259742736816}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.2077067595583308, "target_ratio": 0.4583327360752679, "combined_score": 0.4583327360752679, "eval_time": 0.54201340675354}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.2077\n- target_ratio: 0.4583\n- combined_score: 0.4583\n- eval_time: 0.5420\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8349, target_ratio: 0.6963, combined_score: 0.6963, eval_time: 27.0945\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.2593)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1210), Performs well on target_ratio (0.8049), Performs well on combined_score (0.8049), Performs well on eval_time (1.5660)\n\n\n### Program 2 (Score: 6.2644)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.8349), Performs well on target_ratio (0.6963), Performs well on combined_score (0.6963), Performs well on eval_time (27.0945)\n\n\n### Program 3 (Score: 0.7560)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.4100), Performs well on target_ratio (0.5351), Performs well on combined_score (0.5351), Performs well on eval_time (0.2996)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.6597)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.6072)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Strategy: Optimized hexagonal arrangement with variable radii.\n\n    # Core circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.18\n\n    # First layer (6 circles) around the core\n    r1 = 0.16\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + 2.1 * r1 * np.cos(angle), 0.5 + 2.1 * r1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Second layer (6 circles) - Adjusted positions and radii\n    r2 = 0.13\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        centers[i + 7] = [0.5 + 3.7 * r1 * np.cos(angle), 0.5 + 3.7 * r1 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Edge circles (4 circles) - Adjusted positions and radii for better packing\n    r_edge = 0.12\n    centers[13] = [0.17, 0.5]\n    centers[14] = [0.83, 0.5]\n    centers[15] = [0.5, 0.17]\n    centers[16] = [0.5, 0.83]\n    radii[13:17] = r_edge\n\n    # Corner circles (4 circles)\n    r_corner = 0.10\n    centers[17] = [0.17, 0.17]\n    centers[18] = [0.83, 0.83]\n    centers[19] = [0.83, 0.17]\n    centers[20] = [0.17, 0.83]\n    radii[17:21] = r_corner\n\n    # Fill circles (6 circles) - Positioning to fill gaps, varied radii\n    radii[21] = 0.09\n    centers[21] = [0.33, 0.33]\n\n    radii[22] = 0.09\n    centers[22] = [0.67, 0.67]\n\n    radii[23] = 0.08\n    centers[23] = [0.33, 0.67]\n\n    radii[24] = 0.08\n    centers[24] = [0.67, 0.33]\n\n    radii[25] = 0.07\n    centers[25] = [0.25, 0.75]\n\n    radii[26-1] = 0.07\n    centers[26-1] = [0.75, 0.25]\n\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum + 1e-9:  #Added small tolerance\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Strategy: Optimized hexagonal arrangement with variable radii.\n\n    # Core circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Slightly increased core radius\n\n    # First layer (6 circles) around the core\n    r1 = 0.17  # Slightly increased first layer radius\n    spacing_factor1 = 2.2 #Adjusted spacing\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + spacing_factor1 * r1 * np.cos(angle), 0.5 + spacing_factor1 * r1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Second layer (6 circles) - Adjusted positions and radii\n    r2 = 0.14  # Slightly increased second layer radius\n    spacing_factor2 = 3.8 #Adjusted spacing\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        centers[i + 7] = [0.5 + spacing_factor2 * r1 * np.cos(angle), 0.5 + spacing_factor2 * r1 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Edge circles (4 circles) - Adjusted positions and radii for better packing\n    r_edge = 0.13  # Increased edge radius\n    edge_offset = 0.16 #Adjusted offset\n    centers[13] = [edge_offset, 0.5]\n    centers[14] = [1 - edge_offset, 0.5]\n    centers[15] = [0.5, edge_offset]\n    centers[16] = [0.5, 1 - edge_offset]\n    radii[13:17] = r_edge\n\n    # Corner circles (4 circles)\n    r_corner = 0.11 #Increased corner radius\n    corner_offset = 0.16 #Adjusted offset\n    centers[17] = [corner_offset, corner_offset]\n    centers[18] = [1 - corner_offset, 1 - corner_offset]\n    centers[19] = [1 - corner_offset, corner_offset]\n    centers[20] = [corner_offset, 1 - corner_offset]\n    radii[17:21] = r_corner\n\n    # Fill circles (6 circles) - Positioning to fill gaps, varied radii\n    radii[21] = 0.10\n    centers[21] = [0.33, 0.33]\n\n    radii[22] = 0.10\n    centers[22] = [0.67, 0.67]\n\n    radii[23] = 0.09\n    centers[23] = [0.33, 0.67]\n\n    radii[24] = 0.09\n    centers[24] = [0.67, 0.33]\n\n    radii[25] = 0.08\n    centers[25] = [0.25, 0.75]\n\n    radii[26-1] = 0.08\n    centers[26-1] = [0.75, 0.25]\n\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum + 1e-9:  #Added small tolerance\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}