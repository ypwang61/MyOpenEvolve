{"id": "20924e8c-c020-4a62-9ccf-fcdd8999f76d", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Define positions based on a hybrid pattern combining hexagonal packing with edge optimization\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    \n    # First hexagonal layer - 6 circles around center\n    r1 = 0.115  # Approximate radius for first layer\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [0.5 + 2.1*r1 * np.cos(angle), 0.5 + 2.1*r1 * np.sin(angle)]\n    \n    # Second partial hexagonal layer - 12 circles\n    r2 = 0.09  # Approximate radius for second layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle for better packing\n        dist = 0.38  # Distance from center\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Corner circles - 4 circles\n    r3 = 0.085  # Approximate radius for corners\n    corners = [[0.085, 0.085], [0.915, 0.085], [0.085, 0.915], [0.915, 0.915]]\n    for i in range(4):\n        centers[i+19] = corners[i]\n    \n    # Additional circles to fill gaps\n    centers[23] = [0.5, 0.18]\n    centers[24] = [0.5, 0.82]\n    centers[25] = [0.27, 0.5]\n    \n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Check all pairs of circles for potential overlaps\n    for _ in range(10):  # Limit iterations for efficiency\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                if radii[i] + radii[j] > dist:\n                    # Scale both radii proportionally to fit\n                    scale = dist / (radii[i] + radii[j])\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    # Final refinement pass - maximize each circle individually\n    for i in range(n):\n        # Maximum possible radius based on borders\n        max_r = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n        \n        # Check against all other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_r = min(max_r, dist - radii[j])\n        \n        radii[i] = max(0.001, max_r)  # Ensure minimum positive radius\n    \n    return radii\n\n\ndef optimize_positions(centers, radii, iterations=5):\n    \"\"\"\n    Optimize circle positions to maximize sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        iterations: Number of optimization iterations\n        \n    Returns:\n        Tuple of (centers, radii)\n    \"\"\"\n    n = centers.shape[0]\n    best_sum = np.sum(radii)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    \n    for _ in range(iterations):\n        # Small random perturbations to circle positions\n        perturbed_centers = centers.copy()\n        for i in range(n):\n            perturbed_centers[i] += np.random.uniform(-0.01, 0.01, 2)\n            # Keep within bounds\n            perturbed_centers[i] = np.clip(perturbed_centers[i], 0.01, 0.99)\n        \n        # Compute new radii\n        new_radii = compute_max_radii(perturbed_centers)\n        new_sum = np.sum(new_radii)\n        \n        # Keep if better\n        if new_sum > best_sum:\n            best_sum = new_sum\n            best_centers = perturbed_centers.copy()\n            best_radii = new_radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef hybrid_packing():\n    \"\"\"Combine constructor-based approach with local optimization\"\"\"\n    # Get initial packing from constructor\n    centers, radii, _ = construct_packing()\n    \n    # Apply optimization to refine positions\n    centers, radii = optimize_positions(centers, radii, iterations=3)\n    \n    # Calculate final sum\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef construct_packing():\n    \"\"\"\n    Main function to construct an optimized packing for 26 circles.\n    Uses a pre-computed arrangement based on geometric principles.\n    \n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n    \"\"\"\n    # Number of circles\n    n = 26\n    \n    # Initialize arrays\n    centers = np.zeros((n, 2))\n    \n    # Center and first ring - hexagonal arrangement\n    centers[0] = [0.5, 0.5]  # Center\n    \n    # First ring - 6 circles in hexagonal pattern\n    hex_radius = 0.22\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [0.5 + hex_radius * np.cos(angle), \n                       0.5 + hex_radius * np.sin(angle)]\n    \n    # Second ring - 12 circles\n    outer_radius = 0.38\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset for better packing\n        centers[i+7] = [0.5 + outer_radius * np.cos(angle), \n                       0.5 + outer_radius * np.sin(angle)]\n    \n    # Corner circles\n    centers[19] = [0.09, 0.09]   # Bottom left\n    centers[20] = [0.91, 0.09]   # Bottom right\n    centers[21] = [0.09, 0.91]   # Top left\n    centers[22] = [0.91, 0.91]   # Top right\n    \n    # Additional circles to fill gaps\n    centers[23] = [0.5, 0.14]    # Bottom middle\n    centers[24] = [0.5, 0.86]    # Top middle\n    centers[25] = [0.25, 0.5]    # Left middle\n    \n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "d1ac7ead-05d0-4086-a0db-3e7f81ce43f7", "generation": 6, "timestamp": 1750749690.579794, "iteration_found": 98, "metrics": {"validity": 1.0, "sum_radii": 1.919010791897475, "target_ratio": 0.7282773403785484, "combined_score": 0.7282773403785484, "eval_time": 0.2636713981628418}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.721969961272249, "target_ratio": 0.653499036535958, "combined_score": 0.653499036535958, "eval_time": 0.7880704402923584}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7220\n- target_ratio: 0.6535\n- combined_score: 0.6535\n- eval_time: 0.7881\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8349, target_ratio: 0.6963, combined_score: 0.6963, eval_time: 27.0945\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0667)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1289), Performs well on target_ratio (0.8079), Performs well on combined_score (0.8079), Performs well on eval_time (0.5886)\n\n\n### Program 2 (Score: 6.2644)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.8349), Performs well on target_ratio (0.6963), Performs well on combined_score (0.6963), Performs well on eval_time (27.0945)\n\n\n### Program 3 (Score: 1.1675)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.9421), Performs well on target_ratio (0.7371), Performs well on combined_score (0.7371), Performs well on eval_time (1.4215)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.6557)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.7081)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Define a function to calculate the distance between two circles\n    def distance(center1, center2):\n        return np.sqrt(np.sum((np.array(center1) - np.array(center2)) ** 2))\n\n    # Start with a hexagonal grid-like structure.\n    radius_base = 0.08  # Initial guess for the base radius\n    centers[0] = [0.5, 0.5]\n    radii[0] = radius_base\n\n    # First layer around the center\n    radii[1:7] = radius_base\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[1 + i] = [0.5 + 2 * radius_base * np.cos(angle), 0.5 + 2 * radius_base * np.sin(angle)]\n\n\n    # Second layer - adjust positions slightly for better packing\n    radius_layer2 = 0.075 # slightly smaller radius\n    radii[7:13] = radius_layer2\n    layer2_dist = 4 * radius_base # Distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[7 + i] = [0.5 + layer2_dist * np.cos(angle), 0.5 + layer2_dist * np.sin(angle)]\n\n\n    # Place circles near the corners\n    radius_corner = 0.07\n    radii[13:17] = radius_corner\n    centers[13] = [radius_corner * 1.5, radius_corner * 1.5]\n    centers[14] = [1 - radius_corner * 1.5, radius_corner * 1.5]\n    centers[15] = [radius_corner * 1.5, 1 - radius_corner * 1.5]\n    centers[16] = [1 - radius_corner * 1.5, 1 - radius_corner * 1.5]\n\n\n    # Place circles along the edges\n    radius_edge = 0.072\n    radii[17:21] = radius_edge\n    centers[17] = [0.5, radius_edge * 1.5]\n    centers[18] = [radius_edge * 1.5, 0.5]\n    centers[19] = [1 - radius_edge * 1.5, 0.5]\n    centers[20] = [0.5, 1 - radius_edge * 1.5]\n\n    # Fill remaining space with smaller circles\n    radius_fill = 0.065\n    radii[21:] = radius_fill\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.25]\n\n\n    # Ensure all circles are inside the unit square, with a small margin\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum:\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll create a more optimized circle packing solution for n=26 circles. Based on the performance history and geometric insights, I'll focus on a carefully designed arrangement that maximizes the sum of radii while ensuring validity.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Define positions based on a hybrid pattern combining hexagonal packing with edge optimization\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    \n    # First hexagonal layer - 6 circles around center\n    r1 = 0.115  # Approximate radius for first layer\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [0.5 + 2.1*r1 * np.cos(angle), 0.5 + 2.1*r1 * np.sin(angle)]\n    \n    # Second partial hexagonal layer - 12 circles\n    r2 = 0.09  # Approximate radius for second layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle for better packing\n        dist = 0.38  # Distance from center\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Corner circles - 4 circles\n    r3 = 0.085  # Approximate radius for corners\n    corners = [[0.085, 0.085], [0.915, 0.085], [0.085, 0.915], [0.915, 0.915]]\n    for i in range(4):\n        centers[i+19] = corners[i]\n    \n    # Additional circles to fill gaps\n    centers[23] = [0.5, 0.18]\n    centers[24] = [0.5, 0.82]\n    centers[25] = [0.27, 0.5]\n    \n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Check all pairs of circles for potential overlaps\n    for _ in range(10):  # Limit iterations for efficiency\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                if radii[i] + radii[j] > dist:\n                    # Scale both radii proportionally to fit\n                    scale = dist / (radii[i] + radii[j])\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    # Final refinement pass - maximize each circle individually\n    for i in range(n):\n        # Maximum possible radius based on borders\n        max_r = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n        \n        # Check against all other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_r = min(max_r, dist - radii[j])\n        \n        radii[i] = max(0.001, max_r)  # Ensure minimum positive radius\n    \n    return radii\n\n\ndef optimize_positions(centers, radii, iterations=5):\n    \"\"\"\n    Optimize circle positions to maximize sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        iterations: Number of optimization iterations\n        \n    Returns:\n        Tuple of (centers, radii)\n    \"\"\"\n    n = centers.shape[0]\n    best_sum = np.sum(radii)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    \n    for _ in range(iterations):\n        # Small random perturbations to circle positions\n        perturbed_centers = centers.copy()\n        for i in range(n):\n            perturbed_centers[i] += np.random.uniform(-0.01, 0.01, 2)\n            # Keep within bounds\n            perturbed_centers[i] = np.clip(perturbed_centers[i], 0.01, 0.99)\n        \n        # Compute new radii\n        new_radii = compute_max_radii(perturbed_centers)\n        new_sum = np.sum(new_radii)\n        \n        # Keep if better\n        if new_sum > best_sum:\n            best_sum = new_sum\n            best_centers = perturbed_centers.copy()\n            best_radii = new_radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef hybrid_packing():\n    \"\"\"Combine constructor-based approach with local optimization\"\"\"\n    # Get initial packing from constructor\n    centers, radii, _ = construct_packing()\n    \n    # Apply optimization to refine positions\n    centers, radii = optimize_positions(centers, radii, iterations=3)\n    \n    # Calculate final sum\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef construct_packing():\n    \"\"\"\n    Main function to construct an optimized packing for 26 circles.\n    Uses a pre-computed arrangement based on geometric principles.\n    \n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n    \"\"\"\n    # Number of circles\n    n = 26\n    \n    # Initialize arrays\n    centers = np.zeros((n, 2))\n    \n    # Center and first ring - hexagonal arrangement\n    centers[0] = [0.5, 0.5]  # Center\n    \n    # First ring - 6 circles in hexagonal pattern\n    hex_radius = 0.22\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [0.5 + hex_radius * np.cos(angle), \n                       0.5 + hex_radius * np.sin(angle)]\n    \n    # Second ring - 12 circles\n    outer_radius = 0.38\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset for better packing\n        centers[i+7] = [0.5 + outer_radius * np.cos(angle), \n                       0.5 + outer_radius * np.sin(angle)]\n    \n    # Corner circles\n    centers[19] = [0.09, 0.09]   # Bottom left\n    centers[20] = [0.91, 0.09]   # Bottom right\n    centers[21] = [0.09, 0.91]   # Top left\n    centers[22] = [0.91, 0.91]   # Top right\n    \n    # Additional circles to fill gaps\n    centers[23] = [0.5, 0.14]    # Bottom middle\n    centers[24] = [0.5, 0.86]    # Top middle\n    centers[25] = [0.25, 0.5]    # Left middle\n    \n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}