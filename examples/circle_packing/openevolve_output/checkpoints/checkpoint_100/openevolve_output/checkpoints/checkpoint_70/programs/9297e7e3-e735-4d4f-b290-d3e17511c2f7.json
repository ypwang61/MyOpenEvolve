{"id": "9297e7e3-e735-4d4f-b290-d3e17511c2f7", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, adaptive radii, and refined physics-based optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and adaptive radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    centers, radii = initialize_pattern()\n    centers, radii = optimize_radii_positions(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern():\n    \"\"\"Initialize circle positions and radii with a hybrid pattern for n=26.\"\"\"\n    # Core hexagonal pattern (7 circles)\n    centers = [[0.5, 0.5]]  # Center\n    radii = [0.12]  # Initial radius for center\n\n    angle = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    hex_radius = 0.3  # Radius of the hexagon\n    for a in angle:\n        x = 0.5 + hex_radius * np.cos(a)\n        y = 0.5 + hex_radius * np.sin(a)\n        centers.append([x, y])\n        radii.append(0.09)  # Initial radius for hexagon circles\n\n    # Additional circles filling the corners and edges\n    centers.extend([\n        [0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9],  # Corners\n        [0.5, 0.15], [0.15, 0.5], [0.85, 0.5], [0.5, 0.85],  # Edges\n        [0.25, 0.25], [0.75, 0.25], [0.25, 0.75], [0.75, 0.75],  # Inner corners\n        [0.2, 0.5], [0.8, 0.5], [0.5, 0.2], [0.5, 0.8], # Mid-edge circles\n        [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65] # Closer to center\n    ])\n\n    radii.extend([0.06] * (26 - len(radii))) # Initial radius for remaining circles\n    centers = np.array(centers)\n    radii = np.array(radii)\n\n    return centers, radii\n\n\ndef optimize_radii_positions(centers, radii, iterations=300, lr=0.02):\n    \"\"\"Optimize circle positions and radii using a refined physics-based simulation.\"\"\"\n    n = len(centers)\n    initial_radii = radii.copy() # Store initial radii for later adjustment\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n        radii_updates = np.zeros_like(radii)\n\n        for i in range(n):\n            # Repulsion from other circles\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j] + 1e-6  # Minimum allowed distance\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = (centers[i] - centers[j]) / dist\n\n                    # Repel circles to avoid overlap\n                    forces[i] += direction * overlap * 0.5\n                    forces[j] -= direction * overlap * 0.5\n\n            # Keep circles within bounds (stronger force)\n            x, y = centers[i]\n            bound_force = 2.0  # Increased boundary force\n            if x - radii[i] < 0:\n                forces[i, 0] += (radii[i] - x) * bound_force\n            if x + radii[i] > 1:\n                forces[i, 0] -= (x + radii[i] - 1) * bound_force\n            if y - radii[i] < 0:\n                forces[i, 1] += (radii[i] - y) * bound_force\n            if y + radii[i] > 1:\n                forces[i, 1] -= (y + radii[i] - 1) * bound_force\n\n        # Update circle positions\n        centers += forces * lr\n\n        # Adjust radii adaptively\n        for i in range(n):\n            # Distance to closest circle\n            min_distance = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_distance = min(min_distance, dist)\n\n            # Distance to closest wall\n            distance_to_wall = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Adjust radius based on available space\n            available_space = min(distance_to_wall, min_distance / 2)\n            new_radius = available_space * 0.95  # Slightly reduce the radius\n\n            # Adaptive radius adjustment: favor initial radius if possible\n            radii[i] = max(0.02, min(new_radius, initial_radii[i] * 1.1))  # Prevent radii from becoming too small\n           # radii[i] = max(0.01, new_radius)\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "760bfbab-012a-4791-a47a-6cf7047630cd", "generation": 5, "timestamp": 1750752069.2845151, "iteration_found": 57, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: index 26 is out of bounds for axis 0 with size 26"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.9055993220949644, "target_ratio": 0.3436809571517892, "combined_score": 0.3436809571517892, "eval_time": 0.6818089485168457}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.9056\n- target_ratio: 0.3437\n- combined_score: 0.3437\n- eval_time: 0.6818\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 1.0732)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using deterministic construction and fast optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000), Performs well on eval_time (5.3659)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with a more robust optimization strategy, adaptive grid, and gradient-based radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    centers, radii = initialize_pattern()\n    centers, radii = optimize_radii_positions(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern():\n    \"\"\"Initialize circle positions and radii with a specific pattern for n=26.\"\"\"\n    centers = np.array([\n        [0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9],  # Corners\n        [0.5, 0.1], [0.1, 0.5], [0.9, 0.5], [0.5, 0.9],  # Edges\n        [0.5, 0.5],  # Center\n        [0.25, 0.25], [0.75, 0.25], [0.25, 0.75], [0.75, 0.75],  # Inner corners\n        [0.25, 0.5], [0.75, 0.5], [0.5, 0.25], [0.5, 0.75],  # Inner edges\n        [0.2, 0.2], [0.8, 0.2], [0.2, 0.8], [0.8, 0.8],  # Closer to corners\n        [0.3, 0.3], [0.7, 0.3], [0.3, 0.7], [0.7, 0.7], # Closer to inner corners\n        [0.5, 0.5] # Duplicate Center\n    ])\n\n    radii = np.array([0.07] * 26)  # Initial radii\n\n    return centers, radii\n\n\ndef optimize_radii_positions(centers, radii, iterations=200, lr=0.01):\n    \"\"\"Optimize circle positions and radii using a physics-based simulation.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n        radii_updates = np.zeros_like(radii)\n        \n        for i in range(n):\n            # Repulsion from other circles\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j] + 1e-6 # Minimum allowed distance\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = (centers[i] - centers[j]) / dist\n                    \n                    # Repel circles to avoid overlap\n                    forces[i] += direction * overlap * 0.5\n                    forces[j] -= direction * overlap * 0.5\n\n            # Keep circles within bounds\n            x, y = centers[i]\n            if x - radii[i] < 0:\n                forces[i, 0] += (radii[i] - x) * 1.5\n            if x + radii[i] > 1:\n                forces[i, 0] -= (x + radii[i] - 1) * 1.5\n            if y - radii[i] < 0:\n                forces[i, 1] += (radii[i] - y) * 1.5\n            if y + radii[i] > 1:\n                forces[i, 1] -= (y + radii[i] - 1) * 1.5\n\n        # Update circle positions\n        centers += forces * lr\n\n        # Adjust radii\n        for i in range(n):\n            # Distance to closest circle\n            min_distance = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_distance = min(min_distance, dist)\n\n            # Distance to closest wall\n            distance_to_wall = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Adjust radius based on available space\n            new_radius = min(distance_to_wall, min_distance / 2) * 0.95 # Slightly reduce the radius\n            radii[i] = max(0.01, new_radius)  # Prevent radii from becoming too small\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, adaptive radii, and refined physics-based optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and adaptive radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    centers, radii = initialize_pattern()\n    centers, radii = optimize_radii_positions(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern():\n    \"\"\"Initialize circle positions and radii with a hybrid pattern for n=26.\"\"\"\n    # Core hexagonal pattern (7 circles)\n    centers = [[0.5, 0.5]]  # Center\n    radii = [0.12]  # Initial radius for center\n\n    angle = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    hex_radius = 0.3  # Radius of the hexagon\n    for a in angle:\n        x = 0.5 + hex_radius * np.cos(a)\n        y = 0.5 + hex_radius * np.sin(a)\n        centers.append([x, y])\n        radii.append(0.09)  # Initial radius for hexagon circles\n\n    # Additional circles filling the corners and edges\n    centers.extend([\n        [0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9],  # Corners\n        [0.5, 0.15], [0.15, 0.5], [0.85, 0.5], [0.5, 0.85],  # Edges\n        [0.25, 0.25], [0.75, 0.25], [0.25, 0.75], [0.75, 0.75],  # Inner corners\n        [0.2, 0.5], [0.8, 0.5], [0.5, 0.2], [0.5, 0.8], # Mid-edge circles\n        [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65] # Closer to center\n    ])\n\n    radii.extend([0.06] * (26 - len(radii))) # Initial radius for remaining circles\n    centers = np.array(centers)\n    radii = np.array(radii)\n\n    return centers, radii\n\n\ndef optimize_radii_positions(centers, radii, iterations=300, lr=0.02):\n    \"\"\"Optimize circle positions and radii using a refined physics-based simulation.\"\"\"\n    n = len(centers)\n    initial_radii = radii.copy() # Store initial radii for later adjustment\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n        radii_updates = np.zeros_like(radii)\n\n        for i in range(n):\n            # Repulsion from other circles\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j] + 1e-6  # Minimum allowed distance\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = (centers[i] - centers[j]) / dist\n\n                    # Repel circles to avoid overlap\n                    forces[i] += direction * overlap * 0.5\n                    forces[j] -= direction * overlap * 0.5\n\n            # Keep circles within bounds (stronger force)\n            x, y = centers[i]\n            bound_force = 2.0  # Increased boundary force\n            if x - radii[i] < 0:\n                forces[i, 0] += (radii[i] - x) * bound_force\n            if x + radii[i] > 1:\n                forces[i, 0] -= (x + radii[i] - 1) * bound_force\n            if y - radii[i] < 0:\n                forces[i, 1] += (radii[i] - y) * bound_force\n            if y + radii[i] > 1:\n                forces[i, 1] -= (y + radii[i] - 1) * bound_force\n\n        # Update circle positions\n        centers += forces * lr\n\n        # Adjust radii adaptively\n        for i in range(n):\n            # Distance to closest circle\n            min_distance = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_distance = min(min_distance, dist)\n\n            # Distance to closest wall\n            distance_to_wall = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Adjust radius based on available space\n            available_space = min(distance_to_wall, min_distance / 2)\n            new_radius = available_space * 0.95  # Slightly reduce the radius\n\n            # Adaptive radius adjustment: favor initial radius if possible\n            radii[i] = max(0.02, min(new_radius, initial_radii[i] * 1.1))  # Prevent radii from becoming too small\n           # radii[i] = max(0.01, new_radius)\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}