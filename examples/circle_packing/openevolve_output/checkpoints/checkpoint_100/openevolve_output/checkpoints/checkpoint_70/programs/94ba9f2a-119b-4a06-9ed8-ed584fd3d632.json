{"id": "94ba9f2a-119b-4a06-9ed8-ed584fd3d632", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Try multiple initialization strategies and keep the best result\n    best_centers, best_radii, best_sum = None, None, 0\n    \n    # Strategy 1: Hexagonal-based pattern with corner optimization\n    centers1, radii1 = initialize_hexagonal_pattern(n)\n    centers1, radii1 = multi_stage_optimization(centers1, radii1)\n    sum1 = np.sum(radii1)\n    \n    if sum1 > best_sum:\n        best_centers, best_radii, best_sum = centers1, radii1, sum1\n    \n    # Strategy 2: Grid-based pattern with variable sizes\n    centers2, radii2 = initialize_grid_pattern(n)\n    centers2, radii2 = multi_stage_optimization(centers2, radii2)\n    sum2 = np.sum(radii2)\n    \n    if sum2 > best_sum:\n        best_centers, best_radii, best_sum = centers2, radii2, sum2\n    \n    # Strategy 3: Corner-focused pattern\n    centers3, radii3 = initialize_corner_pattern(n)\n    centers3, radii3 = multi_stage_optimization(centers3, radii3)\n    sum3 = np.sum(radii3)\n    \n    if sum3 > best_sum:\n        best_centers, best_radii, best_sum = centers3, radii3, sum3\n    \n    # Strategy 4: Specialized pattern for n=26 based on mathematical research\n    centers4, radii4 = initialize_specialized_pattern(n)\n    centers4, radii4 = multi_stage_optimization(centers4, radii4)\n    sum4 = np.sum(radii4)\n    \n    if sum4 > best_sum:\n        best_centers, best_radii, best_sum = centers4, radii4, sum4\n    \n    return best_centers, best_radii, best_sum\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"Initialize with a hexagonal-based pattern\"\"\"\n    # Create a hexagonal grid pattern\n    centers = []\n    rows = int(np.sqrt(n))\n    \n    # Base row spacing\n    dy = 0.15\n    # Horizontal spacing\n    dx = 0.15\n    \n    # Generate hexagonal grid\n    for i in range(rows + 2):\n        offset = (i % 2) * 0.5 * dx\n        for j in range(rows + 2):\n            x = 0.1 + offset + j * dx\n            y = 0.1 + i * dy\n            if 0 < x < 1 and 0 < y < 1:\n                centers.append([x, y])\n    \n    # Take the first n centers\n    centers = np.array(centers[:n])\n    \n    # Adjust to better fill the square\n    centers = centers * 0.8 + 0.1\n    \n    # Initialize with uniform radii\n    radii = np.ones(n) * 0.08\n    \n    return centers, radii\n\ndef initialize_grid_pattern(n):\n    \"\"\"Initialize with a grid-based pattern with variable sizes\"\"\"\n    # Create a 5x5 grid plus one extra circle\n    rows, cols = 5, 5\n    grid_x = np.linspace(0.1, 0.9, cols)\n    grid_y = np.linspace(0.1, 0.9, rows)\n    \n    centers = []\n    for y in grid_y:\n        for x in grid_x:\n            centers.append([x, y])\n    \n    # Add one more circle in the center\n    centers.append([0.5, 0.5])\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize radii - larger in center, smaller at edges\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    radii = 0.1 * (1 - 0.5 * distances_to_center / max_dist)\n    \n    return centers, radii\n\ndef initialize_corner_pattern(n):\n    \"\"\"Initialize with a pattern that places circles in corners and edges\"\"\"\n    centers = []\n    \n    # Place circles in corners\n    corners = [[0.1, 0.1], [0.1, 0.9], [0.9, 0.1], [0.9, 0.9]]\n    for corner in corners:\n        centers.append(corner)\n    \n    # Place circles along edges\n    num_edge = 4\n    for i in range(num_edge):\n        centers.append([0.1 + i * 0.8 / (num_edge - 1), 0.1])\n        centers.append([0.1 + i * 0.8 / (num_edge - 1), 0.9])\n        centers.append([0.1, 0.1 + i * 0.8 / (num_edge - 1)])\n        centers.append([0.9, 0.1 + i * 0.8 / (num_edge - 1)])\n    \n    # Fill the interior with a grid\n    interior_points = n - len(centers)\n    if interior_points > 0:\n        grid_size = int(np.ceil(np.sqrt(interior_points)))\n        grid_x = np.linspace(0.3, 0.7, grid_size)\n        grid_y = np.linspace(0.3, 0.7, grid_size)\n        \n        for y in grid_y:\n            for x in grid_x:\n                centers.append([x, y])\n                if len(centers) >= n:\n                    break\n            if len(centers) >= n:\n                break\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize with uniform radii\n    radii = np.ones(n) * 0.08\n    \n    return centers, radii\n\ndef initialize_specialized_pattern(n):\n    \"\"\"Initialize with a specialized pattern for n=26 based on mathematical research\"\"\"\n    # Create a base pattern with circles of different sizes\n    centers = []\n    \n    # Place 4 large circles in a 2x2 grid in the center\n    large_spacing = 0.25\n    for x in [0.5 - large_spacing/2, 0.5 + large_spacing/2]:\n        for y in [0.5 - large_spacing/2, 0.5 + large_spacing/2]:\n            centers.append([x, y])\n    \n    # Place medium circles around the large ones\n    medium_positions = [\n        [0.25, 0.25], [0.25, 0.5], [0.25, 0.75],\n        [0.5, 0.25], [0.5, 0.75],\n        [0.75, 0.25], [0.75, 0.5], [0.75, 0.75]\n    ]\n    for pos in medium_positions:\n        centers.append(pos)\n    \n    # Place small circles at strategic locations\n    small_positions = [\n        [0.125, 0.125], [0.125, 0.375], [0.125, 0.625], [0.125, 0.875],\n        [0.375, 0.125], [0.375, 0.875],\n        [0.625, 0.125], [0.625, 0.875],\n        [0.875, 0.125], [0.875, 0.375], [0.875, 0.625], [0.875, 0.875],\n        [0.5, 0.0], [0.5, 1.0]  # Extra circles at top and bottom\n    ]\n    for pos in small_positions:\n        centers.append(pos)\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize with different radii based on position\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    \n    # Larger circles in center, medium in middle region, smaller at edges\n    radii = np.zeros(n)\n    for i in range(n):\n        if distances_to_center[i] < 0.2:\n            radii[i] = 0.12  # Large\n        elif distances_to_center[i] < 0.4:\n            radii[i] = 0.10  # Medium\n        else:\n            radii[i] = 0.08  # Small\n    \n    return centers, radii\n\ndef multi_stage_optimization(centers, radii):\n    \"\"\"Apply multiple optimization stages to improve the packing\"\"\"\n    # Stage 1: Initial position optimization\n    centers, radii = optimize_positions(centers, radii, iterations=150, step=0.02)\n    \n    # Stage 2: Grow all radii uniformly until constraints are violated\n    centers, radii = grow_radii_uniform(centers, radii)\n    \n    # Stage 3: Optimize positions again with the new radii\n    centers, radii = optimize_positions(centers, radii, iterations=200, step=0.01)\n    \n    # Stage 4: Optimize individual radii\n    centers, radii = optimize_individual_radii(centers, radii, iterations=300)\n    \n    # Stage 5: Final refinement alternating between position and radius adjustments\n    centers, radii = final_refinement(centers, radii, iterations=150)\n    \n    # Stage 6: Specialized optimization for corner and edge circles\n    centers, radii = optimize_boundary_circles(centers, radii)\n    \n    return centers, radii\n\ndef check_overlap(centers, radii, tolerance=1e-10):\n    \"\"\"Check if any circles overlap or violate boundary constraints\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 - tolerance or \n            centers[i][0] + radii[i] > 1 + tolerance or \n            centers[i][1] - radii[i] < 0 - tolerance or \n            centers[i][1] + radii[i] > 1 + tolerance):\n            return True\n        \n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j] - tolerance:\n                return True\n    \n    return False\n\ndef grow_radii_uniform(centers, radii, step=0.0005):\n    \"\"\"Grow all radii uniformly until constraints are violated\"\"\"\n    growing = True\n    while growing:\n        new_radii = radii + step\n        if check_overlap(centers, new_radii):\n            growing = False\n        else:\n            radii = new_radii\n    \n    return centers, radii\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n    \n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n            \n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n                \n                # Force magnitude proportional to overlap with quadratic scaling\n                magnitude = (min_dist - dist) * 0.5 * (1 + (min_dist - dist) * 5)\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n    \n    # Boundary forces with stronger repulsion near edges\n    for i in range(n):\n        # Left boundary\n        dist_to_left = centers[i][0] - radii[i]\n        if dist_to_left < 0:\n            forces[i][0] += abs(dist_to_left) * 0.8 * (1 + abs(dist_to_left) * 10)\n        \n        # Right boundary\n        dist_to_right = 1 - (centers[i][0] + radii[i])\n        if dist_to_right < 0:\n            forces[i][0] -= abs(dist_to_right) * 0.8 * (1 + abs(dist_to_right) * 10)\n        \n        # Bottom boundary\n        dist_to_bottom = centers[i][1] - radii[i]\n        if dist_to_bottom < 0:\n            forces[i][1] += abs(dist_to_bottom) * 0.8 * (1 + abs(dist_to_bottom) * 10)\n        \n        # Top boundary\n        dist_to_top = 1 - (centers[i][1] + radii[i])\n        if dist_to_top < 0:\n            forces[i][1] -= abs(dist_to_top) * 0.8 * (1 + abs(dist_to_top) * 10)\n    \n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach with adaptive step size\"\"\"\n    n = len(centers)\n    \n    for iter in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n        \n        # Calculate force magnitudes for adaptive step size\n        force_magnitudes = np.linalg.norm(forces, axis=1)\n        max_force = np.max(force_magnitudes) if len(force_magnitudes) > 0 else 1.0\n        \n        # Normalize forces to prevent extreme movements\n        if max_force > 1e-10:\n            normalized_forces = forces / max_force\n        else:\n            normalized_forces = forces\n        \n        # Apply forces with adaptive step size\n        current_step = step * (1 - 0.5 * iter / iterations)  # Gradually reduce step size\n        centers += normalized_forces * current_step\n        \n        # Ensure centers stay within bounds while respecting radii\n        for i in range(n):\n            centers[i][0] = np.clip(centers[i][0], radii[i] + 1e-6, 1 - radii[i] - 1e-6)\n            centers[i][1] = np.clip(centers[i][1], radii[i] + 1e-6, 1 - radii[i] - 1e-6)\n    \n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n    \n    # First, try to grow all radii slightly to ensure we're at a local maximum\n    centers, radii = grow_radii_uniform(centers, radii, step=0.0001)\n    \n    for _ in range(iterations):\n        # Randomize the order of circles to prevent bias\n        indices = np.random.permutation(n)\n        \n        for idx in indices:\n            # Try to increase this circle's radius with varying step sizes\n            for step in [0.001, 0.0005, 0.0001]:\n                test_radii = radii.copy()\n                test_radii[idx] += step\n                \n                if not check_overlap(centers, test_radii):\n                    radii = test_radii\n                    break\n    \n    return centers, radii\n\ndef final_refinement(centers, radii, iterations=100):\n    \"\"\"Final refinement with alternating position and radius adjustments\"\"\"\n    n = len(centers)\n    \n    for i in range(iterations):\n        # Adjust positions with small steps\n        centers, radii = optimize_positions(centers, radii, iterations=5, step=0.005)\n        \n        # Try to grow individual radii with decreasing step sizes\n        indices = np.random.permutation(n)\n        for idx in indices:\n            step = 0.0005 * (1 - 0.5 * i / iterations)  # Gradually reduce step size\n            test_radii = radii.copy()\n            test_radii[idx] += step\n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n        \n        # Every 10 iterations, try to grow all radii uniformly\n        if i % 10 == 0:\n            centers, radii = grow_radii_uniform(centers, radii, step=0.0001)\n    \n    return centers, radii\n\ndef optimize_boundary_circles(centers, radii):\n    \"\"\"Special optimization for circles near boundaries and corners\"\"\"\n    n = len(centers)\n    \n    # Identify circles near boundaries and corners\n    boundary_threshold = 0.15\n    corner_threshold = 0.2\n    \n    boundary_circles = []\n    corner_circles = []\n    \n    for i in range(n):\n        x, y = centers[i]\n        \n        # Check if near a boundary\n        near_left = x - radii[i] < boundary_threshold\n        near_right = 1 - (x + radii[i]) < boundary_threshold\n        near_bottom = y - radii[i] < boundary_threshold\n        near_top = 1 - (y + radii[i]) < boundary_threshold\n        \n        if near_left or near_right or near_bottom or near_top:\n            boundary_circles.append(i)\n        \n        # Check if near a corner\n        near_bottom_left = x < corner_threshold and y < corner_threshold\n        near_bottom_right = x > 1 - corner_threshold and y < corner_threshold\n        near_top_left = x < corner_threshold and y > 1 - corner_threshold\n        near_top_right = x > 1 - corner_threshold and y > 1 - corner_threshold\n        \n        if near_bottom_left or near_bottom_right or near_top_left or near_top_right:\n            corner_circles.append(i)\n    \n    # Special optimization for corner circles\n    for idx in corner_circles:\n        # Try to move corner circles exactly into corners\n        x, y = centers[idx]\n        r = radii[idx]\n        \n        if x < 0.5 and y < 0.5:  # Bottom-left\n            new_center = [r, r]\n        elif x >= 0.5 and y < 0.5:  # Bottom-right\n            new_center = [1-r, r]\n        elif x < 0.5 and y >= 0.5:  # Top-left\n            new_center = [r, 1-r]\n        else:  # Top-right\n            new_center = [1-r, 1-r]\n        \n        # Test if this new position works\n        test_centers = centers.copy()\n        test_centers[idx] = new_center\n        \n        if not check_overlap(test_centers, radii):\n            centers = test_centers\n            \n            # Try to grow this corner circle\n            for step in [0.001, 0.0005, 0.0001]:\n                test_radii = radii.copy()\n                test_radii[idx] += step\n                test_centers = centers.copy()\n                test_centers[idx] = [test_radii[idx], test_radii[idx]] if x < 0.5 and y < 0.5 else \\\n                                   [1-test_radii[idx], test_radii[idx]] if x >= 0.5 and y < 0.5 else \\\n                                   [test_radii[idx], 1-test_radii[idx]] if x < 0.5 and y >= 0.5 else \\\n                                   [1-test_radii[idx], 1-test_radii[idx]]\n                \n                if not check_overlap(test_centers, test_radii):\n                    centers = test_centers\n                    radii = test_radii\n    \n    # Optimize boundary circles\n    for idx in boundary_circles:\n        if idx in corner_circles:\n            continue  # Already handled\n        \n        x, y = centers[idx]\n        r = radii[idx]\n        \n        # Try to align exactly with boundaries\n        if x - r < boundary_threshold:  # Near left boundary\n            test_centers = centers.copy()\n            test_centers[idx][0] = r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        elif 1 - (x + r) < boundary_threshold:  # Near right boundary\n            test_centers = centers.copy()\n            test_centers[idx][0] = 1 - r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        if y - r < boundary_threshold:  # Near bottom boundary\n            test_centers = centers.copy()\n            test_centers[idx][1] = r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        elif 1 - (y + r) < boundary_threshold:  # Near top boundary\n            test_centers = centers.copy()\n            test_centers[idx][1] = 1 - r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        # Try to grow this boundary circle\n        for step in [0.001, 0.0005, 0.0001]:\n            test_radii = radii.copy()\n            test_radii[idx] += step\n            test_centers = centers.copy()\n            \n            # Adjust position to maintain tangency with boundary\n            if abs(centers[idx][0] - test_radii[idx]) < 1e-6:  # Left boundary\n                test_centers[idx][0] = test_radii[idx]\n            elif abs(centers[idx][0] - (1 - test_radii[idx])) < 1e-6:  # Right boundary\n                test_centers[idx][0] = 1 - test_radii[idx]\n            \n            if abs(centers[idx][1] - test_radii[idx]) < 1e-6:  # Bottom boundary\n                test_centers[idx][1] = test_radii[idx]\n            elif abs(centers[idx][1] - (1 - test_radii[idx])) < 1e-6:  # Top boundary\n                test_centers[idx][1] = 1 - test_radii[idx]\n            \n            if not check_overlap(test_centers, test_radii):\n                centers = test_centers\n                radii = test_radii\n    \n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "04a34f56-cb77-448c-8afe-94421203704d", "generation": 7, "timestamp": 1750751957.2009704, "iteration_found": 49, "metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 4.0987)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a deterministic pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.8125), Performs well on target_ratio (0.6879), Performs well on combined_score (0.6879), Performs well on eval_time (16.3053)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a hybrid pattern - larger circles in center, smaller at edges\n    # This pattern is based on mathematical analysis of optimal circle packing\n    centers, radii = initialize_pattern(n)\n    \n    # Multi-stage optimization\n    # Stage 1: Grow all radii uniformly until constraints are violated\n    centers, radii = grow_radii_uniform(centers, radii)\n    \n    # Stage 2: Optimize positions using force-directed approach\n    centers, radii = optimize_positions(centers, radii, iterations=200)\n    \n    # Stage 3: Fine-tune individual radii\n    centers, radii = optimize_individual_radii(centers, radii, iterations=300)\n    \n    # Stage 4: Final refinement with alternating position and radius adjustments\n    centers, radii = final_refinement(centers, radii, iterations=100)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern(n):\n    \"\"\"Initialize with a specialized pattern for 26 circles\"\"\"\n    # Create a pattern with 5x5 grid plus one extra circle\n    # The pattern has larger circles in the center and smaller at the edges\n    \n    # Start with a grid-based arrangement\n    rows, cols = 5, 5\n    grid_x = np.linspace(0.1, 0.9, cols)\n    grid_y = np.linspace(0.1, 0.9, rows)\n    \n    centers = []\n    for y in grid_y:\n        for x in grid_x:\n            centers.append([x, y])\n    \n    # Add one more circle in a strategic location\n    centers.append([0.5, 0.5])  # Center of the square\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize radii - larger in center, smaller at edges\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    radii = 0.1 * (1 - 0.7 * distances_to_center / max_dist)\n    \n    return centers, radii\n\ndef check_overlap(centers, radii):\n    \"\"\"Check if any circles overlap\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 or \n            centers[i][0] + radii[i] > 1 or \n            centers[i][1] - radii[i] < 0 or \n            centers[i][1] + radii[i] > 1):\n            return True\n        \n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j]:\n                return True\n    \n    return False\n\ndef grow_radii_uniform(centers, radii, step=0.001):\n    \"\"\"Grow all radii uniformly until constraints are violated\"\"\"\n    growing = True\n    while growing:\n        new_radii = radii + step\n        if check_overlap(centers, new_radii):\n            growing = False\n        else:\n            radii = new_radii\n    \n    return centers, radii\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n    \n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n            \n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n                \n                # Force magnitude proportional to overlap\n                magnitude = (min_dist - dist) * 0.5\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n    \n    # Boundary forces\n    for i in range(n):\n        # Left boundary\n        if centers[i][0] - radii[i] < 0:\n            forces[i][0] += (radii[i] - centers[i][0]) * 0.5\n        \n        # Right boundary\n        if centers[i][0] + radii[i] > 1:\n            forces[i][0] -= (centers[i][0] + radii[i] - 1) * 0.5\n        \n        # Bottom boundary\n        if centers[i][1] - radii[i] < 0:\n            forces[i][1] += (radii[i] - centers[i][1]) * 0.5\n        \n        # Top boundary\n        if centers[i][1] + radii[i] > 1:\n            forces[i][1] -= (centers[i][1] + radii[i] - 1) * 0.5\n    \n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n        \n        # Apply forces with damping\n        centers += forces * step\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Reduce step size over time for convergence\n        step *= 0.99\n    \n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        for i in range(n):\n            # Try to increase this circle's radius\n            test_radii = radii.copy()\n            test_radii[i] += 0.001\n            \n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n    \n    return centers, radii\n\ndef final_refinement(centers, radii, iterations=100):\n    \"\"\"Final refinement with alternating position and radius adjustments\"\"\"\n    for i in range(iterations):\n        # Adjust positions slightly\n        centers, radii = optimize_positions(centers, radii, iterations=5, step=0.005)\n        \n        # Try to grow radii\n        for j in range(len(centers)):\n            test_radii = radii.copy()\n            test_radii[j] += 0.0005\n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n    \n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll rewrite the program to significantly improve the circle packing performance. Based on my analysis of the problem, I'll implement a more sophisticated approach that combines multiple optimization strategies and leverages known patterns for dense circle packings.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Try multiple initialization strategies and keep the best result\n    best_centers, best_radii, best_sum = None, None, 0\n    \n    # Strategy 1: Hexagonal-based pattern with corner optimization\n    centers1, radii1 = initialize_hexagonal_pattern(n)\n    centers1, radii1 = multi_stage_optimization(centers1, radii1)\n    sum1 = np.sum(radii1)\n    \n    if sum1 > best_sum:\n        best_centers, best_radii, best_sum = centers1, radii1, sum1\n    \n    # Strategy 2: Grid-based pattern with variable sizes\n    centers2, radii2 = initialize_grid_pattern(n)\n    centers2, radii2 = multi_stage_optimization(centers2, radii2)\n    sum2 = np.sum(radii2)\n    \n    if sum2 > best_sum:\n        best_centers, best_radii, best_sum = centers2, radii2, sum2\n    \n    # Strategy 3: Corner-focused pattern\n    centers3, radii3 = initialize_corner_pattern(n)\n    centers3, radii3 = multi_stage_optimization(centers3, radii3)\n    sum3 = np.sum(radii3)\n    \n    if sum3 > best_sum:\n        best_centers, best_radii, best_sum = centers3, radii3, sum3\n    \n    # Strategy 4: Specialized pattern for n=26 based on mathematical research\n    centers4, radii4 = initialize_specialized_pattern(n)\n    centers4, radii4 = multi_stage_optimization(centers4, radii4)\n    sum4 = np.sum(radii4)\n    \n    if sum4 > best_sum:\n        best_centers, best_radii, best_sum = centers4, radii4, sum4\n    \n    return best_centers, best_radii, best_sum\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"Initialize with a hexagonal-based pattern\"\"\"\n    # Create a hexagonal grid pattern\n    centers = []\n    rows = int(np.sqrt(n))\n    \n    # Base row spacing\n    dy = 0.15\n    # Horizontal spacing\n    dx = 0.15\n    \n    # Generate hexagonal grid\n    for i in range(rows + 2):\n        offset = (i % 2) * 0.5 * dx\n        for j in range(rows + 2):\n            x = 0.1 + offset + j * dx\n            y = 0.1 + i * dy\n            if 0 < x < 1 and 0 < y < 1:\n                centers.append([x, y])\n    \n    # Take the first n centers\n    centers = np.array(centers[:n])\n    \n    # Adjust to better fill the square\n    centers = centers * 0.8 + 0.1\n    \n    # Initialize with uniform radii\n    radii = np.ones(n) * 0.08\n    \n    return centers, radii\n\ndef initialize_grid_pattern(n):\n    \"\"\"Initialize with a grid-based pattern with variable sizes\"\"\"\n    # Create a 5x5 grid plus one extra circle\n    rows, cols = 5, 5\n    grid_x = np.linspace(0.1, 0.9, cols)\n    grid_y = np.linspace(0.1, 0.9, rows)\n    \n    centers = []\n    for y in grid_y:\n        for x in grid_x:\n            centers.append([x, y])\n    \n    # Add one more circle in the center\n    centers.append([0.5, 0.5])\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize radii - larger in center, smaller at edges\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    radii = 0.1 * (1 - 0.5 * distances_to_center / max_dist)\n    \n    return centers, radii\n\ndef initialize_corner_pattern(n):\n    \"\"\"Initialize with a pattern that places circles in corners and edges\"\"\"\n    centers = []\n    \n    # Place circles in corners\n    corners = [[0.1, 0.1], [0.1, 0.9], [0.9, 0.1], [0.9, 0.9]]\n    for corner in corners:\n        centers.append(corner)\n    \n    # Place circles along edges\n    num_edge = 4\n    for i in range(num_edge):\n        centers.append([0.1 + i * 0.8 / (num_edge - 1), 0.1])\n        centers.append([0.1 + i * 0.8 / (num_edge - 1), 0.9])\n        centers.append([0.1, 0.1 + i * 0.8 / (num_edge - 1)])\n        centers.append([0.9, 0.1 + i * 0.8 / (num_edge - 1)])\n    \n    # Fill the interior with a grid\n    interior_points = n - len(centers)\n    if interior_points > 0:\n        grid_size = int(np.ceil(np.sqrt(interior_points)))\n        grid_x = np.linspace(0.3, 0.7, grid_size)\n        grid_y = np.linspace(0.3, 0.7, grid_size)\n        \n        for y in grid_y:\n            for x in grid_x:\n                centers.append([x, y])\n                if len(centers) >= n:\n                    break\n            if len(centers) >= n:\n                break\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize with uniform radii\n    radii = np.ones(n) * 0.08\n    \n    return centers, radii\n\ndef initialize_specialized_pattern(n):\n    \"\"\"Initialize with a specialized pattern for n=26 based on mathematical research\"\"\"\n    # Create a base pattern with circles of different sizes\n    centers = []\n    \n    # Place 4 large circles in a 2x2 grid in the center\n    large_spacing = 0.25\n    for x in [0.5 - large_spacing/2, 0.5 + large_spacing/2]:\n        for y in [0.5 - large_spacing/2, 0.5 + large_spacing/2]:\n            centers.append([x, y])\n    \n    # Place medium circles around the large ones\n    medium_positions = [\n        [0.25, 0.25], [0.25, 0.5], [0.25, 0.75],\n        [0.5, 0.25], [0.5, 0.75],\n        [0.75, 0.25], [0.75, 0.5], [0.75, 0.75]\n    ]\n    for pos in medium_positions:\n        centers.append(pos)\n    \n    # Place small circles at strategic locations\n    small_positions = [\n        [0.125, 0.125], [0.125, 0.375], [0.125, 0.625], [0.125, 0.875],\n        [0.375, 0.125], [0.375, 0.875],\n        [0.625, 0.125], [0.625, 0.875],\n        [0.875, 0.125], [0.875, 0.375], [0.875, 0.625], [0.875, 0.875],\n        [0.5, 0.0], [0.5, 1.0]  # Extra circles at top and bottom\n    ]\n    for pos in small_positions:\n        centers.append(pos)\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize with different radii based on position\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    \n    # Larger circles in center, medium in middle region, smaller at edges\n    radii = np.zeros(n)\n    for i in range(n):\n        if distances_to_center[i] < 0.2:\n            radii[i] = 0.12  # Large\n        elif distances_to_center[i] < 0.4:\n            radii[i] = 0.10  # Medium\n        else:\n            radii[i] = 0.08  # Small\n    \n    return centers, radii\n\ndef multi_stage_optimization(centers, radii):\n    \"\"\"Apply multiple optimization stages to improve the packing\"\"\"\n    # Stage 1: Initial position optimization\n    centers, radii = optimize_positions(centers, radii, iterations=150, step=0.02)\n    \n    # Stage 2: Grow all radii uniformly until constraints are violated\n    centers, radii = grow_radii_uniform(centers, radii)\n    \n    # Stage 3: Optimize positions again with the new radii\n    centers, radii = optimize_positions(centers, radii, iterations=200, step=0.01)\n    \n    # Stage 4: Optimize individual radii\n    centers, radii = optimize_individual_radii(centers, radii, iterations=300)\n    \n    # Stage 5: Final refinement alternating between position and radius adjustments\n    centers, radii = final_refinement(centers, radii, iterations=150)\n    \n    # Stage 6: Specialized optimization for corner and edge circles\n    centers, radii = optimize_boundary_circles(centers, radii)\n    \n    return centers, radii\n\ndef check_overlap(centers, radii, tolerance=1e-10):\n    \"\"\"Check if any circles overlap or violate boundary constraints\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 - tolerance or \n            centers[i][0] + radii[i] > 1 + tolerance or \n            centers[i][1] - radii[i] < 0 - tolerance or \n            centers[i][1] + radii[i] > 1 + tolerance):\n            return True\n        \n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j] - tolerance:\n                return True\n    \n    return False\n\ndef grow_radii_uniform(centers, radii, step=0.0005):\n    \"\"\"Grow all radii uniformly until constraints are violated\"\"\"\n    growing = True\n    while growing:\n        new_radii = radii + step\n        if check_overlap(centers, new_radii):\n            growing = False\n        else:\n            radii = new_radii\n    \n    return centers, radii\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n    \n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n            \n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n                \n                # Force magnitude proportional to overlap with quadratic scaling\n                magnitude = (min_dist - dist) * 0.5 * (1 + (min_dist - dist) * 5)\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n    \n    # Boundary forces with stronger repulsion near edges\n    for i in range(n):\n        # Left boundary\n        dist_to_left = centers[i][0] - radii[i]\n        if dist_to_left < 0:\n            forces[i][0] += abs(dist_to_left) * 0.8 * (1 + abs(dist_to_left) * 10)\n        \n        # Right boundary\n        dist_to_right = 1 - (centers[i][0] + radii[i])\n        if dist_to_right < 0:\n            forces[i][0] -= abs(dist_to_right) * 0.8 * (1 + abs(dist_to_right) * 10)\n        \n        # Bottom boundary\n        dist_to_bottom = centers[i][1] - radii[i]\n        if dist_to_bottom < 0:\n            forces[i][1] += abs(dist_to_bottom) * 0.8 * (1 + abs(dist_to_bottom) * 10)\n        \n        # Top boundary\n        dist_to_top = 1 - (centers[i][1] + radii[i])\n        if dist_to_top < 0:\n            forces[i][1] -= abs(dist_to_top) * 0.8 * (1 + abs(dist_to_top) * 10)\n    \n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach with adaptive step size\"\"\"\n    n = len(centers)\n    \n    for iter in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n        \n        # Calculate force magnitudes for adaptive step size\n        force_magnitudes = np.linalg.norm(forces, axis=1)\n        max_force = np.max(force_magnitudes) if len(force_magnitudes) > 0 else 1.0\n        \n        # Normalize forces to prevent extreme movements\n        if max_force > 1e-10:\n            normalized_forces = forces / max_force\n        else:\n            normalized_forces = forces\n        \n        # Apply forces with adaptive step size\n        current_step = step * (1 - 0.5 * iter / iterations)  # Gradually reduce step size\n        centers += normalized_forces * current_step\n        \n        # Ensure centers stay within bounds while respecting radii\n        for i in range(n):\n            centers[i][0] = np.clip(centers[i][0], radii[i] + 1e-6, 1 - radii[i] - 1e-6)\n            centers[i][1] = np.clip(centers[i][1], radii[i] + 1e-6, 1 - radii[i] - 1e-6)\n    \n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n    \n    # First, try to grow all radii slightly to ensure we're at a local maximum\n    centers, radii = grow_radii_uniform(centers, radii, step=0.0001)\n    \n    for _ in range(iterations):\n        # Randomize the order of circles to prevent bias\n        indices = np.random.permutation(n)\n        \n        for idx in indices:\n            # Try to increase this circle's radius with varying step sizes\n            for step in [0.001, 0.0005, 0.0001]:\n                test_radii = radii.copy()\n                test_radii[idx] += step\n                \n                if not check_overlap(centers, test_radii):\n                    radii = test_radii\n                    break\n    \n    return centers, radii\n\ndef final_refinement(centers, radii, iterations=100):\n    \"\"\"Final refinement with alternating position and radius adjustments\"\"\"\n    n = len(centers)\n    \n    for i in range(iterations):\n        # Adjust positions with small steps\n        centers, radii = optimize_positions(centers, radii, iterations=5, step=0.005)\n        \n        # Try to grow individual radii with decreasing step sizes\n        indices = np.random.permutation(n)\n        for idx in indices:\n            step = 0.0005 * (1 - 0.5 * i / iterations)  # Gradually reduce step size\n            test_radii = radii.copy()\n            test_radii[idx] += step\n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n        \n        # Every 10 iterations, try to grow all radii uniformly\n        if i % 10 == 0:\n            centers, radii = grow_radii_uniform(centers, radii, step=0.0001)\n    \n    return centers, radii\n\ndef optimize_boundary_circles(centers, radii):\n    \"\"\"Special optimization for circles near boundaries and corners\"\"\"\n    n = len(centers)\n    \n    # Identify circles near boundaries and corners\n    boundary_threshold = 0.15\n    corner_threshold = 0.2\n    \n    boundary_circles = []\n    corner_circles = []\n    \n    for i in range(n):\n        x, y = centers[i]\n        \n        # Check if near a boundary\n        near_left = x - radii[i] < boundary_threshold\n        near_right = 1 - (x + radii[i]) < boundary_threshold\n        near_bottom = y - radii[i] < boundary_threshold\n        near_top = 1 - (y + radii[i]) < boundary_threshold\n        \n        if near_left or near_right or near_bottom or near_top:\n            boundary_circles.append(i)\n        \n        # Check if near a corner\n        near_bottom_left = x < corner_threshold and y < corner_threshold\n        near_bottom_right = x > 1 - corner_threshold and y < corner_threshold\n        near_top_left = x < corner_threshold and y > 1 - corner_threshold\n        near_top_right = x > 1 - corner_threshold and y > 1 - corner_threshold\n        \n        if near_bottom_left or near_bottom_right or near_top_left or near_top_right:\n            corner_circles.append(i)\n    \n    # Special optimization for corner circles\n    for idx in corner_circles:\n        # Try to move corner circles exactly into corners\n        x, y = centers[idx]\n        r = radii[idx]\n        \n        if x < 0.5 and y < 0.5:  # Bottom-left\n            new_center = [r, r]\n        elif x >= 0.5 and y < 0.5:  # Bottom-right\n            new_center = [1-r, r]\n        elif x < 0.5 and y >= 0.5:  # Top-left\n            new_center = [r, 1-r]\n        else:  # Top-right\n            new_center = [1-r, 1-r]\n        \n        # Test if this new position works\n        test_centers = centers.copy()\n        test_centers[idx] = new_center\n        \n        if not check_overlap(test_centers, radii):\n            centers = test_centers\n            \n            # Try to grow this corner circle\n            for step in [0.001, 0.0005, 0.0001]:\n                test_radii = radii.copy()\n                test_radii[idx] += step\n                test_centers = centers.copy()\n                test_centers[idx] = [test_radii[idx], test_radii[idx]] if x < 0.5 and y < 0.5 else \\\n                                   [1-test_radii[idx], test_radii[idx]] if x >= 0.5 and y < 0.5 else \\\n                                   [test_radii[idx], 1-test_radii[idx]] if x < 0.5 and y >= 0.5 else \\\n                                   [1-test_radii[idx], 1-test_radii[idx]]\n                \n                if not check_overlap(test_centers, test_radii):\n                    centers = test_centers\n                    radii = test_radii\n    \n    # Optimize boundary circles\n    for idx in boundary_circles:\n        if idx in corner_circles:\n            continue  # Already handled\n        \n        x, y = centers[idx]\n        r = radii[idx]\n        \n        # Try to align exactly with boundaries\n        if x - r < boundary_threshold:  # Near left boundary\n            test_centers = centers.copy()\n            test_centers[idx][0] = r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        elif 1 - (x + r) < boundary_threshold:  # Near right boundary\n            test_centers = centers.copy()\n            test_centers[idx][0] = 1 - r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        if y - r < boundary_threshold:  # Near bottom boundary\n            test_centers = centers.copy()\n            test_centers[idx][1] = r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        elif 1 - (y + r) < boundary_threshold:  # Near top boundary\n            test_centers = centers.copy()\n            test_centers[idx][1] = 1 - r\n            if not check_overlap(test_centers, radii):\n                centers = test_centers\n        \n        # Try to grow this boundary circle\n        for step in [0.001, 0.0005, 0.0001]:\n            test_radii = radii.copy()\n            test_radii[idx] += step\n            test_centers = centers.copy()\n            \n            # Adjust position to maintain tangency with boundary\n            if abs(centers[idx][0] - test_radii[idx]) < 1e-6:  # Left boundary\n                test_centers[idx][0] = test_radii[idx]\n            elif abs(centers[idx][0] - (1 - test_radii[idx])) < 1e-6:  # Right boundary\n                test_centers[idx][0] = 1 - test_radii[idx]\n            \n            if abs(centers[idx][1] - test_radii[idx]) < 1e-6:  # Bottom boundary\n                test_centers[idx][1] = test_radii[idx]\n            elif abs(centers[idx][1] - (1 - test_radii[idx])) < 1e-6:  # Top boundary\n                test_centers[idx][1] = 1 - test_radii[idx]\n            \n            if not check_overlap(test_centers, test_radii):\n                centers = test_centers\n                radii = test_radii\n    \n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\nThis rewritten program implements several key improvements:\n\n1. **Multiple initialization strategies**: The program tries four different starting patterns (hexagonal, grid-based, corner-focused, and a specialized pattern for n=26) and selects the best result.\n\n2. **Specialized corner and boundary optimization**: I've added a dedicated function to optimize circles near corners and boundaries, which is critical for dense packings.\n\n3. **Adaptive force calculation**: The force-directed approach now uses adaptive step sizes and stronger repulsion near boundaries.\n\n4. **Multi-stage optimization pipeline**: The optimization process is now more sophisticated, with six distinct stages that progressively refine the packing.\n\n5. **Variable radii optimization**: The program now uses different strategies for growing radii, both uniformly and individually, with decreasing step sizes for finer control.\n\n6. **Randomized processing order**: When optimizing individual circles, the program now randomizes the order to avoid bias.\n\n7. **More sophisticated boundary handling**: The program now has special handling for circles that should be placed exactly at boundaries and corners.\n\nThese changes should significantly improve the sum of radii metric, pushing it much closer to the target of 2.635."]}}}