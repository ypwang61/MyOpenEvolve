{"id": "e2311996-711b-4fb0-8ca8-16a9dd15d796", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and a gradient-based optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a mix of strategies\n    centers, radii = initialize_mixed_pattern()\n    \n    # Optimize using gradient descent with adaptive learning rate\n    centers, radii = optimize_packing_gradient(centers, radii)\n    \n    # Final refinement using a simplified physics-based approach\n    centers, radii = refine_packing_simple(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef initialize_mixed_pattern():\n    \"\"\"Initialize with a mix of hexagonal and corner-focused patterns\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 larger circles in the corners\n    centers[:4] = np.array([[0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9]])\n    radii[:4] = 0.1  # Initial radius for corner circles\n    \n    # Place 6 circles in a central hexagonal arrangement\n    hex_centers = create_hexagonal_grid(6, center=[0.5, 0.5], scale=0.2)\n    centers[4:10] = hex_centers\n    radii[4:10] = 0.08  # Initial radius for central hexagon\n    \n    # Fill the remaining spots with a somewhat regular distribution\n    remaining = n - 10\n    grid_x = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    grid_y = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    \n    count = 10\n    for x in grid_x:\n        for y in grid_y:\n            if count < n:\n                centers[count] = [x + np.random.normal(0, 0.02), y + np.random.normal(0, 0.02)]\n                radii[count] = 0.06  # Initial radius for remaining circles\n                count += 1\n    \n    radii = compute_max_radii(centers) # Ensure no initial overlaps\n\n    return centers, radii\n\n\ndef create_hexagonal_grid(num_circles, center=[0.5, 0.5], scale=0.2):\n    \"\"\"Creates a hexagonal grid of circles.\"\"\"\n    centers = []\n    for i in range(num_circles):\n        angle = 2 * np.pi * i / num_circles\n        x = center[0] + scale * np.cos(angle)\n        y = center[1] + scale * np.sin(angle)\n        centers.append([x, y])\n    return np.array(centers)\n\n\ndef optimize_packing_gradient(centers, radii, iterations=1000, learning_rate=0.01):\n    \"\"\"Optimizes the circle packing using a gradient descent approach.\"\"\"\n    n = centers.shape[0]\n    \n    # Adaptive learning rate parameters\n    initial_learning_rate = learning_rate\n    decay_rate = 0.995\n    \n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for iteration in range(iterations):\n        # Calculate the overlap penalty\n        overlap_penalty = 0.0\n        gradient_centers = np.zeros_like(centers)\n        gradient_radii = np.zeros_like(radii)\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlap_penalty += overlap**2\n                    \n                    # Gradient calculation (simplified)\n                    direction = dist_vec / (dist + 1e-8) # Avoid division by zero\n                    gradient_centers[i] += overlap * direction\n                    gradient_centers[j] -= overlap * direction\n                    gradient_radii[i] += overlap\n                    gradient_radii[j] += overlap\n        \n        # Apply border penalty\n        border_penalty = 0.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                border_penalty += (r - x)**2\n                gradient_centers[i, 0] += (r - x)\n                gradient_radii[i] += (r - x)\n            if x > 1 - r:\n                border_penalty += (x - (1 - r))**2\n                gradient_centers[i, 0] -= (x - (1 - r))\n                gradient_radii[i] += (x - (1 - r))\n            if y < r:\n                border_penalty += (r - y)**2\n                gradient_centers[i, 1] += (r - y)\n                gradient_radii[i] += (r - y)\n            if y > 1 - r:\n                border_penalty += (y - (1 - r))**2\n                gradient_centers[i, 1] -= (y - (1 - r))\n                gradient_radii[i] += (y - (1 - r))\n        \n        # Update positions and radii using gradient descent\n        centers += learning_rate * gradient_centers\n        radii += learning_rate * gradient_radii\n        \n        # Clip values to stay within bounds and avoid negative radii\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = np.clip(radii, 0.001, 0.3)\n        \n        # Recalculate radii based on current positions\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Adaptive learning rate\n        learning_rate = initial_learning_rate * (decay_rate ** iteration)\n        \n        # Keep track of the best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef refine_packing_simple(centers, radii, iterations=200):\n    \"\"\"Refines the packing using a simplified physics-based approach.\"\"\"\n    n = centers.shape[0]\n    \n    repulsion_strength = 0.0005\n    border_repulsion = 0.001\n    \n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n        \n        # Update positions\n        centers += forces * 0.1\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)  # Start with zero radii\n    \n    for i in range(n):\n        # Border constraints\n        x, y = centers[i]\n        border_limit = min(x, y, 1 - x, 1 - y)\n        \n        # Circle-circle constraints\n        circle_limit = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                circle_limit = min(circle_limit, (dist - radii[j]) / 2) # Divide by 2 to avoid overlap\n        \n        radii[i] = min(border_limit, circle_limit)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "be1f63ff-b018-4515-a8df-0fee8dfe798e", "generation": 4, "timestamp": 1750752289.7314835, "iteration_found": 60, "metrics": {"validity": 1.0, "sum_radii": 1.0874734917680948, "target_ratio": 0.4127034124357096, "combined_score": 0.4127034124357096, "eval_time": 3.5346884727478027}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.369663747266415, "target_ratio": 0.8993031298923777, "combined_score": 0.8993031298923777, "eval_time": 51.03829216957092}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.3697\n- target_ratio: 0.8993\n- combined_score: 0.8993\n- eval_time: 51.0383\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score, eval_time. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 2.2364)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a specialized pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1702), Performs well on target_ratio (0.8236), Performs well on combined_score (0.8236), Performs well on eval_time (6.3646)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized patterns\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Try multiple different initialization strategies and select the best\n    best_centers = None\n    best_radii = None\n    best_sum = 0\n    \n    # Try different strategies\n    strategies = [\n        initialize_corner_centered,\n        initialize_hex_grid,\n        initialize_variable_sized,\n        initialize_hybrid_pattern\n    ]\n    \n    for init_strategy in strategies:\n        centers, radii = init_strategy()\n        centers, radii = optimize_packing(centers, radii)\n        sum_radii = np.sum(radii)\n        \n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    # Final refinement\n    best_centers, best_radii = refine_packing(best_centers, best_radii)\n    best_sum = np.sum(best_radii)\n    \n    return best_centers, best_radii, best_sum\n\n\ndef initialize_corner_centered():\n    \"\"\"Initialize with larger circles in corners and smaller ones in the center\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Place circles in corners and along edges\n    centers[0] = [0.12, 0.12]  # Bottom-left\n    centers[1] = [0.88, 0.12]  # Bottom-right\n    centers[2] = [0.12, 0.88]  # Top-left\n    centers[3] = [0.88, 0.88]  # Top-right\n    \n    # Place circles along edges\n    centers[4] = [0.5, 0.12]   # Bottom edge\n    centers[5] = [0.5, 0.88]   # Top edge\n    centers[6] = [0.12, 0.5]   # Left edge\n    centers[7] = [0.88, 0.5]   # Right edge\n    \n    # Fill the interior with a grid pattern\n    interior_count = n - 8\n    grid_size = int(np.ceil(np.sqrt(interior_count)))\n    \n    count = 8\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.25 + (j * 0.5 / (grid_size - 1))\n                y = 0.25 + (i * 0.5 / (grid_size - 1))\n                centers[count] = [x, y]\n                count += 1\n    \n    # Calculate initial radii\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef initialize_hex_grid():\n    \"\"\"Initialize with a hexagonal grid pattern\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Hexagonal grid parameters\n    rows = 5\n    cols = 6\n    \n    # Spacing\n    dx = 1.0 / (cols + 0.5)\n    dy = 1.0 / (rows + 0.5)\n    \n    # Create hexagonal grid\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if count < n:\n                x = (j + 0.5 + (i % 2) * 0.5) * dx\n                y = (i + 0.5) * dy\n                \n                # Adjust to fit better in the unit square\n                x = 0.05 + x * 0.9\n                y = 0.05 + y * 0.9\n                \n                centers[count] = [x, y]\n                count += 1\n    \n    # Calculate initial radii\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef initialize_variable_sized():\n    \"\"\"Initialize with variable sized circles - larger in center, smaller at edges\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Place one large circle in the center\n    centers[0] = [0.5, 0.5]\n    \n    # Place medium circles in a ring around the center\n    ring1_count = 6\n    for i in range(ring1_count):\n        angle = 2 * np.pi * i / ring1_count\n        r = 0.25  # Distance from center\n        centers[i+1] = [\n            0.5 + r * np.cos(angle),\n            0.5 + r * np.sin(angle)\n        ]\n    \n    # Place smaller circles in outer rings\n    ring2_count = 12\n    for i in range(ring2_count):\n        angle = 2 * np.pi * i / ring2_count\n        r = 0.38  # Distance from center\n        centers[i+1+ring1_count] = [\n            0.5 + r * np.cos(angle),\n            0.5 + r * np.sin(angle)\n        ]\n    \n    # Place the remaining circles near corners and edges\n    remaining = n - (1 + ring1_count + ring2_count)\n    corners = [[0.15, 0.15], [0.85, 0.15], [0.15, 0.85], [0.85, 0.85]]\n    edges = [[0.5, 0.15], [0.5, 0.85], [0.15, 0.5], [0.85, 0.5]]\n    \n    for i in range(remaining):\n        if i < 4:\n            centers[i+1+ring1_count+ring2_count] = corners[i]\n        else:\n            centers[i+1+ring1_count+ring2_count] = edges[i-4]\n    \n    # Calculate initial radii\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"Initialize with a hybrid pattern based on mathematical principles\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Create a pattern with 5 rows\n    # Row 1: 5 circles\n    # Row 2: 6 circles\n    # Row 3: 5 circles\n    # Row 4: 6 circles\n    # Row 5: 4 circles\n    \n    row_counts = [5, 6, 5, 6, 4]\n    row_y = [0.1, 0.3, 0.5, 0.7, 0.9]\n    \n    count = 0\n    for row, num_circles in enumerate(row_counts):\n        y = row_y[row]\n        offset = 0.5 * (1.0 - (num_circles - 1) * 0.2)\n        \n        for col in range(num_circles):\n            x = offset + col * 0.2\n            centers[count] = [x, y]\n            count += 1\n    \n    # Calculate initial radii\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef optimize_packing(centers, radii, iterations=500):\n    \"\"\"\n    Optimize circle packing using a physics-based approach with adaptive parameters.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Physics parameters\n    repulsion_strength = 0.001\n    attraction_strength = 0.0005\n    border_repulsion = 0.002\n    damping = 0.8\n    dt = 0.1\n    \n    velocities = np.zeros_like(centers)\n    \n    # Track best configuration\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    # Optimization loop\n    for iteration in range(iterations):\n        # Adaptive parameters based on iteration progress\n        progress = iteration / iterations\n        current_repulsion = repulsion_strength * (1.0 - 0.5 * progress)\n        current_border = border_repulsion * (1.0 + progress)\n        \n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                \n                if dist < 1e-10:  # Avoid division by zero\n                    dist = 1e-10\n                    dist_vec = np.array([1e-10, 1e-10])\n                \n                direction = dist_vec / dist\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    # Repulsive force for overlapping circles\n                    overlap = min_dist - dist\n                    force = current_repulsion * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n                else:\n                    # Weak attractive force for non-overlapping circles\n                    # This helps create denser packings\n                    gap = dist - min_dist\n                    force = -attraction_strength * gap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Repulsion from borders\n            if x < r:\n                forces[i, 0] += current_border * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= current_border * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += current_border * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= current_border * (y - (1 - r))\n        \n        # Update velocities and positions\n        velocities = damping * velocities + forces * dt\n        centers += velocities * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], 0.001, 0.999)\n            centers[i, 1] = np.clip(centers[i, 1], 0.001, 0.999)\n        \n        # Recalculate radii\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Save best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n        \n        # Simulated annealing - occasionally accept worse solutions\n        if np.random.rand() < 0.1 * (1.0 - progress):\n            # Small random perturbation\n            centers += np.random.normal(0, 0.01, centers.shape)\n    \n    return best_centers, best_radii\n\n\ndef refine_packing(centers, radii):\n    \"\"\"\n    Fine-tune the packing by making small adjustments to maximize radii sum.\n    \"\"\"\n    n = centers.shape[0]\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    # Try small perturbations for each circle\n    for i in range(n):\n        for _ in range(10):  # Try multiple perturbations per circle\n            # Save original position\n            original_pos = centers[i].copy()\n            \n            # Apply small random perturbation\n            centers[i] += np.random.normal(0, 0.01, 2)\n            centers[i] = np.clip(centers[i], 0.001, 0.999)\n            \n            # Recalculate radii\n            new_radii = compute_max_radii(centers)\n            new_sum = np.sum(new_radii)\n            \n            # Keep if better, revert if worse\n            if new_sum > best_sum:\n                best_sum = new_sum\n                best_centers = centers.copy()\n                best_radii = new_radii.copy()\n            else:\n                # Revert to original position\n                centers[i] = original_pos\n    \n    # Try specialized patterns for small groups of circles\n    # This can help break local optima\n    for _ in range(5):\n        # Select a random group of nearby circles\n        center_idx = np.random.randint(0, n)\n        group_indices = [center_idx]\n        \n        # Find 3-4 nearest neighbors\n        distances = []\n        for j in range(n):\n            if j != center_idx:\n                dist = np.linalg.norm(centers[center_idx] - centers[j])\n                distances.append((j, dist))\n        \n        distances.sort(key=lambda x: x[1])\n        for j, _ in distances[:3]:  # Add 3 nearest neighbors\n            group_indices.append(j)\n        \n        # Save original positions\n        original_positions = centers[group_indices].copy()\n        \n        # Try rearranging this small group in a mini-hexagonal pattern\n        center_point = np.mean(centers[group_indices], axis=0)\n        \n        for idx, i in enumerate(group_indices):\n            if idx == 0:\n                centers[i] = center_point\n            else:\n                angle = 2 * np.pi * (idx - 1) / (len(group_indices) - 1)\n                r = 0.1  # Small radius for the arrangement\n                centers[i] = [\n                    center_point[0] + r * np.cos(angle),\n                    center_point[1] + r * np.sin(angle)\n                ]\n                centers[i] = np.clip(centers[i], 0.001, 0.999)\n        \n        # Recalculate radii\n        new_radii = compute_max_radii(centers)\n        new_sum = np.sum(new_radii)\n        \n        # Keep if better, revert if worse\n        if new_sum > best_sum:\n            best_sum = new_sum\n            best_centers = centers.copy()\n            best_radii = new_radii.copy()\n        else:\n            # Revert to original positions\n            centers[group_indices] = original_positions\n    \n    return best_centers, best_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n    \n    # Limit by distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n    \n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                radii[i] = min(radii[i], dist)\n    \n    # Scale all radii by 0.5 to avoid overlaps\n    radii *= 0.5\n    \n    # Iteratively grow radii until constraints are hit\n    for _ in range(10):\n        for i in range(n):\n            # Border constraints\n            x, y = centers[i]\n            border_limit = min(x, y, 1 - x, 1 - y)\n            \n            # Circle-circle constraints\n            circle_limit = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    circle_limit = min(circle_limit, dist - radii[j])\n            \n            # Update radius to maximum possible value\n            radii[i] = min(border_limit, circle_limit)\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and a gradient-based optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a mix of strategies\n    centers, radii = initialize_mixed_pattern()\n    \n    # Optimize using gradient descent with adaptive learning rate\n    centers, radii = optimize_packing_gradient(centers, radii)\n    \n    # Final refinement using a simplified physics-based approach\n    centers, radii = refine_packing_simple(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef initialize_mixed_pattern():\n    \"\"\"Initialize with a mix of hexagonal and corner-focused patterns\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 larger circles in the corners\n    centers[:4] = np.array([[0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9]])\n    radii[:4] = 0.1  # Initial radius for corner circles\n    \n    # Place 6 circles in a central hexagonal arrangement\n    hex_centers = create_hexagonal_grid(6, center=[0.5, 0.5], scale=0.2)\n    centers[4:10] = hex_centers\n    radii[4:10] = 0.08  # Initial radius for central hexagon\n    \n    # Fill the remaining spots with a somewhat regular distribution\n    remaining = n - 10\n    grid_x = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    grid_y = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    \n    count = 10\n    for x in grid_x:\n        for y in grid_y:\n            if count < n:\n                centers[count] = [x + np.random.normal(0, 0.02), y + np.random.normal(0, 0.02)]\n                radii[count] = 0.06  # Initial radius for remaining circles\n                count += 1\n    \n    radii = compute_max_radii(centers) # Ensure no initial overlaps\n\n    return centers, radii\n\n\ndef create_hexagonal_grid(num_circles, center=[0.5, 0.5], scale=0.2):\n    \"\"\"Creates a hexagonal grid of circles.\"\"\"\n    centers = []\n    for i in range(num_circles):\n        angle = 2 * np.pi * i / num_circles\n        x = center[0] + scale * np.cos(angle)\n        y = center[1] + scale * np.sin(angle)\n        centers.append([x, y])\n    return np.array(centers)\n\n\ndef optimize_packing_gradient(centers, radii, iterations=1000, learning_rate=0.01):\n    \"\"\"Optimizes the circle packing using a gradient descent approach.\"\"\"\n    n = centers.shape[0]\n    \n    # Adaptive learning rate parameters\n    initial_learning_rate = learning_rate\n    decay_rate = 0.995\n    \n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for iteration in range(iterations):\n        # Calculate the overlap penalty\n        overlap_penalty = 0.0\n        gradient_centers = np.zeros_like(centers)\n        gradient_radii = np.zeros_like(radii)\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlap_penalty += overlap**2\n                    \n                    # Gradient calculation (simplified)\n                    direction = dist_vec / (dist + 1e-8) # Avoid division by zero\n                    gradient_centers[i] += overlap * direction\n                    gradient_centers[j] -= overlap * direction\n                    gradient_radii[i] += overlap\n                    gradient_radii[j] += overlap\n        \n        # Apply border penalty\n        border_penalty = 0.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                border_penalty += (r - x)**2\n                gradient_centers[i, 0] += (r - x)\n                gradient_radii[i] += (r - x)\n            if x > 1 - r:\n                border_penalty += (x - (1 - r))**2\n                gradient_centers[i, 0] -= (x - (1 - r))\n                gradient_radii[i] += (x - (1 - r))\n            if y < r:\n                border_penalty += (r - y)**2\n                gradient_centers[i, 1] += (r - y)\n                gradient_radii[i] += (r - y)\n            if y > 1 - r:\n                border_penalty += (y - (1 - r))**2\n                gradient_centers[i, 1] -= (y - (1 - r))\n                gradient_radii[i] += (y - (1 - r))\n        \n        # Update positions and radii using gradient descent\n        centers += learning_rate * gradient_centers\n        radii += learning_rate * gradient_radii\n        \n        # Clip values to stay within bounds and avoid negative radii\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = np.clip(radii, 0.001, 0.3)\n        \n        # Recalculate radii based on current positions\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Adaptive learning rate\n        learning_rate = initial_learning_rate * (decay_rate ** iteration)\n        \n        # Keep track of the best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef refine_packing_simple(centers, radii, iterations=200):\n    \"\"\"Refines the packing using a simplified physics-based approach.\"\"\"\n    n = centers.shape[0]\n    \n    repulsion_strength = 0.0005\n    border_repulsion = 0.001\n    \n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n        \n        # Update positions\n        centers += forces * 0.1\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)  # Start with zero radii\n    \n    for i in range(n):\n        # Border constraints\n        x, y = centers[i]\n        border_limit = min(x, y, 1 - x, 1 - y)\n        \n        # Circle-circle constraints\n        circle_limit = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                circle_limit = min(circle_limit, (dist - radii[j]) / 2) # Divide by 2 to avoid overlap\n        \n        radii[i] = min(border_limit, circle_limit)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}