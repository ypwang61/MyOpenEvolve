{"id": "d190aeff-1b43-45cd-bbab-3f70c53f38da", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a Voronoi-based initialization,\n   force-directed optimization, and adaptive radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with Voronoi-based distribution for better space coverage\n    centers = initialize_voronoi_pattern(n)\n\n    # Initialize radii based on distance to nearest neighbor\n    radii = initialize_radii(centers)\n\n    # Multi-stage optimization\n    # Stage 1: Global position optimization with radius adjustment\n    centers, radii = optimize_positions_radii_global(centers, radii, iterations=250)\n\n    # Stage 2: Individual radius optimization\n    centers, radii = optimize_individual_radii(centers, radii, iterations=350)\n\n    # Stage 3: Final position refinement with reduced step size\n    centers, radii = optimize_positions(centers, radii, iterations=150, step=0.002)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_voronoi_pattern(n):\n    \"\"\"Initialize circle centers using a Voronoi diagram.\"\"\"\n    # Generate random points within the unit square\n    points = np.random.rand(n, 2)\n\n    # Compute Voronoi diagram\n    vor = Voronoi(points)\n\n    # Use Voronoi vertices as initial circle centers (clip to unit square)\n    centers = vor.vertices\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Select the first n valid centers\n    valid_centers = []\n    for center in centers:\n        if 0 <= center[0] <= 1 and 0 <= center[1] <= 1:\n            valid_centers.append(center)\n            if len(valid_centers) == n:\n                break\n\n    # If we don't have enough valid centers, pad with random points\n    while len(valid_centers) < n:\n        new_point = np.random.rand(2)\n        valid_centers.append(new_point)\n    return np.array(valid_centers)\n\ndef initialize_radii(centers):\n    \"\"\"Initialize radii based on distance to nearest neighbor.\"\"\"\n    n = len(centers)\n    radii = np.zeros(n)\n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = min(min_dist, dist)\n        radii[i] = min_dist / 3.0  # Initial radius is 1/3 of nearest neighbor distance\n        radii[i] = min(radii[i], 0.2)  # cap initial radii\n    return radii\n\ndef check_overlap(centers, radii):\n    \"\"\"Check if any circles overlap\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 or\n            centers[i][0] + radii[i] > 1 or\n            centers[i][1] - radii[i] < 0 or\n            centers[i][1] + radii[i] > 1):\n            return True\n\n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j] - 1e-6: #Added small tolerance\n                return True\n\n    return False\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n\n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n\n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n\n                # Force magnitude proportional to overlap\n                magnitude = (min_dist - dist) * 0.5\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n\n    # Boundary forces\n    for i in range(n):\n        # Left boundary\n        if centers[i][0] - radii[i] < 0:\n            forces[i][0] += (radii[i] - centers[i][0]) * 0.5\n\n        # Right boundary\n        if centers[i][0] + radii[i] > 1:\n            forces[i][0] -= (centers[i][0] + radii[i] - 1) * 0.5\n\n        # Bottom boundary\n        if centers[i][1] - radii[i] < 0:\n            forces[i][1] += (radii[i] - centers[i][1]) * 0.5\n\n        # Top boundary\n        if centers[i][1] + radii[i] > 1:\n            forces[i][1] -= (centers[i][1] + radii[i] - 1) * 0.5\n\n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n\n        # Apply forces with damping\n        centers += forces * step\n\n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Reduce step size over time for convergence\n        step *= 0.99\n\n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Try to increase this circle's radius\n            test_radii = radii.copy()\n            test_radii[i] += 0.0005\n\n            if not check_overlap(centers, test_radii):\n                radii[i] = test_radii[i]\n\n    return centers, radii\n\ndef optimize_positions_radii_global(centers, radii, iterations=100, pos_step=0.01, rad_step=0.0005):\n    \"\"\"Optimize positions and radii simultaneously.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        # Calculate forces and update positions\n        forces = get_overlap_forces(centers, radii)\n        centers += forces * pos_step\n        centers = np.clip(centers, 0.001, 0.999)\n        pos_step *= 0.99\n\n        # Adjust radii based on available space\n        for i in range(n):\n            original_radius = radii[i]\n            radii[i] += rad_step\n            if check_overlap(centers, radii):\n                radii[i] = original_radius  # Revert if overlap occurs\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "04a34f56-cb77-448c-8afe-94421203704d", "generation": 7, "timestamp": 1750751466.0181458, "iteration_found": 43, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and gradient-based optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a hybrid pattern - larger circles in center, smaller at edges\n    # This pattern is based on mathematical analysis of optimal circle packing\n    centers, radii = initialize_pattern(n)\n    \n    # Multi-stage optimization\n    # Stage 1: Grow all radii uniformly until constraints are violated\n    centers, radii = grow_radii_uniform(centers, radii)\n    \n    # Stage 2: Optimize positions using force-directed approach\n    centers, radii = optimize_positions(centers, radii, iterations=200)\n    \n    # Stage 3: Fine-tune individual radii\n    centers, radii = optimize_individual_radii(centers, radii, iterations=300)\n    \n    # Stage 4: Final refinement with alternating position and radius adjustments\n    centers, radii = final_refinement(centers, radii, iterations=100)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern(n):\n    \"\"\"Initialize with a specialized pattern for 26 circles\"\"\"\n    # Create a pattern with 5x5 grid plus one extra circle\n    # The pattern has larger circles in the center and smaller at the edges\n    \n    # Start with a grid-based arrangement\n    rows, cols = 5, 5\n    grid_x = np.linspace(0.1, 0.9, cols)\n    grid_y = np.linspace(0.1, 0.9, rows)\n    \n    centers = []\n    for y in grid_y:\n        for x in grid_x:\n            centers.append([x, y])\n    \n    # Add one more circle in a strategic location\n    centers.append([0.5, 0.5])  # Center of the square\n    \n    # Convert to numpy array and take first n centers\n    centers = np.array(centers[:n])\n    \n    # Initialize radii - larger in center, smaller at edges\n    distances_to_center = np.linalg.norm(centers - np.array([0.5, 0.5]), axis=1)\n    max_dist = np.max(distances_to_center)\n    radii = 0.1 * (1 - 0.7 * distances_to_center / max_dist)\n    \n    return centers, radii\n\ndef check_overlap(centers, radii):\n    \"\"\"Check if any circles overlap\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 or \n            centers[i][0] + radii[i] > 1 or \n            centers[i][1] - radii[i] < 0 or \n            centers[i][1] + radii[i] > 1):\n            return True\n        \n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j]:\n                return True\n    \n    return False\n\ndef grow_radii_uniform(centers, radii, step=0.001):\n    \"\"\"Grow all radii uniformly until constraints are violated\"\"\"\n    growing = True\n    while growing:\n        new_radii = radii + step\n        if check_overlap(centers, new_radii):\n            growing = False\n        else:\n            radii = new_radii\n    \n    return centers, radii\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n    \n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n            \n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n                \n                # Force magnitude proportional to overlap\n                magnitude = (min_dist - dist) * 0.5\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n    \n    # Boundary forces\n    for i in range(n):\n        # Left boundary\n        if centers[i][0] - radii[i] < 0:\n            forces[i][0] += (radii[i] - centers[i][0]) * 0.5\n        \n        # Right boundary\n        if centers[i][0] + radii[i] > 1:\n            forces[i][0] -= (centers[i][0] + radii[i] - 1) * 0.5\n        \n        # Bottom boundary\n        if centers[i][1] - radii[i] < 0:\n            forces[i][1] += (radii[i] - centers[i][1]) * 0.5\n        \n        # Top boundary\n        if centers[i][1] + radii[i] > 1:\n            forces[i][1] -= (centers[i][1] + radii[i] - 1) * 0.5\n    \n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n        \n        # Apply forces with damping\n        centers += forces * step\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Reduce step size over time for convergence\n        step *= 0.99\n    \n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        for i in range(n):\n            # Try to increase this circle's radius\n            test_radii = radii.copy()\n            test_radii[i] += 0.001\n            \n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n    \n    return centers, radii\n\ndef final_refinement(centers, radii, iterations=100):\n    \"\"\"Final refinement with alternating position and radius adjustments\"\"\"\n    for i in range(iterations):\n        # Adjust positions slightly\n        centers, radii = optimize_positions(centers, radii, iterations=5, step=0.005)\n        \n        # Try to grow radii\n        for j in range(len(centers)):\n            test_radii = radii.copy()\n            test_radii[j] += 0.0005\n            if not check_overlap(centers, test_radii):\n                radii = test_radii\n    \n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a Voronoi-based initialization,\n   force-directed optimization, and adaptive radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with Voronoi-based distribution for better space coverage\n    centers = initialize_voronoi_pattern(n)\n\n    # Initialize radii based on distance to nearest neighbor\n    radii = initialize_radii(centers)\n\n    # Multi-stage optimization\n    # Stage 1: Global position optimization with radius adjustment\n    centers, radii = optimize_positions_radii_global(centers, radii, iterations=250)\n\n    # Stage 2: Individual radius optimization\n    centers, radii = optimize_individual_radii(centers, radii, iterations=350)\n\n    # Stage 3: Final position refinement with reduced step size\n    centers, radii = optimize_positions(centers, radii, iterations=150, step=0.002)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_voronoi_pattern(n):\n    \"\"\"Initialize circle centers using a Voronoi diagram.\"\"\"\n    # Generate random points within the unit square\n    points = np.random.rand(n, 2)\n\n    # Compute Voronoi diagram\n    vor = Voronoi(points)\n\n    # Use Voronoi vertices as initial circle centers (clip to unit square)\n    centers = vor.vertices\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Select the first n valid centers\n    valid_centers = []\n    for center in centers:\n        if 0 <= center[0] <= 1 and 0 <= center[1] <= 1:\n            valid_centers.append(center)\n            if len(valid_centers) == n:\n                break\n\n    # If we don't have enough valid centers, pad with random points\n    while len(valid_centers) < n:\n        new_point = np.random.rand(2)\n        valid_centers.append(new_point)\n    return np.array(valid_centers)\n\ndef initialize_radii(centers):\n    \"\"\"Initialize radii based on distance to nearest neighbor.\"\"\"\n    n = len(centers)\n    radii = np.zeros(n)\n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = min(min_dist, dist)\n        radii[i] = min_dist / 3.0  # Initial radius is 1/3 of nearest neighbor distance\n        radii[i] = min(radii[i], 0.2)  # cap initial radii\n    return radii\n\ndef check_overlap(centers, radii):\n    \"\"\"Check if any circles overlap\"\"\"\n    n = len(centers)\n    for i in range(n):\n        # Check boundary constraints\n        if (centers[i][0] - radii[i] < 0 or\n            centers[i][0] + radii[i] > 1 or\n            centers[i][1] - radii[i] < 0 or\n            centers[i][1] + radii[i] > 1):\n            return True\n\n        # Check circle-circle overlaps\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            if dist < radii[i] + radii[j] - 1e-6: #Added small tolerance\n                return True\n\n    return False\n\ndef get_overlap_forces(centers, radii):\n    \"\"\"Calculate forces to resolve overlaps between circles and boundaries\"\"\"\n    n = len(centers)\n    forces = np.zeros_like(centers)\n\n    # Circle-circle repulsion forces\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_vec = centers[i] - centers[j]\n            dist = np.linalg.norm(dist_vec)\n            min_dist = radii[i] + radii[j]\n\n            if dist < min_dist:\n                # Normalize direction vector\n                if dist > 1e-10:  # Avoid division by zero\n                    direction = dist_vec / dist\n                else:\n                    direction = np.array([1.0, 0.0])  # Arbitrary direction if centers coincide\n\n                # Force magnitude proportional to overlap\n                magnitude = (min_dist - dist) * 0.5\n                forces[i] += direction * magnitude\n                forces[j] -= direction * magnitude\n\n    # Boundary forces\n    for i in range(n):\n        # Left boundary\n        if centers[i][0] - radii[i] < 0:\n            forces[i][0] += (radii[i] - centers[i][0]) * 0.5\n\n        # Right boundary\n        if centers[i][0] + radii[i] > 1:\n            forces[i][0] -= (centers[i][0] + radii[i] - 1) * 0.5\n\n        # Bottom boundary\n        if centers[i][1] - radii[i] < 0:\n            forces[i][1] += (radii[i] - centers[i][1]) * 0.5\n\n        # Top boundary\n        if centers[i][1] + radii[i] > 1:\n            forces[i][1] -= (centers[i][1] + radii[i] - 1) * 0.5\n\n    return forces\n\ndef optimize_positions(centers, radii, iterations=100, step=0.01):\n    \"\"\"Optimize circle positions using force-directed approach\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        # Calculate forces\n        forces = get_overlap_forces(centers, radii)\n\n        # Apply forces with damping\n        centers += forces * step\n\n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Reduce step size over time for convergence\n        step *= 0.99\n\n    return centers, radii\n\ndef optimize_individual_radii(centers, radii, iterations=100):\n    \"\"\"Fine-tune individual radii to maximize sum while maintaining constraints\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Try to increase this circle's radius\n            test_radii = radii.copy()\n            test_radii[i] += 0.0005\n\n            if not check_overlap(centers, test_radii):\n                radii[i] = test_radii[i]\n\n    return centers, radii\n\ndef optimize_positions_radii_global(centers, radii, iterations=100, pos_step=0.01, rad_step=0.0005):\n    \"\"\"Optimize positions and radii simultaneously.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        # Calculate forces and update positions\n        forces = get_overlap_forces(centers, radii)\n        centers += forces * pos_step\n        centers = np.clip(centers, 0.001, 0.999)\n        pos_step *= 0.99\n\n        # Adjust radii based on available space\n        for i in range(n):\n            original_radius = radii[i]\n            radii[i] += rad_step\n            if check_overlap(centers, radii):\n                radii[i] = original_radius  # Revert if overlap occurs\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}