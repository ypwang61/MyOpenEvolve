{"id": "5e057245-8505-4961-b054-6ed67d68e8e5", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers, radii = initialize_pattern()\n\n    # Optimize the centers and radii using physics-based simulation\n    centers, radii = optimize_packing(centers, radii)\n\n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Start with a denser hexagonal packing in the center\n    num_hex_layers = 2  # Adjust for desired density\n    center_x, center_y = 0.5, 0.5\n    base_radius = 0.08  # Initial guess for circle radius\n    circle_index = 0\n\n    for layer in range(num_hex_layers):\n        num_circles = 6 * layer if layer > 0 else 1\n        layer_radius = (2 * layer / np.sqrt(3)) * base_radius # Distance from center of square to center of circle\n\n        if layer == 0:\n            centers[circle_index] = [center_x, center_y]\n            radii[circle_index] = base_radius\n            circle_index += 1\n        else:\n            for i in range(num_circles):\n                angle = 2 * np.pi * i / num_circles\n                x = center_x + layer_radius * np.cos(angle)\n                y = center_y + layer_radius * np.sin(angle)\n                centers[circle_index] = [x, y]\n                radii[circle_index] = base_radius\n                circle_index += 1\n\n    # Fill remaining circles randomly, but biased towards the edges\n    while circle_index < n:\n        # Bias the random position towards the edges\n        x = np.random.uniform(0, 1)\n        y = np.random.uniform(0, 1)\n\n        centers[circle_index] = [x, y]\n        radii[circle_index] = 0.05  # Smaller radius for remaining circles\n        circle_index += 1\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.02  # Increased repulsion\n    wall_repulsion = 0.01  # Increased wall repulsion\n    iterations = 300  # More iterations\n    learning_rate = 0.2  # Increased learning rate\n    radius_adjust_rate = 0.02  # Increased radius adjust rate\n    gravity_strength = 0.001 # Add gravity towards the center to prevent circles from drifting to edges\n\n    for iteration in range(iterations):\n        # Calculate repulsive forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n\n        # Calculate repulsive forces from walls\n        for i in range(n):\n            x, y = centers[i]\n            if x < radii[i]:\n                forces[i, 0] += wall_repulsion * (radii[i] - x)\n            if x > 1 - radii[i]:\n                forces[i, 0] -= wall_repulsion * (x - (1 - radii[i]))\n            if y < radii[i]:\n                forces[i, 1] += wall_repulsion * (radii[i] - y)\n            if y > 1 - radii[i]:\n                forces[i, 1] -= wall_repulsion * (y - (1 - radii[i]))\n\n            # Add gravity towards the center\n            direction_to_center = np.array([0.5, 0.5]) - centers[i]\n            forces[i] += gravity_strength * direction_to_center\n\n        # Update centers based on forces\n        centers += learning_rate * forces\n\n        # Adjust radii to maximize sum\n        for i in range(n):\n            # Increase radius if possible\n            potential_increase = radius_adjust_rate\n            new_radius = radii[i] + potential_increase\n\n            # Check for overlaps with other circles\n            overlap = False\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < new_radius + radii[j]:\n                        overlap = True\n                        break\n\n            # Check for boundary violations\n            if centers[i][0] - new_radius < 0 or centers[i][0] + new_radius > 1 or \\\n               centers[i][1] - new_radius < 0 or centers[i][1] + new_radius > 1:\n                overlap = True\n\n            if not overlap:\n                radii[i] = new_radius\n\n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0, 1)\n        radii = np.clip(radii, 0.001, 0.4)  # Ensure radii are positive and not too large, limit max radius\n\n        # Reduce learning rate over time\n        learning_rate *= 0.995 # Reduced learning rate decay\n        radius_adjust_rate *= 0.995 #Reduced radius adjust decay\n\n    return centers, radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "f4ee6fda-1fb5-473d-ba6b-f1efcd282374", "generation": 5, "timestamp": 1750750870.9346101, "iteration_found": 23, "metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers, radii = initialize_pattern()\n\n    # Optimize the centers and radii using physics-based simulation\n    centers, radii = optimize_packing(centers, radii)\n\n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.18\n\n    # Inner hexagon (6 circles)\n    hex_radius = 0.3\n    inner_radius = 0.08\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + hex_radius * np.cos(angle), 0.5 + hex_radius * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Outer ring (12 circles)\n    outer_radius = 0.45\n    outer_inner_radius = 0.05\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[i + 7] = [0.5 + outer_radius * np.cos(angle), 0.5 + outer_radius * np.sin(angle)]\n        radii[i + 7] = outer_inner_radius\n\n    # Corners (4 circles)\n    corner_radius = 0.06\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.1, 0.9]\n    centers[21] = [0.9, 0.1]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = corner_radius\n\n    # Edges (3 circles)\n    edge_radius = 0.07\n    centers[23] = [0.5, 0.1]\n    centers[24] = [0.1, 0.5]\n    centers[25] = [0.9, 0.5]\n    radii[23:26] = edge_radius\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.01\n    wall_repulsion = 0.005\n    iterations = 200\n    learning_rate = 0.1\n    radius_adjust_rate = 0.01\n\n    for iteration in range(iterations):\n        # Calculate repulsive forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n\n        # Calculate repulsive forces from walls\n        for i in range(n):\n            x, y = centers[i]\n            if x < radii[i]:\n                forces[i, 0] += wall_repulsion * (radii[i] - x)\n            if x > 1 - radii[i]:\n                forces[i, 0] -= wall_repulsion * (x - (1 - radii[i]))\n            if y < radii[i]:\n                forces[i, 1] += wall_repulsion * (radii[i] - y)\n            if y > 1 - radii[i]:\n                forces[i, 1] -= wall_repulsion * (y - (1 - radii[i]))\n\n        # Update centers based on forces\n        centers += learning_rate * forces\n\n        # Adjust radii to maximize sum\n        for i in range(n):\n            # Increase radius if possible\n            potential_increase = radius_adjust_rate\n            new_radius = radii[i] + potential_increase\n\n            # Check for overlaps with other circles\n            overlap = False\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < new_radius + radii[j]:\n                        overlap = True\n                        break\n\n            # Check for boundary violations\n            if centers[i][0] - new_radius < 0 or centers[i][0] + new_radius > 1 or \\\n               centers[i][1] - new_radius < 0 or centers[i][1] + new_radius > 1:\n                overlap = True\n\n            if not overlap:\n                radii[i] = new_radius\n\n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0, 1)\n        radii = np.clip(radii, 0.001, 1)  # Ensure radii are positive and not too large\n\n        # Reduce learning rate over time\n        learning_rate *= 0.99\n        radius_adjust_rate *= 0.99\n\n    return centers, radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers, radii = initialize_pattern()\n\n    # Optimize the centers and radii using physics-based simulation\n    centers, radii = optimize_packing(centers, radii)\n\n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Start with a denser hexagonal packing in the center\n    num_hex_layers = 2  # Adjust for desired density\n    center_x, center_y = 0.5, 0.5\n    base_radius = 0.08  # Initial guess for circle radius\n    circle_index = 0\n\n    for layer in range(num_hex_layers):\n        num_circles = 6 * layer if layer > 0 else 1\n        layer_radius = (2 * layer / np.sqrt(3)) * base_radius # Distance from center of square to center of circle\n\n        if layer == 0:\n            centers[circle_index] = [center_x, center_y]\n            radii[circle_index] = base_radius\n            circle_index += 1\n        else:\n            for i in range(num_circles):\n                angle = 2 * np.pi * i / num_circles\n                x = center_x + layer_radius * np.cos(angle)\n                y = center_y + layer_radius * np.sin(angle)\n                centers[circle_index] = [x, y]\n                radii[circle_index] = base_radius\n                circle_index += 1\n\n    # Fill remaining circles randomly, but biased towards the edges\n    while circle_index < n:\n        # Bias the random position towards the edges\n        x = np.random.uniform(0, 1)\n        y = np.random.uniform(0, 1)\n\n        centers[circle_index] = [x, y]\n        radii[circle_index] = 0.05  # Smaller radius for remaining circles\n        circle_index += 1\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.02  # Increased repulsion\n    wall_repulsion = 0.01  # Increased wall repulsion\n    iterations = 300  # More iterations\n    learning_rate = 0.2  # Increased learning rate\n    radius_adjust_rate = 0.02  # Increased radius adjust rate\n    gravity_strength = 0.001 # Add gravity towards the center to prevent circles from drifting to edges\n\n    for iteration in range(iterations):\n        # Calculate repulsive forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n\n        # Calculate repulsive forces from walls\n        for i in range(n):\n            x, y = centers[i]\n            if x < radii[i]:\n                forces[i, 0] += wall_repulsion * (radii[i] - x)\n            if x > 1 - radii[i]:\n                forces[i, 0] -= wall_repulsion * (x - (1 - radii[i]))\n            if y < radii[i]:\n                forces[i, 1] += wall_repulsion * (radii[i] - y)\n            if y > 1 - radii[i]:\n                forces[i, 1] -= wall_repulsion * (y - (1 - radii[i]))\n\n            # Add gravity towards the center\n            direction_to_center = np.array([0.5, 0.5]) - centers[i]\n            forces[i] += gravity_strength * direction_to_center\n\n        # Update centers based on forces\n        centers += learning_rate * forces\n\n        # Adjust radii to maximize sum\n        for i in range(n):\n            # Increase radius if possible\n            potential_increase = radius_adjust_rate\n            new_radius = radii[i] + potential_increase\n\n            # Check for overlaps with other circles\n            overlap = False\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < new_radius + radii[j]:\n                        overlap = True\n                        break\n\n            # Check for boundary violations\n            if centers[i][0] - new_radius < 0 or centers[i][0] + new_radius > 1 or \\\n               centers[i][1] - new_radius < 0 or centers[i][1] + new_radius > 1:\n                overlap = True\n\n            if not overlap:\n                radii[i] = new_radius\n\n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0, 1)\n        radii = np.clip(radii, 0.001, 0.4)  # Ensure radii are positive and not too large, limit max radius\n\n        # Reduce learning rate over time\n        learning_rate *= 0.995 # Reduced learning rate decay\n        radius_adjust_rate *= 0.995 #Reduced radius adjust decay\n\n    return centers, radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}