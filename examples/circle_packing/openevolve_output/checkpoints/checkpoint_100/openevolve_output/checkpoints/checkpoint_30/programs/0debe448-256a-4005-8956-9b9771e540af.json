{"id": "0debe448-256a-4005-8956-9b9771e540af", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and gradient-based optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # 1. Initialize with a layered pattern, prioritizing the center\n    centers, radii = initialize_layered_pattern(n)\n\n    # 2. Refine radii using gradient descent-based optimization\n    centers, radii = optimize_radii_gradient(centers, radii)\n\n    # 3. Fine-tune positions using a physics-based simulation\n    centers = optimize_positions(centers, radii, iterations=100)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_layered_pattern(n):\n    \"\"\"\n    Initialize with a layered pattern, placing larger circles in the center\n    and smaller circles towards the edges.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Larger central circle\n\n    # First ring (6 circles)\n    r1 = 0.35\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.13  # Slightly smaller than central circle\n\n    # Second ring (12 circles)\n    r2 = 0.55\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.10\n\n    # Corner circles (4)\n    corner_offset = 0.12\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.08\n\n    # Edge circles (4)\n    edge_offset = 0.10\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.07\n    \n    return centers, radii\n\n\ndef optimize_radii_gradient(centers, radii):\n    \"\"\"\n    Optimizes radii using a gradient descent approach based on scipy.optimize.minimize.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        return -np.sum(x)\n\n    def constraint(i, j):\n        \"\"\"Constraint function: distance between circles i and j must be >= sum of radii.\"\"\"\n        return lambda x: np.sqrt(np.sum((centers[i] - centers[j])**2)) - (x[i] + x[j])\n\n    def wall_constraint(i, wall):\n        \"\"\"Constraint function: circle i must be inside the unit square (four walls).\"\"\"\n        if wall == 0:  # Left wall\n            return lambda x: centers[i, 0] - x[i]\n        elif wall == 1:  # Right wall\n            return lambda x: 1 - centers[i, 0] - x[i]\n        elif wall == 2:  # Bottom wall\n            return lambda x: centers[i, 1] - x[i]\n        else:  # Top wall\n            return lambda x: 1 - centers[i, 1] - x[i]\n    \n    # Define constraints\n    constraints = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            constraints.append({'type': 'ineq', 'fun': constraint(i, j)})\n        for wall in range(4):\n            constraints.append({'type': 'ineq', 'fun': wall_constraint(i, wall)})\n\n    # Bounds: radii must be non-negative\n    bounds = [(0.001, 0.5) for _ in range(n)]  # Ensure radii are not zero\n\n    # Initial guess\n    x0 = radii.copy()\n\n    # Optimize\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 250})\n\n    # Update radii with the optimized values\n    radii = result.x\n\n    return centers, radii\n\n\ndef optimize_positions(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions using a physics-based approach with repulsive forces.\n    \"\"\"\n    n = len(centers)\n    learning_rate = 0.01  # Increased learning rate for faster convergence\n\n    for _ in range(iterations):\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    min_dist = radii[i] + radii[j]\n\n                    if dist < min_dist:\n                        direction = diff / (dist + 1e-10)\n                        overlap = min_dist - dist\n                        forces[i] += direction * overlap * 20.0  # Increased force magnitude\n\n            # Wall repulsion forces\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += (r - x) * 20.0\n            if x > 1 - r:\n                forces[i, 0] -= (x - (1 - r)) * 20.0\n            if y < r:\n                forces[i, 1] += (r - y) * 20.0\n            if y > 1 - r:\n                forces[i, 1] -= (y - (1 - r)) * 20.0\n\n        centers += forces * learning_rate\n\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers\n\n\ndef ensure_no_overlaps(centers, radii):\n    \"\"\"\n    Ensure there are no overlaps between circles or with walls.\n    If overlaps exist, shrink radii slightly until resolved.\n    \"\"\"\n    n = len(centers)\n    max_iterations = 20\n    shrink_factor = 0.99\n\n    for _ in range(max_iterations):\n        overlaps = False\n\n        # Check circle-circle overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    overlaps = True\n                    # Shrink both circles proportionally\n                    ratio = dist / (radii[i] + radii[j] + 1e-10)\n                    radii[i] *= ratio * 0.99\n                    radii[j] *= ratio * 0.99\n\n        # Check wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                overlaps = True\n                # Move circle inside and shrink if necessary\n                centers[i, 0] = np.clip(x, r, 1 - r)\n                centers[i, 1] = np.clip(y, r, 1 - r)\n                radii[i] *= shrink_factor\n\n        if not overlaps:\n            break\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "129322f0-63d3-44ab-aa96-7d36620ef312", "generation": 4, "timestamp": 1750750884.640277, "iteration_found": 24, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.4123606019268293, "target_ratio": 0.9155068698014533, "combined_score": 0.9155068698014533, "eval_time": 5.3085057735443115}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4124\n- target_ratio: 0.9155\n- combined_score: 0.9155\n- eval_time: 5.3085\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 2 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters and a pre-defined grid.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 7.2615)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a carefully designed pattern\n    # This pattern is based on research into optimal circle packings\n    centers, radii = initialize_specialized_pattern(n)\n    \n    # First optimization phase: local adjustments with fixed radii\n    centers = optimize_positions(centers, radii, iterations=150)\n    \n    # Second optimization phase: grow radii while maintaining validity\n    centers, radii = optimize_radii(centers, radii, iterations=200)\n    \n    # Third optimization phase: fine-tuning with variable radii\n    centers, radii = fine_tune(centers, radii, iterations=150)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_specialized_pattern(n):\n    \"\"\"\n    Initialize with a specialized pattern designed for n=26 circles.\n    The pattern uses a combination of:\n    - A central larger circle\n    - Concentric rings with different-sized circles\n    - Strategic placement at corners and edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.16\n    \n    # First ring (6 circles)\n    r1 = 0.28\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.11\n    \n    # Second ring (12 circles)\n    r2 = 0.46\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.09\n    \n    # Corner circles (4)\n    corner_offset = 0.11\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.09\n    \n    # Edge circles (4)\n    edge_offset = 0.09\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.08\n    \n    return centers, radii\n\n\ndef optimize_positions(centers, radii, iterations=150):\n    \"\"\"\n    Optimize circle positions while keeping radii fixed.\n    Uses a physics-based approach with repulsive forces.\n    \"\"\"\n    n = len(centers)\n    learning_rate = 0.005\n    \n    for _ in range(iterations):\n        # Compute repulsive forces between circles\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    min_dist = radii[i] + radii[j]\n                    \n                    if dist < min_dist:\n                        # Normalize direction and scale by overlap\n                        direction = diff / (dist + 1e-10)\n                        overlap = min_dist - dist\n                        forces[i] += direction * overlap * 10.0\n            \n            # Add wall repulsion forces\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += (r - x) * 10.0\n            if x > 1 - r:\n                forces[i, 0] -= (x - (1 - r)) * 10.0\n            if y < r:\n                forces[i, 1] += (r - y) * 10.0\n            if y > 1 - r:\n                forces[i, 1] -= (y - (1 - r)) * 10.0\n        \n        # Update positions\n        centers += forces * learning_rate\n        \n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers\n\n\ndef optimize_radii(centers, radii, iterations=200):\n    \"\"\"\n    Optimize circle radii while adjusting positions to maintain validity.\n    Uses a growth-based approach with collision resolution.\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    position_adjustment_rate = 0.005\n    \n    for _ in range(iterations):\n        # Grow all radii by a small amount\n        radii += growth_rate\n        \n        # Check for collisions and resolve them\n        for _ in range(5):  # Multiple resolution passes per growth step\n            # Compute collisions\n            collisions = False\n            forces = np.zeros((n, 2))\n            \n            # Circle-circle collisions\n            for i in range(n):\n                for j in range(i+1, n):\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    min_dist = radii[i] + radii[j]\n                    \n                    if dist < min_dist:\n                        collisions = True\n                        # Calculate repulsive force\n                        direction = diff / (dist + 1e-10)\n                        overlap = min_dist - dist\n                        force = direction * overlap * 0.5\n                        forces[i] += force\n                        forces[j] -= force\n            \n            # Wall collisions\n            for i in range(n):\n                x, y = centers[i]\n                r = radii[i]\n                \n                if x < r:\n                    collisions = True\n                    forces[i, 0] += (r - x)\n                if x > 1 - r:\n                    collisions = True\n                    forces[i, 0] -= (x - (1 - r))\n                if y < r:\n                    collisions = True\n                    forces[i, 1] += (r - y)\n                if y > 1 - r:\n                    collisions = True\n                    forces[i, 1] -= (y - (1 - r))\n            \n            # If no collisions, we're done with this resolution pass\n            if not collisions:\n                break\n                \n            # Apply forces to resolve collisions\n            centers += forces * position_adjustment_rate\n            \n            # If we still have collisions after all passes, shrink the radii slightly\n            if collisions and _ == 4:\n                radii *= 0.995\n    \n    # Final adjustment to ensure no overlaps\n    centers, radii = ensure_no_overlaps(centers, radii)\n    \n    return centers, radii\n\n\ndef fine_tune(centers, radii, iterations=150):\n    \"\"\"\n    Fine-tune the packing by allowing individual radii to grow\n    based on available space, focusing on maximizing total sum.\n    \"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        # For each circle, try to grow it based on available space\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_circle = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    gap = dist - (radii[i] + radii[j])\n                    min_dist_to_circle = min(min_dist_to_circle, gap)\n            \n            # Calculate distance to walls\n            x, y = centers[i]\n            dist_to_walls = min(x - radii[i], y - radii[i], \n                               1 - x - radii[i], 1 - y - radii[i])\n            \n            # Grow radius by a fraction of available space\n            available_space = min(min_dist_to_circle, dist_to_walls)\n            if available_space > 0:\n                radii[i] += available_space * 0.3\n        \n        # Ensure no overlaps after growth\n        centers, radii = ensure_no_overlaps(centers, radii)\n        \n        # Small position adjustments to maximize space utilization\n        centers = optimize_positions(centers, radii, iterations=5)\n    \n    return centers, radii\n\n\ndef ensure_no_overlaps(centers, radii):\n    \"\"\"\n    Ensure there are no overlaps between circles or with walls.\n    If overlaps exist, shrink radii slightly until resolved.\n    \"\"\"\n    n = len(centers)\n    max_iterations = 20\n    shrink_factor = 0.99\n    \n    for _ in range(max_iterations):\n        overlaps = False\n        \n        # Check circle-circle overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    overlaps = True\n                    # Shrink both circles proportionally\n                    ratio = dist / (radii[i] + radii[j] + 1e-10)\n                    radii[i] *= ratio * 0.99\n                    radii[j] *= ratio * 0.99\n        \n        # Check wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                overlaps = True\n                # Move circle inside and shrink if necessary\n                centers[i, 0] = np.clip(x, r, 1 - r)\n                centers[i, 1] = np.clip(y, r, 1 - r)\n                radii[i] *= shrink_factor\n        \n        if not overlaps:\n            break\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and gradient-based optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # 1. Initialize with a layered pattern, prioritizing the center\n    centers, radii = initialize_layered_pattern(n)\n\n    # 2. Refine radii using gradient descent-based optimization\n    centers, radii = optimize_radii_gradient(centers, radii)\n\n    # 3. Fine-tune positions using a physics-based simulation\n    centers = optimize_positions(centers, radii, iterations=100)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_layered_pattern(n):\n    \"\"\"\n    Initialize with a layered pattern, placing larger circles in the center\n    and smaller circles towards the edges.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Larger central circle\n\n    # First ring (6 circles)\n    r1 = 0.35\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.13  # Slightly smaller than central circle\n\n    # Second ring (12 circles)\n    r2 = 0.55\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.10\n\n    # Corner circles (4)\n    corner_offset = 0.12\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.08\n\n    # Edge circles (4)\n    edge_offset = 0.10\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.07\n    \n    return centers, radii\n\n\ndef optimize_radii_gradient(centers, radii):\n    \"\"\"\n    Optimizes radii using a gradient descent approach based on scipy.optimize.minimize.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        return -np.sum(x)\n\n    def constraint(i, j):\n        \"\"\"Constraint function: distance between circles i and j must be >= sum of radii.\"\"\"\n        return lambda x: np.sqrt(np.sum((centers[i] - centers[j])**2)) - (x[i] + x[j])\n\n    def wall_constraint(i, wall):\n        \"\"\"Constraint function: circle i must be inside the unit square (four walls).\"\"\"\n        if wall == 0:  # Left wall\n            return lambda x: centers[i, 0] - x[i]\n        elif wall == 1:  # Right wall\n            return lambda x: 1 - centers[i, 0] - x[i]\n        elif wall == 2:  # Bottom wall\n            return lambda x: centers[i, 1] - x[i]\n        else:  # Top wall\n            return lambda x: 1 - centers[i, 1] - x[i]\n    \n    # Define constraints\n    constraints = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            constraints.append({'type': 'ineq', 'fun': constraint(i, j)})\n        for wall in range(4):\n            constraints.append({'type': 'ineq', 'fun': wall_constraint(i, wall)})\n\n    # Bounds: radii must be non-negative\n    bounds = [(0.001, 0.5) for _ in range(n)]  # Ensure radii are not zero\n\n    # Initial guess\n    x0 = radii.copy()\n\n    # Optimize\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 250})\n\n    # Update radii with the optimized values\n    radii = result.x\n\n    return centers, radii\n\n\ndef optimize_positions(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions using a physics-based approach with repulsive forces.\n    \"\"\"\n    n = len(centers)\n    learning_rate = 0.01  # Increased learning rate for faster convergence\n\n    for _ in range(iterations):\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    min_dist = radii[i] + radii[j]\n\n                    if dist < min_dist:\n                        direction = diff / (dist + 1e-10)\n                        overlap = min_dist - dist\n                        forces[i] += direction * overlap * 20.0  # Increased force magnitude\n\n            # Wall repulsion forces\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += (r - x) * 20.0\n            if x > 1 - r:\n                forces[i, 0] -= (x - (1 - r)) * 20.0\n            if y < r:\n                forces[i, 1] += (r - y) * 20.0\n            if y > 1 - r:\n                forces[i, 1] -= (y - (1 - r)) * 20.0\n\n        centers += forces * learning_rate\n\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers\n\n\ndef ensure_no_overlaps(centers, radii):\n    \"\"\"\n    Ensure there are no overlaps between circles or with walls.\n    If overlaps exist, shrink radii slightly until resolved.\n    \"\"\"\n    n = len(centers)\n    max_iterations = 20\n    shrink_factor = 0.99\n\n    for _ in range(max_iterations):\n        overlaps = False\n\n        # Check circle-circle overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    overlaps = True\n                    # Shrink both circles proportionally\n                    ratio = dist / (radii[i] + radii[j] + 1e-10)\n                    radii[i] *= ratio * 0.99\n                    radii[j] *= ratio * 0.99\n\n        # Check wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                overlaps = True\n                # Move circle inside and shrink if necessary\n                centers[i, 0] = np.clip(x, r, 1 - r)\n                centers[i, 1] = np.clip(y, r, 1 - r)\n                radii[i] *= shrink_factor\n\n        if not overlaps:\n            break\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}