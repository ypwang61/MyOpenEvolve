{"id": "07596eec-a1ea-4b87-8c39-7ef1df2da3c3", "code": "# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a deterministic pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers = initialize_pattern()\n    \n    # Optimize the centers\n    centers = optimize_centers(centers)\n    \n    # Calculate the maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \n    The pattern places circles in a hybrid arrangement with:\n    - Larger circles in the center\n    - Medium circles in a surrounding pattern\n    - Smaller circles in the corners and edges\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Place a central circle\n    centers[0] = [0.5, 0.5]\n    \n    # Place 6 circles in a hexagonal pattern around the center\n    hex_radius = 0.2\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [\n            0.5 + hex_radius * np.cos(angle),\n            0.5 + hex_radius * np.sin(angle)\n        ]\n    \n    # Place 12 circles in an outer ring\n    outer_radius = 0.38\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[i+7] = [\n            0.5 + outer_radius * np.cos(angle),\n            0.5 + outer_radius * np.sin(angle)\n        ]\n    \n    # Place 4 circles in the corners\n    corners = [[0.08, 0.08], [0.08, 0.92], [0.92, 0.08], [0.92, 0.92]]\n    for i in range(4):\n        centers[i+19] = corners[i]\n    \n    # Place 3 additional circles along edges\n    centers[23] = [0.5, 0.08]\n    centers[24] = [0.08, 0.5]\n    centers[25] = [0.92, 0.5]\n    \n    return centers\n\ndef optimize_centers(centers):\n    \"\"\"\n    Optimize circle positions to maximize the sum of radii.\n    Uses a fast gradient ascent approach.\n    \"\"\"\n    n = centers.shape[0]\n    learning_rate = 0.001\n    iterations = 50\n    \n    for iteration in range(iterations):\n        # Calculate current radii\n        radii = compute_max_radii(centers)\n        \n        # Calculate gradient for each center\n        gradients = np.zeros_like(centers)\n        for i in range(n):\n            for dim in range(2):\n                # Estimate gradient by small perturbation\n                delta = 0.0001\n                perturbed = centers.copy()\n                perturbed[i, dim] += delta\n                \n                # Calculate new radii\n                new_radii = compute_max_radii(perturbed)\n                \n                # Gradient is the change in sum of radii\n                gradient = (np.sum(new_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n        \n        # Update centers using gradient\n        centers += learning_rate * gradients\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Reduce learning rate over time\n        learning_rate *= 0.98\n    \n    return centers\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \n    Uses a fast algorithm with distance calculations.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Then, limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance between centers\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                \n                # Maximum radius that doesn't cause overlap with circle j\n                # (assuming circle j has its maximum radius)\n                max_radius = max(0.0, dist - radii[j])\n                \n                # Update radius if needed\n                radii[i] = min(radii[i], max_radius)\n    \n    # One more iteration to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    # Adjust both radii proportionally\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "2fc5e7cc-0cf7-44e4-9669-27ddc161cb6f", "generation": 3, "timestamp": 1750750075.677187, "iteration_found": 6, "metrics": {"validity": 1.0, "sum_radii": 1.812519644232614, "target_ratio": 0.6878632425930225, "combined_score": 0.6878632425930225, "eval_time": 16.305259227752686}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - stage1_passed: 0.0000\n- error: 0.0000\n- timeout: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n## Last Execution Output\n\n### timeout\n```\nTrue\n```\n\n### timeout_duration\n```\n90\n```\n\n### failure_stage\n```\nstage1\n```\n\n### error_type\n```\ntimeout\n```\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.1289, target_ratio: 0.8079, combined_score: 0.8079, eval_time: 0.5716\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 0.0000, sum_radii: 0.0000, target_ratio: 0.0000, combined_score: 0.0000, eval_time: 5.3659\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9864, target_ratio: 0.7539, combined_score: 0.7539, eval_time: 1.0966\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1289), Performs well on target_ratio (0.8079), Performs well on combined_score (0.8079), Performs well on eval_time (0.5716)\n\n\n### Program 2 (Score: 1.1182)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.9864), Performs well on target_ratio (0.7539), Performs well on combined_score (0.7539), Performs well on eval_time (1.0966)\n\n\n### Program 3 (Score: 1.0732)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using deterministic construction and fast optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000), Performs well on eval_time (5.3659)\n\n\n### Program 4 (Score: 0.9957)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent and adaptive radii\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.4260), Performs well on target_ratio (0.5412), Performs well on combined_score (0.5412), Performs well on eval_time (1.4701)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a known good pattern\n    centers, radii = initialize_advanced_pattern()\n    \n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_advanced_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Start with a somewhat random, but relatively spaced out configuration\n    for i in range(n):\n        centers[i] = [np.random.uniform(0.1, 0.9), np.random.uniform(0.1, 0.9)]\n        radii[i] = 0.05  # Initial radius\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based repulsion and attraction\n    repulsion_strength = 0.005\n    attraction_strength = 0.0001\n    border_repulsion = 0.002\n    num_iterations = 200\n\n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < (radii[i] + radii[j]):\n                        direction = (centers[i] - centers[j]) / dist\n                        forces[i] += repulsion_strength * direction / (dist + 0.001)\n\n        # Circle-center attraction (to keep them somewhat centered)\n        for i in range(n):\n            direction = (0.5, 0.5) - centers[i]\n            forces[i] += attraction_strength * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] += border_repulsion / (x + 0.001)**2 - border_repulsion / ((1 - x) + 0.001)**2\n            forces[i, 1] += border_repulsion / (y + 0.001)**2 - border_repulsion / ((1 - y) + 0.001)**2\n\n        # Update positions\n        centers += forces\n        centers = np.clip(centers, 0.001, 0.999)  # Stay within bounds\n\n        # Adjust radii - ensure no overlaps\n        radii = compute_max_radii(centers)\n        \n    # Stage 2: Gradient Ascent (fine tuning)\n    learning_rate = 0.0005\n    num_gradient_iterations = 100\n\n    for _ in range(num_gradient_iterations):\n        radii = compute_max_radii(centers)\n        gradients = np.zeros_like(centers)\n\n        for i in range(n):\n            for dim in range(2):\n                delta = 0.0001\n                perturbed_centers = centers.copy()\n                perturbed_centers[i, dim] += delta\n                perturbed_radii = compute_max_radii(perturbed_centers)\n                gradient = (np.sum(perturbed_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n\n        centers += learning_rate * gradients\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(20):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]) / 2.0) # Divide by 2 to distribute the space\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll create a more efficient circle packing algorithm that targets the 2.635 benchmark. The current program is timing out, so I'll focus on a more deterministic approach with a carefully designed pattern and efficient optimization.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a deterministic pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers = initialize_pattern()\n    \n    # Optimize the centers\n    centers = optimize_centers(centers)\n    \n    # Calculate the maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \n    The pattern places circles in a hybrid arrangement with:\n    - Larger circles in the center\n    - Medium circles in a surrounding pattern\n    - Smaller circles in the corners and edges\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Place a central circle\n    centers[0] = [0.5, 0.5]\n    \n    # Place 6 circles in a hexagonal pattern around the center\n    hex_radius = 0.2\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [\n            0.5 + hex_radius * np.cos(angle),\n            0.5 + hex_radius * np.sin(angle)\n        ]\n    \n    # Place 12 circles in an outer ring\n    outer_radius = 0.38\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[i+7] = [\n            0.5 + outer_radius * np.cos(angle),\n            0.5 + outer_radius * np.sin(angle)\n        ]\n    \n    # Place 4 circles in the corners\n    corners = [[0.08, 0.08], [0.08, 0.92], [0.92, 0.08], [0.92, 0.92]]\n    for i in range(4):\n        centers[i+19] = corners[i]\n    \n    # Place 3 additional circles along edges\n    centers[23] = [0.5, 0.08]\n    centers[24] = [0.08, 0.5]\n    centers[25] = [0.92, 0.5]\n    \n    return centers\n\ndef optimize_centers(centers):\n    \"\"\"\n    Optimize circle positions to maximize the sum of radii.\n    Uses a fast gradient ascent approach.\n    \"\"\"\n    n = centers.shape[0]\n    learning_rate = 0.001\n    iterations = 50\n    \n    for iteration in range(iterations):\n        # Calculate current radii\n        radii = compute_max_radii(centers)\n        \n        # Calculate gradient for each center\n        gradients = np.zeros_like(centers)\n        for i in range(n):\n            for dim in range(2):\n                # Estimate gradient by small perturbation\n                delta = 0.0001\n                perturbed = centers.copy()\n                perturbed[i, dim] += delta\n                \n                # Calculate new radii\n                new_radii = compute_max_radii(perturbed)\n                \n                # Gradient is the change in sum of radii\n                gradient = (np.sum(new_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n        \n        # Update centers using gradient\n        centers += learning_rate * gradients\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Reduce learning rate over time\n        learning_rate *= 0.98\n    \n    return centers\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \n    Uses a fast algorithm with distance calculations.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Then, limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance between centers\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                \n                # Maximum radius that doesn't cause overlap with circle j\n                # (assuming circle j has its maximum radius)\n                max_radius = max(0.0, dist - radii[j])\n                \n                # Update radius if needed\n                radii[i] = min(radii[i], max_radius)\n    \n    # One more iteration to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    # Adjust both radii proportionally\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}