{"id": "e382faf0-9dcf-4134-9af1-22abcf3c92ff", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Create initial configuration with variable-sized circles\n    centers, radii = initialize_variable_size_pattern()\n    \n    # Multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final refinement with local adjustments\n    centers, radii = final_refinement(centers, radii)\n    \n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_variable_size_pattern():\n    \"\"\"\n    Initialize with a specialized pattern for n=26 with variable-sized circles.\n    Uses a hybrid approach with larger circles in center and smaller at edges.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Pattern based on mathematical research for n=26\n    # Place a large central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15  # Initial estimate, will be optimized\n    \n    # Place 5 large circles in inner ring\n    inner_radius = 0.25\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        centers[i+1] = [\n            0.5 + inner_radius * np.cos(angle),\n            0.5 + inner_radius * np.sin(angle)\n        ]\n        radii[i+1] = 0.12  # Initial estimate\n    \n    # Place 10 medium circles in middle ring\n    middle_radius = 0.38\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        centers[i+6] = [\n            0.5 + middle_radius * np.cos(angle),\n            0.5 + middle_radius * np.sin(angle)\n        ]\n        radii[i+6] = 0.09  # Initial estimate\n    \n    # Place 8 smaller circles in outer positions\n    outer_positions = [\n        [0.15, 0.15], [0.15, 0.85], [0.85, 0.15], [0.85, 0.85],  # Corners\n        [0.15, 0.5], [0.5, 0.15], [0.85, 0.5], [0.5, 0.85]       # Edge midpoints\n    ]\n    for i in range(8):\n        centers[i+16] = outer_positions[i]\n        radii[i+16] = 0.07  # Initial estimate\n    \n    # Place 3 tiny circles in remaining spaces\n    centers[24] = [0.25, 0.75]\n    centers[25] = [0.75, 0.25]\n    centers[16] = [0.65, 0.65]  # Replace one of the previous positions\n    radii[24:26] = 0.05  # Initial estimate\n    radii[16] = 0.05\n    \n    # Compute actual valid radii based on this configuration\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization of circle positions and sizes.\n    Uses a combination of physical simulation and gradient-based optimization.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Stage 1: Repulsion forces to spread circles\n    centers, radii = repulsion_optimization(centers, radii, iterations=100)\n    \n    # Stage 2: Gradient-based optimization\n    centers, radii = gradient_optimization(centers, radii, iterations=200)\n    \n    # Stage 3: Simulated annealing for global optimization\n    centers, radii = simulated_annealing(centers, radii, iterations=150)\n    \n    return centers, radii\n\ndef repulsion_optimization(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions using repulsion forces.\n    Circles push each other away while trying to maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    force_scale = 0.01\n    damping = 0.7\n    \n    for iter in range(iterations):\n        # Calculate repulsion forces\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    # Vector from j to i\n                    diff = centers[i] - centers[j]\n                    dist = np.linalg.norm(diff)\n                    \n                    # Skip if too far apart\n                    if dist > radii[i] + radii[j] + 0.1:\n                        continue\n                    \n                    # Normalized direction\n                    if dist < 1e-10:\n                        # Add random direction if centers are too close\n                        direction = np.random.rand(2) - 0.5\n                        direction = direction / np.linalg.norm(direction)\n                    else:\n                        direction = diff / dist\n                    \n                    # Force inversely proportional to distance\n                    force_magnitude = force_scale / (dist + 1e-10)\n                    forces[i] += direction * force_magnitude\n        \n        # Apply forces to update positions\n        centers += forces * (1.0 - iter/iterations)\n        \n        # Boundary forces - push circles away from boundaries\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left boundary\n            if x < r:\n                centers[i, 0] += force_scale * (r - x)\n            # Right boundary\n            if x > 1 - r:\n                centers[i, 0] -= force_scale * (x + r - 1)\n            # Bottom boundary\n            if y < r:\n                centers[i, 1] += force_scale * (r - y)\n            # Top boundary\n            if y > 1 - r:\n                centers[i, 1] -= force_scale * (y + r - 1)\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recalculate radii\n        radii = compute_max_radii(centers)\n        \n        # Reduce force scale over time\n        force_scale *= damping\n    \n    return centers, radii\n\ndef gradient_optimization(centers, radii, iterations=200):\n    \"\"\"\n    Optimize circle positions using gradient ascent to maximize sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    learning_rate = 0.002\n    \n    for iter in range(iterations):\n        # Calculate current sum of radii\n        current_sum = np.sum(radii)\n        \n        # Calculate gradient for each center\n        gradients = np.zeros_like(centers)\n        for i in range(n):\n            for dim in range(2):\n                # Estimate gradient by small perturbation\n                delta = 0.0001\n                perturbed = centers.copy()\n                perturbed[i, dim] += delta\n                \n                # Calculate new radii\n                new_radii = compute_max_radii(perturbed)\n                \n                # Gradient is the change in sum of radii\n                gradient = (np.sum(new_radii) - current_sum) / delta\n                gradients[i, dim] = gradient\n        \n        # Update centers using gradient\n        centers += learning_rate * gradients\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recalculate radii\n        radii = compute_max_radii(centers)\n        \n        # Adaptive learning rate\n        if iter % 20 == 0:\n            learning_rate *= 0.9\n    \n    return centers, radii\n\ndef simulated_annealing(centers, radii, iterations=150):\n    \"\"\"\n    Global optimization using simulated annealing to avoid local maxima.\n    \"\"\"\n    n = centers.shape[0]\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01\n    cooling_rate = 0.98\n    \n    for iter in range(iterations):\n        # Select a random circle\n        i = np.random.randint(0, n)\n        \n        # Create a perturbed configuration\n        perturbed_centers = centers.copy()\n        \n        # Random perturbation proportional to temperature\n        perturbation = (np.random.rand(2) - 0.5) * temperature * 0.1\n        perturbed_centers[i] += perturbation\n        \n        # Ensure within bounds\n        perturbed_centers[i] = np.clip(perturbed_centers[i], 0.001, 0.999)\n        \n        # Calculate new radii\n        perturbed_radii = compute_max_radii(perturbed_centers)\n        perturbed_sum = np.sum(perturbed_radii)\n        \n        # Accept or reject based on improvement and temperature\n        delta = perturbed_sum - np.sum(radii)\n        if delta > 0 or np.random.rand() < np.exp(delta / temperature):\n            centers = perturbed_centers\n            radii = perturbed_radii\n            \n            # Update best if improved\n            if perturbed_sum > best_sum:\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n                best_sum = perturbed_sum\n        \n        # Cool down\n        temperature *= cooling_rate\n    \n    return best_centers, best_radii\n\ndef final_refinement(centers, radii, iterations=50):\n    \"\"\"\n    Final refinement stage focusing on local adjustments to maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Identify critical pairs - circles that are limiting each other\n    for iter in range(iterations):\n        # Find limiting relationships\n        limiting_pairs = []\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if abs(dist - (radii[i] + radii[j])) < 1e-5:\n                    limiting_pairs.append((i, j))\n        \n        # No more limiting pairs to adjust\n        if not limiting_pairs:\n            break\n        \n        # Select a random limiting pair\n        i, j = limiting_pairs[np.random.randint(0, len(limiting_pairs))]\n        \n        # Try to adjust positions to increase sum of radii\n        original_sum = radii[i] + radii[j]\n        \n        # Calculate direction from j to i\n        direction = centers[i] - centers[j]\n        dist = np.linalg.norm(direction)\n        if dist > 1e-10:\n            direction = direction / dist\n        \n        # Try small adjustments in different directions\n        best_improvement = 0\n        best_adjustment = None\n        \n        for angle in np.linspace(0, 2*np.pi, 8):\n            # Rotation matrix\n            rotation = np.array([\n                [np.cos(angle), -np.sin(angle)],\n                [np.sin(angle), np.cos(angle)]\n            ])\n            \n            # Rotated direction\n            adjusted_direction = rotation.dot(direction)\n            \n            # Try moving both circles slightly\n            test_centers = centers.copy()\n            test_centers[i] += adjusted_direction * 0.005\n            test_centers[j] -= adjusted_direction * 0.005\n            \n            # Ensure within bounds\n            test_centers = np.clip(test_centers, 0.001, 0.999)\n            \n            # Calculate new radii\n            test_radii = compute_max_radii(test_centers)\n            new_sum = test_radii[i] + test_radii[j]\n            \n            # Check if overall sum improved\n            if np.sum(test_radii) > np.sum(radii) and new_sum > original_sum:\n                improvement = np.sum(test_radii) - np.sum(radii)\n                if improvement > best_improvement:\n                    best_improvement = improvement\n                    best_adjustment = (test_centers, test_radii)\n        \n        # Apply the best adjustment if found\n        if best_adjustment is not None:\n            centers, radii = best_adjustment\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n    \n    # Limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance between centers\n                dist = np.linalg.norm(centers[i] - centers[j])\n                \n                # Maximum radius that doesn't cause overlap with circle j\n                max_radius = dist / 2\n                \n                # Update radius if needed\n                if radii[i] + radii[j] > dist:\n                    # Proportionally adjust both radii\n                    if radii[i] <= radii[j]:\n                        radii[i] = min(radii[i], max_radius)\n                    else:\n                        radii[i] = min(radii[i], dist - radii[j])\n    \n    # Iterative refinement to ensure no overlaps\n    for _ in range(3):\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii[i] + radii[j]:\n                    # Scale both radii to fit\n                    scale = dist / (radii[i] + radii[j])\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "07596eec-a1ea-4b87-8c39-7ef1df2da3c3", "generation": 4, "timestamp": 1750750660.9059713, "iteration_found": 17, "metrics": {"validity": 1.0, "sum_radii": 2.3616655636206145, "target_ratio": 0.8962677660799296, "combined_score": 0.8962677660799296, "eval_time": 50.724653005599976}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.812519644232614, "target_ratio": 0.6878632425930225, "combined_score": 0.6878632425930225, "eval_time": 16.305259227752686}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.8125\n- target_ratio: 0.6879\n- combined_score: 0.6879\n- eval_time: 16.3053\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4124, target_ratio: 0.9155, combined_score: 0.9155, eval_time: 5.3085\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 7.2615)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0707), Performs well on target_ratio (0.7858), Performs well on combined_score (0.7858), Performs well on eval_time (31.6651)\n\n\n### Program 3 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n### Program 4 (Score: 1.1182)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.9864), Performs well on target_ratio (0.7539), Performs well on combined_score (0.7539), Performs well on eval_time (1.0966)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a deterministic pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers = initialize_pattern()\n    \n    # Optimize the centers\n    centers = optimize_centers(centers)\n    \n    # Calculate the maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \n    The pattern places circles in a hybrid arrangement with:\n    - Larger circles in the center\n    - Medium circles in a surrounding pattern\n    - Smaller circles in the corners and edges\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Place a central circle\n    centers[0] = [0.5, 0.5]\n    \n    # Place 6 circles in a hexagonal pattern around the center\n    hex_radius = 0.2\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [\n            0.5 + hex_radius * np.cos(angle),\n            0.5 + hex_radius * np.sin(angle)\n        ]\n    \n    # Place 12 circles in an outer ring\n    outer_radius = 0.38\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[i+7] = [\n            0.5 + outer_radius * np.cos(angle),\n            0.5 + outer_radius * np.sin(angle)\n        ]\n    \n    # Place 4 circles in the corners\n    corners = [[0.08, 0.08], [0.08, 0.92], [0.92, 0.08], [0.92, 0.92]]\n    for i in range(4):\n        centers[i+19] = corners[i]\n    \n    # Place 3 additional circles along edges\n    centers[23] = [0.5, 0.08]\n    centers[24] = [0.08, 0.5]\n    centers[25] = [0.92, 0.5]\n    \n    return centers\n\ndef optimize_centers(centers):\n    \"\"\"\n    Optimize circle positions to maximize the sum of radii.\n    Uses a fast gradient ascent approach.\n    \"\"\"\n    n = centers.shape[0]\n    learning_rate = 0.001\n    iterations = 50\n    \n    for iteration in range(iterations):\n        # Calculate current radii\n        radii = compute_max_radii(centers)\n        \n        # Calculate gradient for each center\n        gradients = np.zeros_like(centers)\n        for i in range(n):\n            for dim in range(2):\n                # Estimate gradient by small perturbation\n                delta = 0.0001\n                perturbed = centers.copy()\n                perturbed[i, dim] += delta\n                \n                # Calculate new radii\n                new_radii = compute_max_radii(perturbed)\n                \n                # Gradient is the change in sum of radii\n                gradient = (np.sum(new_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n        \n        # Update centers using gradient\n        centers += learning_rate * gradients\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Reduce learning rate over time\n        learning_rate *= 0.98\n    \n    return centers\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \n    Uses a fast algorithm with distance calculations.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Then, limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance between centers\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                \n                # Maximum radius that doesn't cause overlap with circle j\n                # (assuming circle j has its maximum radius)\n                max_radius = max(0.0, dist - radii[j])\n                \n                # Update radius if needed\n                radii[i] = min(radii[i], max_radius)\n    \n    # One more iteration to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    # Adjust both radii proportionally\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll rewrite the program to significantly improve its performance, focusing on reaching the target sum of radii of 2.635 for packing 26 circles in a unit square.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Create initial configuration with variable-sized circles\n    centers, radii = initialize_variable_size_pattern()\n    \n    # Multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final refinement with local adjustments\n    centers, radii = final_refinement(centers, radii)\n    \n    # Return results\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_variable_size_pattern():\n    \"\"\"\n    Initialize with a specialized pattern for n=26 with variable-sized circles.\n    Uses a hybrid approach with larger circles in center and smaller at edges.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Pattern based on mathematical research for n=26\n    # Place a large central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15  # Initial estimate, will be optimized\n    \n    # Place 5 large circles in inner ring\n    inner_radius = 0.25\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        centers[i+1] = [\n            0.5 + inner_radius * np.cos(angle),\n            0.5 + inner_radius * np.sin(angle)\n        ]\n        radii[i+1] = 0.12  # Initial estimate\n    \n    # Place 10 medium circles in middle ring\n    middle_radius = 0.38\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        centers[i+6] = [\n            0.5 + middle_radius * np.cos(angle),\n            0.5 + middle_radius * np.sin(angle)\n        ]\n        radii[i+6] = 0.09  # Initial estimate\n    \n    # Place 8 smaller circles in outer positions\n    outer_positions = [\n        [0.15, 0.15], [0.15, 0.85], [0.85, 0.15], [0.85, 0.85],  # Corners\n        [0.15, 0.5], [0.5, 0.15], [0.85, 0.5], [0.5, 0.85]       # Edge midpoints\n    ]\n    for i in range(8):\n        centers[i+16] = outer_positions[i]\n        radii[i+16] = 0.07  # Initial estimate\n    \n    # Place 3 tiny circles in remaining spaces\n    centers[24] = [0.25, 0.75]\n    centers[25] = [0.75, 0.25]\n    centers[16] = [0.65, 0.65]  # Replace one of the previous positions\n    radii[24:26] = 0.05  # Initial estimate\n    radii[16] = 0.05\n    \n    # Compute actual valid radii based on this configuration\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization of circle positions and sizes.\n    Uses a combination of physical simulation and gradient-based optimization.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Stage 1: Repulsion forces to spread circles\n    centers, radii = repulsion_optimization(centers, radii, iterations=100)\n    \n    # Stage 2: Gradient-based optimization\n    centers, radii = gradient_optimization(centers, radii, iterations=200)\n    \n    # Stage 3: Simulated annealing for global optimization\n    centers, radii = simulated_annealing(centers, radii, iterations=150)\n    \n    return centers, radii\n\ndef repulsion_optimization(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions using repulsion forces.\n    Circles push each other away while trying to maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    force_scale = 0.01\n    damping = 0.7\n    \n    for iter in range(iterations):\n        # Calculate repulsion forces\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    # Vector from j to i\n                    diff = centers[i] - centers[j]\n                    dist = np.linalg.norm(diff)\n                    \n                    # Skip if too far apart\n                    if dist > radii[i] + radii[j] + 0.1:\n                        continue\n                    \n                    # Normalized direction\n                    if dist < 1e-10:\n                        # Add random direction if centers are too close\n                        direction = np.random.rand(2) - 0.5\n                        direction = direction / np.linalg.norm(direction)\n                    else:\n                        direction = diff / dist\n                    \n                    # Force inversely proportional to distance\n                    force_magnitude = force_scale / (dist + 1e-10)\n                    forces[i] += direction * force_magnitude\n        \n        # Apply forces to update positions\n        centers += forces * (1.0 - iter/iterations)\n        \n        # Boundary forces - push circles away from boundaries\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left boundary\n            if x < r:\n                centers[i, 0] += force_scale * (r - x)\n            # Right boundary\n            if x > 1 - r:\n                centers[i, 0] -= force_scale * (x + r - 1)\n            # Bottom boundary\n            if y < r:\n                centers[i, 1] += force_scale * (r - y)\n            # Top boundary\n            if y > 1 - r:\n                centers[i, 1] -= force_scale * (y + r - 1)\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recalculate radii\n        radii = compute_max_radii(centers)\n        \n        # Reduce force scale over time\n        force_scale *= damping\n    \n    return centers, radii\n\ndef gradient_optimization(centers, radii, iterations=200):\n    \"\"\"\n    Optimize circle positions using gradient ascent to maximize sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    learning_rate = 0.002\n    \n    for iter in range(iterations):\n        # Calculate current sum of radii\n        current_sum = np.sum(radii)\n        \n        # Calculate gradient for each center\n        gradients = np.zeros_like(centers)\n        for i in range(n):\n            for dim in range(2):\n                # Estimate gradient by small perturbation\n                delta = 0.0001\n                perturbed = centers.copy()\n                perturbed[i, dim] += delta\n                \n                # Calculate new radii\n                new_radii = compute_max_radii(perturbed)\n                \n                # Gradient is the change in sum of radii\n                gradient = (np.sum(new_radii) - current_sum) / delta\n                gradients[i, dim] = gradient\n        \n        # Update centers using gradient\n        centers += learning_rate * gradients\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recalculate radii\n        radii = compute_max_radii(centers)\n        \n        # Adaptive learning rate\n        if iter % 20 == 0:\n            learning_rate *= 0.9\n    \n    return centers, radii\n\ndef simulated_annealing(centers, radii, iterations=150):\n    \"\"\"\n    Global optimization using simulated annealing to avoid local maxima.\n    \"\"\"\n    n = centers.shape[0]\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01\n    cooling_rate = 0.98\n    \n    for iter in range(iterations):\n        # Select a random circle\n        i = np.random.randint(0, n)\n        \n        # Create a perturbed configuration\n        perturbed_centers = centers.copy()\n        \n        # Random perturbation proportional to temperature\n        perturbation = (np.random.rand(2) - 0.5) * temperature * 0.1\n        perturbed_centers[i] += perturbation\n        \n        # Ensure within bounds\n        perturbed_centers[i] = np.clip(perturbed_centers[i], 0.001, 0.999)\n        \n        # Calculate new radii\n        perturbed_radii = compute_max_radii(perturbed_centers)\n        perturbed_sum = np.sum(perturbed_radii)\n        \n        # Accept or reject based on improvement and temperature\n        delta = perturbed_sum - np.sum(radii)\n        if delta > 0 or np.random.rand() < np.exp(delta / temperature):\n            centers = perturbed_centers\n            radii = perturbed_radii\n            \n            # Update best if improved\n            if perturbed_sum > best_sum:\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n                best_sum = perturbed_sum\n        \n        # Cool down\n        temperature *= cooling_rate\n    \n    return best_centers, best_radii\n\ndef final_refinement(centers, radii, iterations=50):\n    \"\"\"\n    Final refinement stage focusing on local adjustments to maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Identify critical pairs - circles that are limiting each other\n    for iter in range(iterations):\n        # Find limiting relationships\n        limiting_pairs = []\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if abs(dist - (radii[i] + radii[j])) < 1e-5:\n                    limiting_pairs.append((i, j))\n        \n        # No more limiting pairs to adjust\n        if not limiting_pairs:\n            break\n        \n        # Select a random limiting pair\n        i, j = limiting_pairs[np.random.randint(0, len(limiting_pairs))]\n        \n        # Try to adjust positions to increase sum of radii\n        original_sum = radii[i] + radii[j]\n        \n        # Calculate direction from j to i\n        direction = centers[i] - centers[j]\n        dist = np.linalg.norm(direction)\n        if dist > 1e-10:\n            direction = direction / dist\n        \n        # Try small adjustments in different directions\n        best_improvement = 0\n        best_adjustment = None\n        \n        for angle in np.linspace(0, 2*np.pi, 8):\n            # Rotation matrix\n            rotation = np.array([\n                [np.cos(angle), -np.sin(angle)],\n                [np.sin(angle), np.cos(angle)]\n            ])\n            \n            # Rotated direction\n            adjusted_direction = rotation.dot(direction)\n            \n            # Try moving both circles slightly\n            test_centers = centers.copy()\n            test_centers[i] += adjusted_direction * 0.005\n            test_centers[j] -= adjusted_direction * 0.005\n            \n            # Ensure within bounds\n            test_centers = np.clip(test_centers, 0.001, 0.999)\n            \n            # Calculate new radii\n            test_radii = compute_max_radii(test_centers)\n            new_sum = test_radii[i] + test_radii[j]\n            \n            # Check if overall sum improved\n            if np.sum(test_radii) > np.sum(radii) and new_sum > original_sum:\n                improvement = np.sum(test_radii) - np.sum(radii)\n                if improvement > best_improvement:\n                    best_improvement = improvement\n                    best_adjustment = (test_centers, test_radii)\n        \n        # Apply the best adjustment if found\n        if best_adjustment is not None:\n            centers, radii = best_adjustment\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n    \n    # Limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance between centers\n                dist = np.linalg.norm(centers[i] - centers[j])\n                \n                # Maximum radius that doesn't cause overlap with circle j\n                max_radius = dist / 2\n                \n                # Update radius if needed\n                if radii[i] + radii[j] > dist:\n                    # Proportionally adjust both radii\n                    if radii[i] <= radii[j]:\n                        radii[i] = min(radii[i], max_radius)\n                    else:\n                        radii[i] = min(radii[i], dist - radii[j])\n    \n    # Iterative refinement to ensure no overlaps\n    for _ in range(3):\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii[i] + radii[j]:\n                    # Scale both radii to fit\n                    scale = dist / (radii[i] + radii[j])\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\nThis rewritten program implements several advanced techniques to significantly improve the circle packing:\n\n1. **Variable-sized circles initialization**: The program starts with a specialized pattern that allows for different sized circles, with larger ones in the center and smaller ones at the edges and corners.\n\n2. **Multi-stage optimization**: \n   - Repulsion forces to spread circles optimally\n   - Gradient-based optimization to maximize sum of radii\n   - Simulated annealing to escape local maxima\n   - Final refinement stage for local adjustments\n\n3. **Advanced physics simulation**: The repulsion optimization simulates physical forces between circles, allowing them to naturally find optimal positions.\n\n4. **Adaptive learning rates**: The optimization parameters adjust throughout the process to balance exploration and exploitation.\n\n5. **Critical pair analysis**: The final refinement stage identifies and adjusts pairs of circles that are limiting each other.\n\n6. **Improved radius calculation**: The algorithm uses a more sophisticated approach to calculate and adjust radii to prevent overlaps.\n\nThe approach is designed to reach much closer to the target of 2.635 by exploring the configuration space more thoroughly and using mathematical insights about optimal circle packing patterns."]}}}