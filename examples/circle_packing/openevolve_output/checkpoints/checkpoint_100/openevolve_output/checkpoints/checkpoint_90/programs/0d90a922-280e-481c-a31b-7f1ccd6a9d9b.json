{"id": "0d90a922-280e-481c-a31b-7f1ccd6a9d9b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization, physics, and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize with a hybrid pattern that combines hexagonal and corner/edge placements.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place larger circles at the corners and center\n    centers[0] = [0.1, 0.1]  # Bottom-left corner\n    centers[1] = [0.9, 0.1]  # Bottom-right corner\n    centers[2] = [0.1, 0.9]  # Top-left corner\n    centers[3] = [0.9, 0.9]  # Top-right corner\n    centers[4] = [0.5, 0.5]  # Center\n\n    # Hexagonal grid for remaining circles\n    remaining_circles = n - 5\n    grid_size = 4  # Adjusted grid size\n\n    count = 5\n    spacing = 0.2  # Adjusted spacing\n    offset_x = 0.3\n    offset_y = 0.3\n\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = offset_x + j * spacing + (i % 2) * (spacing / 2)\n                y = offset_y + i * spacing\n                centers[count] = [x, y]\n                count += 1\n\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii using a physics-based approach.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Physics-based simulation parameters\n    repulsion_strength = 0.001\n    border_repulsion = 0.001\n    damping = 0.9\n    dt = 0.05  # Reduced time step for stability\n    gravity = 0.0001 # Introduce a weak gravity-like force towards the center\n\n    velocities = np.zeros_like(centers)\n\n    for iteration in range(750):  # Increased iterations for better settling\n        forces = np.zeros_like(centers)\n\n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist_vec = centers[i] - centers[j]\n                    dist = np.linalg.norm(dist_vec)\n                    min_dist = radii[i] + radii[j]  # Ideal distance\n\n                    if dist < min_dist:\n                        # Repel overlapping circles\n                        overlap = min_dist - dist\n                        direction = dist_vec / dist if dist > 0 else np.array([1, 0])  # Avoid division by zero\n                        forces[i] += repulsion_strength * overlap * direction\n\n        # Add repulsive forces from borders\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each border\n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n\n            # Add a weak force towards the center of the square\n            forces[i] += gravity * (np.array([0.5, 0.5]) - centers[i])\n\n        # Update velocities and positions\n        velocities = damping * velocities + forces * dt\n        centers += velocities * dt\n\n        # Keep circles within the unit square\n        radii = compute_max_radii(centers)  # Update radii after movement\n        for i in range(n):\n            x, y = centers[i]\n            centers[i, 0] = np.clip(x, radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(y, radii[i], 1 - radii[i])\n\n    radii = compute_max_radii(centers)  # Final radius computation\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(20):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist / 2.0))  # Take half of the distance\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "9cbb5bd3-9944-4ddd-896e-76ecb94f48e4", "generation": 3, "timestamp": 1750752776.5104737, "iteration_found": 71, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.070710678118654, "target_ratio": 0.7858484546939865, "combined_score": 0.7858484546939865, "eval_time": 31.665066480636597}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.0707\n- target_ratio: 0.7858\n- combined_score: 0.7858\n- eval_time: 31.6651\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a known good pattern\n    centers, radii = initialize_advanced_pattern()\n    \n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_advanced_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Start with hexagonal grid (approximate)\n    grid_size = 5  # Approximate grid dimension\n    spacing = 1.0 / grid_size  # Approximate spacing\n\n    count = 0\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = (j + 0.5) * spacing\n                y = (i + 0.5) * spacing\n                centers[count] = [x, y]\n                count += 1\n\n    # Adjust initial positions based on hexagonal packing principles (stagger rows)\n    for i in range(1, grid_size):\n        for j in range(0, grid_size - 1):\n            idx = i * grid_size + j - (grid_size -1)\n            if idx >= 0 and idx < n:\n                centers[idx][0] += spacing / 2.0  # Stagger every other row\n                if centers[idx][0] > 1:\n                    centers[idx][0] -= spacing\n\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii using a physics-based approach.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Physics-based simulation parameters\n    repulsion_strength = 0.0005\n    border_repulsion = 0.0005\n    damping = 0.95\n    dt = 0.1  # Time step\n\n    velocities = np.zeros_like(centers)\n\n    for iteration in range(500):  # Increased iterations for better settling\n        forces = np.zeros_like(centers)\n\n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist_vec = centers[i] - centers[j]\n                    dist = np.linalg.norm(dist_vec)\n                    min_dist = radii[i] + radii[j]  # Ideal distance\n                    \n                    if dist < min_dist:\n                        # Repel overlapping circles\n                        overlap = min_dist - dist\n                        direction = dist_vec / dist if dist > 0 else np.array([1, 0]) # Avoid division by zero\n                        forces[i] += repulsion_strength * overlap * direction\n\n        # Add repulsive forces from borders\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each border\n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n\n        # Update velocities and positions\n        velocities = damping * velocities + forces * dt\n        centers += velocities * dt\n\n        # Keep circles within the unit square\n        radii = compute_max_radii(centers) # Update radii after movement\n        for i in range(n):\n            x, y = centers[i]\n            centers[i, 0] = np.clip(x, radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(y, radii[i], 1 - radii[i])\n            \n\n    radii = compute_max_radii(centers)  # Final radius computation\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(20):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist / 2.0))  # Take half of the distance\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization, physics, and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize with a hybrid pattern that combines hexagonal and corner/edge placements.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place larger circles at the corners and center\n    centers[0] = [0.1, 0.1]  # Bottom-left corner\n    centers[1] = [0.9, 0.1]  # Bottom-right corner\n    centers[2] = [0.1, 0.9]  # Top-left corner\n    centers[3] = [0.9, 0.9]  # Top-right corner\n    centers[4] = [0.5, 0.5]  # Center\n\n    # Hexagonal grid for remaining circles\n    remaining_circles = n - 5\n    grid_size = 4  # Adjusted grid size\n\n    count = 5\n    spacing = 0.2  # Adjusted spacing\n    offset_x = 0.3\n    offset_y = 0.3\n\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = offset_x + j * spacing + (i % 2) * (spacing / 2)\n                y = offset_y + i * spacing\n                centers[count] = [x, y]\n                count += 1\n\n    radii = compute_max_radii(centers)\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii using a physics-based approach.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Physics-based simulation parameters\n    repulsion_strength = 0.001\n    border_repulsion = 0.001\n    damping = 0.9\n    dt = 0.05  # Reduced time step for stability\n    gravity = 0.0001 # Introduce a weak gravity-like force towards the center\n\n    velocities = np.zeros_like(centers)\n\n    for iteration in range(750):  # Increased iterations for better settling\n        forces = np.zeros_like(centers)\n\n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist_vec = centers[i] - centers[j]\n                    dist = np.linalg.norm(dist_vec)\n                    min_dist = radii[i] + radii[j]  # Ideal distance\n\n                    if dist < min_dist:\n                        # Repel overlapping circles\n                        overlap = min_dist - dist\n                        direction = dist_vec / dist if dist > 0 else np.array([1, 0])  # Avoid division by zero\n                        forces[i] += repulsion_strength * overlap * direction\n\n        # Add repulsive forces from borders\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each border\n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n\n            # Add a weak force towards the center of the square\n            forces[i] += gravity * (np.array([0.5, 0.5]) - centers[i])\n\n        # Update velocities and positions\n        velocities = damping * velocities + forces * dt\n        centers += velocities * dt\n\n        # Keep circles within the unit square\n        radii = compute_max_radii(centers)  # Update radii after movement\n        for i in range(n):\n            x, y = centers[i]\n            centers[i, 0] = np.clip(x, radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(y, radii[i], 1 - radii[i])\n\n    radii = compute_max_radii(centers)  # Final radius computation\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(20):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist / 2.0))  # Take half of the distance\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}