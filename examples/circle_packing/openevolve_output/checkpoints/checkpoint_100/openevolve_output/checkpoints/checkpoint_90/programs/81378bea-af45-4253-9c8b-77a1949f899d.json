{"id": "81378bea-af45-4253-9c8b-77a1949f899d", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach:\n    - Optimized initialization with corner, edge, and central biases\n    - Multi-stage optimization: Gradient descent followed by physics-based refinement\n    - Adaptive radius adjustment and collision resolution\n\n    Target AlphaEvolve score: 2.635\n\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a more strategic pattern\n    centers, radii = initialize_optimized_pattern()\n    \n    # Optimize using gradient descent with adaptive learning rate and momentum\n    centers, radii = optimize_packing_gradient(centers, radii, iterations=1500, learning_rate=0.02)\n    \n    # Final refinement using a more robust physics-based approach\n    centers, radii = refine_packing_physics(centers, radii, iterations=300)\n    \n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef initialize_optimized_pattern():\n    \"\"\"Initialize with corner circles, edge circles, and a central cluster\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 Corner circles (larger)\n    centers[:4] = np.array([[0.08, 0.08], [0.92, 0.08], [0.08, 0.92], [0.92, 0.92]])\n    radii[:4] = 0.07\n\n    # 8 Edge circles (medium)\n    centers[4:12] = np.array([\n        [0.5, 0.08], [0.08, 0.5], [0.92, 0.5], [0.5, 0.92],\n        [0.25, 0.08], [0.75, 0.08], [0.25, 0.92], [0.75, 0.92]\n    ])\n    radii[4:12] = 0.06\n\n    # Remaining 14 circles in a central cluster (smaller) - perturbed hexagonal\n    num_central = n - 12\n    hex_radius = 0.25 # Radius of the hexagon\n    angles = np.linspace(0, 2 * np.pi, num_central, endpoint=False)\n\n    centers[12:] = np.array([\n        [0.5 + hex_radius * np.cos(angle) + np.random.normal(0, 0.03),\n         0.5 + hex_radius * np.sin(angle) + np.random.normal(0, 0.03)]\n        for angle in angles\n    ])\n\n    radii[12:] = 0.05\n\n    radii = compute_max_radii(centers)  # Remove initial overlaps\n\n    return centers, radii\n\n\ndef optimize_packing_gradient(centers, radii, iterations=1000, learning_rate=0.01, momentum=0.5):\n    \"\"\"Optimizes circle packing using gradient descent with adaptive learning rate and momentum.\"\"\"\n    n = centers.shape[0]\n    \n    # Adaptive learning rate parameters\n    initial_learning_rate = learning_rate\n    decay_rate = 0.998\n    \n    # Momentum parameters\n    velocity_centers = np.zeros_like(centers)\n    velocity_radii = np.zeros_like(radii)\n    \n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for iteration in range(iterations):\n        # Calculate the overlap penalty\n        overlap_penalty = 0.0\n        gradient_centers = np.zeros_like(centers)\n        gradient_radii = np.zeros_like(radii)\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlap_penalty += overlap**2\n                    \n                    # Gradient calculation (simplified)\n                    direction = dist_vec / (dist + 1e-8) # Avoid division by zero\n                    gradient_centers[i] += overlap * direction\n                    gradient_centers[j] -= overlap * direction\n                    gradient_radii[i] += overlap\n                    gradient_radii[j] += overlap\n        \n        # Apply border penalty\n        border_penalty = 0.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                border_penalty += (r - x)**2\n                gradient_centers[i, 0] += (r - x)\n                gradient_radii[i] += (r - x)\n            if x > 1 - r:\n                border_penalty += (x - (1 - r))**2\n                gradient_centers[i, 0] -= (x - (1 - r))\n                gradient_radii[i] += (x - (1 - r))\n            if y < r:\n                border_penalty += (r - y)**2\n                gradient_centers[i, 1] += (r - y)\n                gradient_radii[i] += (r - y)\n            if y > 1 - r:\n                border_penalty += (y - (1 - r))**2\n                gradient_centers[i, 1] -= (y - (1 - r))\n                gradient_radii[i] += (y - (1 - r))\n        \n        # Update velocities with momentum\n        velocity_centers = momentum * velocity_centers + learning_rate * gradient_centers\n        velocity_radii = momentum * velocity_radii + learning_rate * gradient_radii\n        \n        # Update positions and radii using velocities\n        centers += velocity_centers\n        radii += velocity_radii\n        \n        # Clip values to stay within bounds and avoid negative radii\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = np.clip(radii, 0.001, 0.3)\n        \n        # Recalculate radii based on current positions\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Adaptive learning rate\n        learning_rate = initial_learning_rate * (decay_rate ** iteration)\n        \n        # Keep track of the best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef refine_packing_physics(centers, radii, iterations=200, repulsion_strength=0.001, border_repulsion=0.002):\n    \"\"\"Refines the packing using a more robust physics-based approach.\"\"\"\n    n = centers.shape[0]\n    \n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n        \n        # Update positions\n        centers += forces * 0.1\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)  # Start with zero radii\n    \n    for i in range(n):\n        # Border constraints\n        x, y = centers[i]\n        border_limit = min(x, y, 1 - x, 1 - y)\n        \n        # Circle-circle constraints\n        circle_limit = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                circle_limit = min(circle_limit, (dist - radii[j]) / 2) # Divide by 2 to avoid overlap\n        \n        radii[i] = min(border_limit, circle_limit)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "e2311996-711b-4fb0-8ca8-16a9dd15d796", "generation": 5, "timestamp": 1750752999.1424108, "iteration_found": 79, "metrics": {"validity": 1.0, "sum_radii": 1.218681496745952, "target_ratio": 0.462497721725219, "combined_score": 0.462497721725219, "eval_time": 5.236345052719116}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.0874734917680948, "target_ratio": 0.4127034124357096, "combined_score": 0.4127034124357096, "eval_time": 3.5346884727478027}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.0875\n- target_ratio: 0.4127\n- combined_score: 0.4127\n- eval_time: 3.5347\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a Voronoi-based initialization,\nadaptive radii, and a physics-inspired optimization with enhanced collision resolution.\"\"\"\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and a gradient-based optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a mix of strategies\n    centers, radii = initialize_mixed_pattern()\n    \n    # Optimize using gradient descent with adaptive learning rate\n    centers, radii = optimize_packing_gradient(centers, radii)\n    \n    # Final refinement using a simplified physics-based approach\n    centers, radii = refine_packing_simple(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef initialize_mixed_pattern():\n    \"\"\"Initialize with a mix of hexagonal and corner-focused patterns\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 larger circles in the corners\n    centers[:4] = np.array([[0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9]])\n    radii[:4] = 0.1  # Initial radius for corner circles\n    \n    # Place 6 circles in a central hexagonal arrangement\n    hex_centers = create_hexagonal_grid(6, center=[0.5, 0.5], scale=0.2)\n    centers[4:10] = hex_centers\n    radii[4:10] = 0.08  # Initial radius for central hexagon\n    \n    # Fill the remaining spots with a somewhat regular distribution\n    remaining = n - 10\n    grid_x = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    grid_y = np.linspace(0.2, 0.8, int(np.ceil(np.sqrt(remaining))))\n    \n    count = 10\n    for x in grid_x:\n        for y in grid_y:\n            if count < n:\n                centers[count] = [x + np.random.normal(0, 0.02), y + np.random.normal(0, 0.02)]\n                radii[count] = 0.06  # Initial radius for remaining circles\n                count += 1\n    \n    radii = compute_max_radii(centers) # Ensure no initial overlaps\n\n    return centers, radii\n\n\ndef create_hexagonal_grid(num_circles, center=[0.5, 0.5], scale=0.2):\n    \"\"\"Creates a hexagonal grid of circles.\"\"\"\n    centers = []\n    for i in range(num_circles):\n        angle = 2 * np.pi * i / num_circles\n        x = center[0] + scale * np.cos(angle)\n        y = center[1] + scale * np.sin(angle)\n        centers.append([x, y])\n    return np.array(centers)\n\n\ndef optimize_packing_gradient(centers, radii, iterations=1000, learning_rate=0.01):\n    \"\"\"Optimizes the circle packing using a gradient descent approach.\"\"\"\n    n = centers.shape[0]\n    \n    # Adaptive learning rate parameters\n    initial_learning_rate = learning_rate\n    decay_rate = 0.995\n    \n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for iteration in range(iterations):\n        # Calculate the overlap penalty\n        overlap_penalty = 0.0\n        gradient_centers = np.zeros_like(centers)\n        gradient_radii = np.zeros_like(radii)\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlap_penalty += overlap**2\n                    \n                    # Gradient calculation (simplified)\n                    direction = dist_vec / (dist + 1e-8) # Avoid division by zero\n                    gradient_centers[i] += overlap * direction\n                    gradient_centers[j] -= overlap * direction\n                    gradient_radii[i] += overlap\n                    gradient_radii[j] += overlap\n        \n        # Apply border penalty\n        border_penalty = 0.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                border_penalty += (r - x)**2\n                gradient_centers[i, 0] += (r - x)\n                gradient_radii[i] += (r - x)\n            if x > 1 - r:\n                border_penalty += (x - (1 - r))**2\n                gradient_centers[i, 0] -= (x - (1 - r))\n                gradient_radii[i] += (x - (1 - r))\n            if y < r:\n                border_penalty += (r - y)**2\n                gradient_centers[i, 1] += (r - y)\n                gradient_radii[i] += (r - y)\n            if y > 1 - r:\n                border_penalty += (y - (1 - r))**2\n                gradient_centers[i, 1] -= (y - (1 - r))\n                gradient_radii[i] += (y - (1 - r))\n        \n        # Update positions and radii using gradient descent\n        centers += learning_rate * gradient_centers\n        radii += learning_rate * gradient_radii\n        \n        # Clip values to stay within bounds and avoid negative radii\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = np.clip(radii, 0.001, 0.3)\n        \n        # Recalculate radii based on current positions\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Adaptive learning rate\n        learning_rate = initial_learning_rate * (decay_rate ** iteration)\n        \n        # Keep track of the best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef refine_packing_simple(centers, radii, iterations=200):\n    \"\"\"Refines the packing using a simplified physics-based approach.\"\"\"\n    n = centers.shape[0]\n    \n    repulsion_strength = 0.0005\n    border_repulsion = 0.001\n    \n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n        \n        # Update positions\n        centers += forces * 0.1\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)  # Start with zero radii\n    \n    for i in range(n):\n        # Border constraints\n        x, y = centers[i]\n        border_limit = min(x, y, 1 - x, 1 - y)\n        \n        # Circle-circle constraints\n        circle_limit = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                circle_limit = min(circle_limit, (dist - radii[j]) / 2) # Divide by 2 to avoid overlap\n        \n        radii[i] = min(border_limit, circle_limit)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach:\n    - Optimized initialization with corner, edge, and central biases\n    - Multi-stage optimization: Gradient descent followed by physics-based refinement\n    - Adaptive radius adjustment and collision resolution\n\n    Target AlphaEvolve score: 2.635\n\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a more strategic pattern\n    centers, radii = initialize_optimized_pattern()\n    \n    # Optimize using gradient descent with adaptive learning rate and momentum\n    centers, radii = optimize_packing_gradient(centers, radii, iterations=1500, learning_rate=0.02)\n    \n    # Final refinement using a more robust physics-based approach\n    centers, radii = refine_packing_physics(centers, radii, iterations=300)\n    \n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef initialize_optimized_pattern():\n    \"\"\"Initialize with corner circles, edge circles, and a central cluster\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 Corner circles (larger)\n    centers[:4] = np.array([[0.08, 0.08], [0.92, 0.08], [0.08, 0.92], [0.92, 0.92]])\n    radii[:4] = 0.07\n\n    # 8 Edge circles (medium)\n    centers[4:12] = np.array([\n        [0.5, 0.08], [0.08, 0.5], [0.92, 0.5], [0.5, 0.92],\n        [0.25, 0.08], [0.75, 0.08], [0.25, 0.92], [0.75, 0.92]\n    ])\n    radii[4:12] = 0.06\n\n    # Remaining 14 circles in a central cluster (smaller) - perturbed hexagonal\n    num_central = n - 12\n    hex_radius = 0.25 # Radius of the hexagon\n    angles = np.linspace(0, 2 * np.pi, num_central, endpoint=False)\n\n    centers[12:] = np.array([\n        [0.5 + hex_radius * np.cos(angle) + np.random.normal(0, 0.03),\n         0.5 + hex_radius * np.sin(angle) + np.random.normal(0, 0.03)]\n        for angle in angles\n    ])\n\n    radii[12:] = 0.05\n\n    radii = compute_max_radii(centers)  # Remove initial overlaps\n\n    return centers, radii\n\n\ndef optimize_packing_gradient(centers, radii, iterations=1000, learning_rate=0.01, momentum=0.5):\n    \"\"\"Optimizes circle packing using gradient descent with adaptive learning rate and momentum.\"\"\"\n    n = centers.shape[0]\n    \n    # Adaptive learning rate parameters\n    initial_learning_rate = learning_rate\n    decay_rate = 0.998\n    \n    # Momentum parameters\n    velocity_centers = np.zeros_like(centers)\n    velocity_radii = np.zeros_like(radii)\n    \n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for iteration in range(iterations):\n        # Calculate the overlap penalty\n        overlap_penalty = 0.0\n        gradient_centers = np.zeros_like(centers)\n        gradient_radii = np.zeros_like(radii)\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlap_penalty += overlap**2\n                    \n                    # Gradient calculation (simplified)\n                    direction = dist_vec / (dist + 1e-8) # Avoid division by zero\n                    gradient_centers[i] += overlap * direction\n                    gradient_centers[j] -= overlap * direction\n                    gradient_radii[i] += overlap\n                    gradient_radii[j] += overlap\n        \n        # Apply border penalty\n        border_penalty = 0.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                border_penalty += (r - x)**2\n                gradient_centers[i, 0] += (r - x)\n                gradient_radii[i] += (r - x)\n            if x > 1 - r:\n                border_penalty += (x - (1 - r))**2\n                gradient_centers[i, 0] -= (x - (1 - r))\n                gradient_radii[i] += (x - (1 - r))\n            if y < r:\n                border_penalty += (r - y)**2\n                gradient_centers[i, 1] += (r - y)\n                gradient_radii[i] += (r - y)\n            if y > 1 - r:\n                border_penalty += (y - (1 - r))**2\n                gradient_centers[i, 1] -= (y - (1 - r))\n                gradient_radii[i] += (y - (1 - r))\n        \n        # Update velocities with momentum\n        velocity_centers = momentum * velocity_centers + learning_rate * gradient_centers\n        velocity_radii = momentum * velocity_radii + learning_rate * gradient_radii\n        \n        # Update positions and radii using velocities\n        centers += velocity_centers\n        radii += velocity_radii\n        \n        # Clip values to stay within bounds and avoid negative radii\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = np.clip(radii, 0.001, 0.3)\n        \n        # Recalculate radii based on current positions\n        radii = compute_max_radii(centers)\n        sum_radii = np.sum(radii)\n        \n        # Adaptive learning rate\n        learning_rate = initial_learning_rate * (decay_rate ** iteration)\n        \n        # Keep track of the best configuration\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef refine_packing_physics(centers, radii, iterations=200, repulsion_strength=0.001, border_repulsion=0.002):\n    \"\"\"Refines the packing using a more robust physics-based approach.\"\"\"\n    n = centers.shape[0]\n    \n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Border forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += border_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= border_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += border_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= border_repulsion * (y - (1 - r))\n        \n        # Update positions\n        centers += forces * 0.1\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)  # Start with zero radii\n    \n    for i in range(n):\n        # Border constraints\n        x, y = centers[i]\n        border_limit = min(x, y, 1 - x, 1 - y)\n        \n        # Circle-circle constraints\n        circle_limit = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                circle_limit = min(circle_limit, (dist - radii[j]) / 2) # Divide by 2 to avoid overlap\n        \n        radii[i] = min(border_limit, circle_limit)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}