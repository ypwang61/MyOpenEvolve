{"id": "7dd65f79-d9f0-4847-b010-0834957e6503", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a multi-stage optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_optimal_pattern()\n    \n    # Multi-stage optimization\n    for stage in range(3):\n        # First optimize positions with fixed radii\n        centers = optimize_positions(centers, radii)\n        \n        # Then compute optimal radii for fixed positions\n        radii = compute_max_radii(centers)\n        \n        # Then perform joint optimization with physics simulation\n        centers, radii = optimize_packing(centers, radii, stage)\n    \n    # Final radius optimization\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_optimal_pattern():\n    \"\"\"\n    Initialize circle centers and radii using insights from optimal packing literature.\n    Uses a combination of:\n    - Large central circle\n    - Strategic corner and edge placements\n    - Variable-sized circles with larger ones in the center\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle - make it large\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n    \n    # Corner circles\n    centers[1:5] = np.array([\n        [0.1, 0.1],   # Bottom-left\n        [0.9, 0.1],   # Bottom-right\n        [0.1, 0.9],   # Top-left\n        [0.9, 0.9]    # Top-right\n    ])\n    radii[1:5] = 0.1\n    \n    # Edge circles\n    centers[5:9] = np.array([\n        [0.5, 0.1],   # Bottom\n        [0.5, 0.9],   # Top\n        [0.1, 0.5],   # Left\n        [0.9, 0.5]    # Right\n    ])\n    radii[5:9] = 0.1\n    \n    # First inner ring - hexagonal arrangement\n    angles = np.linspace(0, 2*np.pi, 7, endpoint=False)\n    r_inner = 0.28\n    for i in range(6):\n        centers[9+i] = [\n            0.5 + r_inner * np.cos(angles[i]),\n            0.5 + r_inner * np.sin(angles[i])\n        ]\n    radii[9:15] = 0.09\n    \n    # Additional circles - place strategically to fill gaps\n    # Second ring - partial\n    angles2 = np.linspace(np.pi/6, 2*np.pi+np.pi/6, 13, endpoint=False)\n    r_outer = 0.5\n    for i in range(11):\n        centers[15+i] = [\n            0.5 + r_outer * np.cos(angles2[i]),\n            0.5 + r_outer * np.sin(angles2[i])\n        ]\n    radii[15:26] = 0.07\n    \n    # Adjust positions to avoid obvious overlaps\n    centers = adjust_initial_positions(centers)\n    \n    # Compute initial radii based on positions\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef adjust_initial_positions(centers):\n    \"\"\"\n    Make small adjustments to initial positions to reduce obvious overlaps\n    \"\"\"\n    # Push corner circles slightly away from corners\n    centers[1] = [0.12, 0.12]\n    centers[2] = [0.88, 0.12]\n    centers[3] = [0.12, 0.88]\n    centers[4] = [0.88, 0.88]\n    \n    # Adjust edge circles\n    centers[5] = [0.5, 0.12]\n    centers[6] = [0.5, 0.88]\n    centers[7] = [0.12, 0.5]\n    centers[8] = [0.88, 0.5]\n    \n    return centers\n\ndef optimize_positions(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions while keeping radii fixed\n    \"\"\"\n    n = centers.shape[0]\n    step_size = 0.001\n    \n    for _ in range(iterations):\n        # For each circle\n        for i in range(n):\n            # Try small movements in 8 directions\n            best_pos = centers[i].copy()\n            max_clearance = min_clearance(centers, radii, i)\n            \n            for dx, dy in [(step_size, 0), (-step_size, 0), (0, step_size), (0, -step_size),\n                           (step_size, step_size), (step_size, -step_size), \n                           (-step_size, step_size), (-step_size, -step_size)]:\n                \n                # Try moving the circle\n                test_pos = centers[i] + np.array([dx, dy])\n                \n                # Check if still in bounds\n                if (radii[i] <= test_pos[0] <= 1-radii[i] and \n                    radii[i] <= test_pos[1] <= 1-radii[i]):\n                    \n                    # Temporarily move the circle\n                    old_pos = centers[i].copy()\n                    centers[i] = test_pos\n                    \n                    # Check if this position is better\n                    new_clearance = min_clearance(centers, radii, i)\n                    if new_clearance > max_clearance:\n                        max_clearance = new_clearance\n                        best_pos = test_pos.copy()\n                    \n                    # Restore the original position\n                    centers[i] = old_pos\n            \n            # Move to the best position found\n            centers[i] = best_pos\n    \n    return centers\n\ndef min_clearance(centers, radii, index):\n    \"\"\"\n    Calculate the minimum clearance (space) around a circle\n    \"\"\"\n    n = centers.shape[0]\n    center = centers[index]\n    radius = radii[index]\n    \n    # Distance to borders\n    border_dist = min(\n        center[0] - radius,           # Left\n        1 - center[0] - radius,       # Right\n        center[1] - radius,           # Bottom\n        1 - center[1] - radius        # Top\n    )\n    \n    # Minimum distance to other circles\n    min_dist = float('inf')\n    for i in range(n):\n        if i != index:\n            dist = np.sqrt(np.sum((center - centers[i])**2)) - radius - radii[i]\n            min_dist = min(min_dist, dist)\n    \n    return min(border_dist, min_dist)\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # Distance to borders\n        border_dist = min(\n            centers[i, 0],          # Left\n            1 - centers[i, 0],      # Right\n            centers[i, 1],          # Bottom\n            1 - centers[i, 1]       # Top\n        )\n        \n        # Initial radius based on border distance\n        radii[i] = border_dist\n        \n        # Check distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if radii[j] > 0:  # If the other circle's radius is already computed\n                    radii[i] = min(radii[i], dist - radii[j])\n                else:  # Conservative estimate\n                    radii[i] = min(radii[i], dist/2)\n    \n    # Second pass to refine radii\n    for _ in range(2):\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    radii[i] = min(radii[i], dist - radii[j])\n    \n    # Safety margin to prevent numerical issues\n    radii = radii * 0.9999\n    \n    return radii\n\ndef optimize_packing(centers, radii, stage):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    Different parameters for different optimization stages.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Parameters that change by stage\n    if stage == 0:\n        repulsion_strength = 0.1\n        border_repulsion = 0.05\n        num_iterations = 200\n        damping = 0.8\n        radii_adjustment_freq = 5\n    elif stage == 1:\n        repulsion_strength = 0.05\n        border_repulsion = 0.02\n        num_iterations = 300\n        damping = 0.9\n        radii_adjustment_freq = 3\n    else:\n        repulsion_strength = 0.02\n        border_repulsion = 0.01\n        num_iterations = 500\n        damping = 0.95\n        radii_adjustment_freq = 2\n    \n    # Store best configuration\n    best_sum = np.sum(radii)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    \n    # Velocities for momentum\n    velocities = np.zeros_like(centers)\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.sqrt(np.sum(dist_vec**2))\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:  # Overlap\n                    # Normalized direction vector\n                    if dist > 0:\n                        direction = dist_vec / dist\n                    else:\n                        direction = np.array([1.0, 0.0])  # Default if centers coincide\n                    \n                    # Force increases with overlap amount\n                    overlap = min_dist - dist\n                    force_magnitude = repulsion_strength * overlap\n                    \n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            dist_to_left = centers[i, 0] - radii[i]\n            if dist_to_left < 0:\n                forces[i, 0] += border_repulsion * abs(dist_to_left) * 2\n            \n            # Right border\n            dist_to_right = 1 - (centers[i, 0] + radii[i])\n            if dist_to_right < 0:\n                forces[i, 0] -= border_repulsion * abs(dist_to_right) * 2\n            \n            # Bottom border\n            dist_to_bottom = centers[i, 1] - radii[i]\n            if dist_to_bottom < 0:\n                forces[i, 1] += border_repulsion * abs(dist_to_bottom) * 2\n            \n            # Top border\n            dist_to_top = 1 - (centers[i, 1] + radii[i])\n            if dist_to_top < 0:\n                forces[i, 1] -= border_repulsion * abs(dist_to_top) * 2\n        \n        # --- Apply Forces with Momentum ---\n        velocities = velocities * damping + forces * (1 - damping)\n        centers += velocities\n        \n        # --- Adjust Radii Periodically ---\n        if iteration % radii_adjustment_freq == 0:\n            radii = compute_max_radii(centers)\n            \n            # Track best configuration\n            current_sum = np.sum(radii)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n        \n        # --- Keep circles within bounds ---\n        for i in range(n):\n            # Ensure centers stay in bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Return the best configuration found\n    return best_centers, best_radii\n\ndef optimize_variable_radii(centers, radii):\n    \"\"\"\n    Optimize the radii using a variable-sized approach where some circles\n    can be larger at the expense of others.\n    \"\"\"\n    n = centers.shape[0]\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    # Try scaling individual circles\n    for i in range(n):\n        # Try making this circle larger\n        test_radii = radii.copy()\n        test_radii[i] *= 1.1  # Increase by 10%\n        \n        # Adjust other radii to prevent overlaps\n        for j in range(n):\n            if j != i:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if test_radii[i] + test_radii[j] > dist:\n                    # Reduce the other circle's radius to prevent overlap\n                    test_radii[j] = max(0.001, dist - test_radii[i])\n        \n        # Check if borders are respected\n        for j in range(n):\n            test_radii[j] = min(test_radii[j], \n                               centers[j, 0],\n                               centers[j, 1],\n                               1 - centers[j, 0],\n                               1 - centers[j, 1])\n        \n        # See if this improves the total sum\n        test_sum = np.sum(test_radii)\n        if test_sum > best_sum:\n            best_sum = test_sum\n            best_radii = test_radii.copy()\n    \n    return best_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "346ccda7-43df-4d64-93ab-0d1241705cb3", "generation": 7, "timestamp": 1750752975.47609, "iteration_found": 78, "metrics": {"validity": 1.0, "sum_radii": 2.3548388162868803, "target_ratio": 0.8936769701278484, "combined_score": 0.8936769701278484, "eval_time": 13.062497854232788}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.7912992382099273, "target_ratio": 0.679809957574925, "combined_score": 0.679809957574925, "eval_time": 2.4253530502319336}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7913\n- target_ratio: 0.6798\n- combined_score: 0.6798\n- eval_time: 2.4254\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 1.2895)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and a gradient-based optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.0875), Performs well on target_ratio (0.4127), Performs well on combined_score (0.4127), Performs well on eval_time (3.5347)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach with improved initialization and physics.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a hybrid pattern, adaptive radii, and efficient optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize the packing\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle centers and radii using a hybrid approach:\n    - Corner circles\n    - Edge circles\n    - Central hexagonal arrangement\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # --- Corner Circles ---\n    centers[0] = [0.1, 0.1]\n    centers[1] = [0.9, 0.1]\n    centers[2] = [0.1, 0.9]\n    centers[3] = [0.9, 0.9]\n    radii[:4] = 0.08 # Initial radius for corner circles\n\n    # --- Edge Circles ---\n    centers[4] = [0.5, 0.1]\n    centers[5] = [0.5, 0.9]\n    centers[6] = [0.1, 0.5]\n    centers[7] = [0.9, 0.5]\n    radii[4:8] = 0.09 # Initial radius for edge circles\n\n    centers[8] = [0.25, 0.1]\n    centers[9] = [0.75, 0.1]\n    centers[10] = [0.25, 0.9]\n    centers[11] = [0.75, 0.9]\n    centers[12] = [0.1, 0.25]\n    centers[13] = [0.1, 0.75]\n    centers[14] = [0.9, 0.25]\n    centers[15] = [0.9, 0.75]\n    radii[8:16] = 0.075\n\n    # --- Central Hexagonal Arrangement ---\n    centers[16] = [0.5, 0.5]  # Center\n    radii[16] = 0.12\n    \n    # First ring around the center\n    angles = np.linspace(0, 2 * np.pi, 9, endpoint=False)[:6] # 6 circles around the center\n    r_hex = 0.22 # Radius of the hexagonal ring\n    centers[17:23] = np.array([centers[16] + r_hex * np.array([np.cos(angle), np.sin(angle)]) for angle in angles])\n    radii[17:23] = 0.07\n\n    # Second ring around the center (incomplete to reach 26)\n    angles2 = np.linspace(0, 2*np.pi, 9, endpoint=False)[0:3]\n    r_hex2 = 0.42\n    centers[23:26] = np.array([centers[16] + r_hex2 * np.array([np.cos(angle), np.sin(angle)]) for angle in angles2])\n    radii[23:26] = 0.06\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.05\n    border_repulsion = 0.02\n    num_iterations = 500\n    damping = 0.9\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            if centers[i, 0] - radii[i] < 0:\n                forces[i, 0] += border_repulsion\n            # Right border\n            if centers[i, 0] + radii[i] > 1:\n                forces[i, 0] -= border_repulsion\n            # Bottom border\n            if centers[i, 1] - radii[i] < 0:\n                forces[i, 1] += border_repulsion\n            # Top border\n            if centers[i, 1] + radii[i] > 1:\n                forces[i, 1] -= border_repulsion\n        \n        # --- Apply Forces and Damping ---\n        centers += forces * (1 - damping)\n\n        # --- Adjust Radii ---\n        radii = compute_max_radii(centers)\n        \n        # --- Keep circles within bounds ---\n        centers[:, 0] = np.clip(centers[:, 0], radii + 0.001, 1 - radii - 0.001)\n        centers[:, 1] = np.clip(centers[:, 1], radii + 0.001, 1 - radii - 0.001)\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # --- Border Distance ---\n        radii[i] = min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])\n        \n        # --- Circle-Circle Distance ---\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                radii[i] = min(radii[i], (dist - 1e-6) / 2.0)  # Subtract a small epsilon\n                \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll rewrite the program to significantly improve the circle packing performance. The current implementation has plateaued at a sum of radii around 2.37, far from the target of 2.635. I'll implement a more sophisticated approach based on mathematical insights about optimal circle packing.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a multi-stage optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_optimal_pattern()\n    \n    # Multi-stage optimization\n    for stage in range(3):\n        # First optimize positions with fixed radii\n        centers = optimize_positions(centers, radii)\n        \n        # Then compute optimal radii for fixed positions\n        radii = compute_max_radii(centers)\n        \n        # Then perform joint optimization with physics simulation\n        centers, radii = optimize_packing(centers, radii, stage)\n    \n    # Final radius optimization\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_optimal_pattern():\n    \"\"\"\n    Initialize circle centers and radii using insights from optimal packing literature.\n    Uses a combination of:\n    - Large central circle\n    - Strategic corner and edge placements\n    - Variable-sized circles with larger ones in the center\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle - make it large\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n    \n    # Corner circles\n    centers[1:5] = np.array([\n        [0.1, 0.1],   # Bottom-left\n        [0.9, 0.1],   # Bottom-right\n        [0.1, 0.9],   # Top-left\n        [0.9, 0.9]    # Top-right\n    ])\n    radii[1:5] = 0.1\n    \n    # Edge circles\n    centers[5:9] = np.array([\n        [0.5, 0.1],   # Bottom\n        [0.5, 0.9],   # Top\n        [0.1, 0.5],   # Left\n        [0.9, 0.5]    # Right\n    ])\n    radii[5:9] = 0.1\n    \n    # First inner ring - hexagonal arrangement\n    angles = np.linspace(0, 2*np.pi, 7, endpoint=False)\n    r_inner = 0.28\n    for i in range(6):\n        centers[9+i] = [\n            0.5 + r_inner * np.cos(angles[i]),\n            0.5 + r_inner * np.sin(angles[i])\n        ]\n    radii[9:15] = 0.09\n    \n    # Additional circles - place strategically to fill gaps\n    # Second ring - partial\n    angles2 = np.linspace(np.pi/6, 2*np.pi+np.pi/6, 13, endpoint=False)\n    r_outer = 0.5\n    for i in range(11):\n        centers[15+i] = [\n            0.5 + r_outer * np.cos(angles2[i]),\n            0.5 + r_outer * np.sin(angles2[i])\n        ]\n    radii[15:26] = 0.07\n    \n    # Adjust positions to avoid obvious overlaps\n    centers = adjust_initial_positions(centers)\n    \n    # Compute initial radii based on positions\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef adjust_initial_positions(centers):\n    \"\"\"\n    Make small adjustments to initial positions to reduce obvious overlaps\n    \"\"\"\n    # Push corner circles slightly away from corners\n    centers[1] = [0.12, 0.12]\n    centers[2] = [0.88, 0.12]\n    centers[3] = [0.12, 0.88]\n    centers[4] = [0.88, 0.88]\n    \n    # Adjust edge circles\n    centers[5] = [0.5, 0.12]\n    centers[6] = [0.5, 0.88]\n    centers[7] = [0.12, 0.5]\n    centers[8] = [0.88, 0.5]\n    \n    return centers\n\ndef optimize_positions(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions while keeping radii fixed\n    \"\"\"\n    n = centers.shape[0]\n    step_size = 0.001\n    \n    for _ in range(iterations):\n        # For each circle\n        for i in range(n):\n            # Try small movements in 8 directions\n            best_pos = centers[i].copy()\n            max_clearance = min_clearance(centers, radii, i)\n            \n            for dx, dy in [(step_size, 0), (-step_size, 0), (0, step_size), (0, -step_size),\n                           (step_size, step_size), (step_size, -step_size), \n                           (-step_size, step_size), (-step_size, -step_size)]:\n                \n                # Try moving the circle\n                test_pos = centers[i] + np.array([dx, dy])\n                \n                # Check if still in bounds\n                if (radii[i] <= test_pos[0] <= 1-radii[i] and \n                    radii[i] <= test_pos[1] <= 1-radii[i]):\n                    \n                    # Temporarily move the circle\n                    old_pos = centers[i].copy()\n                    centers[i] = test_pos\n                    \n                    # Check if this position is better\n                    new_clearance = min_clearance(centers, radii, i)\n                    if new_clearance > max_clearance:\n                        max_clearance = new_clearance\n                        best_pos = test_pos.copy()\n                    \n                    # Restore the original position\n                    centers[i] = old_pos\n            \n            # Move to the best position found\n            centers[i] = best_pos\n    \n    return centers\n\ndef min_clearance(centers, radii, index):\n    \"\"\"\n    Calculate the minimum clearance (space) around a circle\n    \"\"\"\n    n = centers.shape[0]\n    center = centers[index]\n    radius = radii[index]\n    \n    # Distance to borders\n    border_dist = min(\n        center[0] - radius,           # Left\n        1 - center[0] - radius,       # Right\n        center[1] - radius,           # Bottom\n        1 - center[1] - radius        # Top\n    )\n    \n    # Minimum distance to other circles\n    min_dist = float('inf')\n    for i in range(n):\n        if i != index:\n            dist = np.sqrt(np.sum((center - centers[i])**2)) - radius - radii[i]\n            min_dist = min(min_dist, dist)\n    \n    return min(border_dist, min_dist)\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # Distance to borders\n        border_dist = min(\n            centers[i, 0],          # Left\n            1 - centers[i, 0],      # Right\n            centers[i, 1],          # Bottom\n            1 - centers[i, 1]       # Top\n        )\n        \n        # Initial radius based on border distance\n        radii[i] = border_dist\n        \n        # Check distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if radii[j] > 0:  # If the other circle's radius is already computed\n                    radii[i] = min(radii[i], dist - radii[j])\n                else:  # Conservative estimate\n                    radii[i] = min(radii[i], dist/2)\n    \n    # Second pass to refine radii\n    for _ in range(2):\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    radii[i] = min(radii[i], dist - radii[j])\n    \n    # Safety margin to prevent numerical issues\n    radii = radii * 0.9999\n    \n    return radii\n\ndef optimize_packing(centers, radii, stage):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    Different parameters for different optimization stages.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Parameters that change by stage\n    if stage == 0:\n        repulsion_strength = 0.1\n        border_repulsion = 0.05\n        num_iterations = 200\n        damping = 0.8\n        radii_adjustment_freq = 5\n    elif stage == 1:\n        repulsion_strength = 0.05\n        border_repulsion = 0.02\n        num_iterations = 300\n        damping = 0.9\n        radii_adjustment_freq = 3\n    else:\n        repulsion_strength = 0.02\n        border_repulsion = 0.01\n        num_iterations = 500\n        damping = 0.95\n        radii_adjustment_freq = 2\n    \n    # Store best configuration\n    best_sum = np.sum(radii)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    \n    # Velocities for momentum\n    velocities = np.zeros_like(centers)\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.sqrt(np.sum(dist_vec**2))\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:  # Overlap\n                    # Normalized direction vector\n                    if dist > 0:\n                        direction = dist_vec / dist\n                    else:\n                        direction = np.array([1.0, 0.0])  # Default if centers coincide\n                    \n                    # Force increases with overlap amount\n                    overlap = min_dist - dist\n                    force_magnitude = repulsion_strength * overlap\n                    \n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            dist_to_left = centers[i, 0] - radii[i]\n            if dist_to_left < 0:\n                forces[i, 0] += border_repulsion * abs(dist_to_left) * 2\n            \n            # Right border\n            dist_to_right = 1 - (centers[i, 0] + radii[i])\n            if dist_to_right < 0:\n                forces[i, 0] -= border_repulsion * abs(dist_to_right) * 2\n            \n            # Bottom border\n            dist_to_bottom = centers[i, 1] - radii[i]\n            if dist_to_bottom < 0:\n                forces[i, 1] += border_repulsion * abs(dist_to_bottom) * 2\n            \n            # Top border\n            dist_to_top = 1 - (centers[i, 1] + radii[i])\n            if dist_to_top < 0:\n                forces[i, 1] -= border_repulsion * abs(dist_to_top) * 2\n        \n        # --- Apply Forces with Momentum ---\n        velocities = velocities * damping + forces * (1 - damping)\n        centers += velocities\n        \n        # --- Adjust Radii Periodically ---\n        if iteration % radii_adjustment_freq == 0:\n            radii = compute_max_radii(centers)\n            \n            # Track best configuration\n            current_sum = np.sum(radii)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n        \n        # --- Keep circles within bounds ---\n        for i in range(n):\n            # Ensure centers stay in bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Return the best configuration found\n    return best_centers, best_radii\n\ndef optimize_variable_radii(centers, radii):\n    \"\"\"\n    Optimize the radii using a variable-sized approach where some circles\n    can be larger at the expense of others.\n    \"\"\"\n    n = centers.shape[0]\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    # Try scaling individual circles\n    for i in range(n):\n        # Try making this circle larger\n        test_radii = radii.copy()\n        test_radii[i] *= 1.1  # Increase by 10%\n        \n        # Adjust other radii to prevent overlaps\n        for j in range(n):\n            if j != i:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if test_radii[i] + test_radii[j] > dist:\n                    # Reduce the other circle's radius to prevent overlap\n                    test_radii[j] = max(0.001, dist - test_radii[i])\n        \n        # Check if borders are respected\n        for j in range(n):\n            test_radii[j] = min(test_radii[j], \n                               centers[j, 0],\n                               centers[j, 1],\n                               1 - centers[j, 0],\n                               1 - centers[j, 1])\n        \n        # See if this improves the total sum\n        test_sum = np.sum(test_radii)\n        if test_sum > best_sum:\n            best_sum = test_sum\n            best_radii = test_radii.copy()\n    \n    return best_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\nThis rewritten program implements several advanced techniques to improve circle packing performance:\n\n1. **Multi-stage optimization** - The program uses a three-stage approach with different parameters at each stage, starting with aggressive adjustments and gradually becoming more refined.\n\n2. **Specialized initialization** - The initial pattern is carefully designed based on mathematical insights from optimal circle packing literature, with strategic placement of circles in corners, edges, and a central hexagonal arrangement.\n\n3. **Separate position and radius optimization** - The program alternates between optimizing positions with fixed radii and computing optimal radii for fixed positions, which helps avoid local minima.\n\n4. **Physics-based simulation with momentum** - The optimization includes velocity components that help circles escape local minima and find better global arrangements.\n\n5. **Best configuration tracking** - Throughout the optimization, the program tracks the best configuration found, ensuring we don't lose good solutions.\n\n6. **Variable-sized circles** - The program allows for non-uniform circle sizes, which is crucial for approaching the theoretical maximum packing density.\n\n7. **Adaptive parameters** - Parameters like repulsion strength and damping are adjusted based on the optimization stage.\n\nThese improvements should significantly increase the sum of radii toward the target of 2.635."]}}}