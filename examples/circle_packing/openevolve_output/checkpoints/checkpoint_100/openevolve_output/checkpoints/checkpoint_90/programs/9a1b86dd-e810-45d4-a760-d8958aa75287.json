{"id": "9a1b86dd-e810-45d4-a760-d8958aa75287", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, variable radii, and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    centers, radii = initialize_hybrid_pattern()\n    centers, radii = optimize_radii_and_positions(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize with a hybrid pattern combining hexagonal-like arrangement with corner/edge circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 Corner circles\n    r_corner = 0.08\n    centers[0] = [r_corner, r_corner]\n    centers[1] = [1 - r_corner, r_corner]\n    centers[2] = [r_corner, 1 - r_corner]\n    centers[3] = [1 - r_corner, 1 - r_corner]\n    radii[:4] = r_corner\n\n    # 4 Edge circles\n    r_edge = 0.09\n    centers[4] = [0.25, r_edge]\n    centers[5] = [0.75, r_edge]\n    centers[6] = [0.25, 1 - r_edge]\n    centers[7] = [0.75, 1 - r_edge]\n    radii[4:8] = r_edge\n\n    # Central hexagonal-ish grid (18 circles)\n    grid_rows = 3\n    grid_cols = 6  # Adjusted for 26 total circles\n    x_start = 0.2\n    y_start = 0.2\n    x_spacing = (0.8 - 2 * x_start) / (grid_cols - 1)\n    y_spacing = (0.8 - 2 * y_start) / (grid_rows - 1)\n\n    idx = 8\n    for i in range(grid_rows):\n        for j in range(grid_cols):\n            x = x_start + j * x_spacing\n            y = y_start + i * y_spacing\n            centers[idx] = [x, y]\n            radii[idx] = 0.07 # Initial guess for central circles\n            idx += 1\n            if idx >= n:\n                break\n        if idx >= n:\n            break\n\n    return centers, radii\n\ndef optimize_radii_and_positions(centers, radii):\n    \"\"\"\n    Optimize radii and positions using a physics-inspired approach with repulsion forces.\n    \"\"\"\n    n = centers.shape[0]\n    num_iterations = 100\n    repulsion_strength = 0.005\n    border_repulsion = 0.01\n    learning_rate = 0.1\n\n    for _ in range(num_iterations):\n        # Calculate repulsion forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < (radii[i] + radii[j]):\n                        overlap = radii[i] + radii[j] - dist\n                        direction = (centers[i] - centers[j]) / dist\n                        forces[i] += direction * repulsion_strength * overlap\n\n        # Add repulsion from borders\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] -= border_repulsion / (x + 1e-6)  # Left border\n            forces[i, 0] += border_repulsion / (1 - x + 1e-6) # Right border\n            forces[i, 1] -= border_repulsion / (y + 1e-6)  # Bottom border\n            forces[i, 1] += border_repulsion / (1 - y + 1e-6) # Top border\n\n        # Update positions\n        centers += forces * learning_rate\n\n        # Keep circles within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Recalculate radii based on nearest neighbors\n        for i in range(n):\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = min(min_dist, dist - radii[j]) # distance to the edge of the other circle\n            radii[i] = min(radii[i], min_dist / 2) # Ensure no overlaps\n\n        # Limit radii based on borders\n        for i in range(n):\n            x, y = centers[i]\n            radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "4889ac73-eaff-497c-9270-8f9a2dc4c3bb", "generation": 3, "timestamp": 1750752787.063324, "iteration_found": 72, "metrics": {"validity": 1.0, "sum_radii": 0.10354361087152186, "target_ratio": 0.039295487996782494, "combined_score": 0.039295487996782494}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.170198841755897, "target_ratio": 0.8236048735316498, "combined_score": 0.8236048735316498, "eval_time": 6.364567518234253}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.1702\n- target_ratio: 0.8236\n- combined_score: 0.8236\n- eval_time: 6.3646\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and adaptive optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.2500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a specialized pattern and fast optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a pre-optimized pattern based on mathematical principles\n    centers, radii = initialize_optimal_pattern()\n    \n    # Quick local optimization to fine-tune\n    centers, radii = fast_optimize(centers, radii)\n    \n    # Final calculation of radii\n    radii = compute_max_radii_fast(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_optimal_pattern():\n    \"\"\"\n    Initialize with a mathematically derived pattern optimized for n=26\n    based on research in circle packing problems.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Corner circles (4)\n    r_corner = 0.0905  # Pre-calculated optimal corner radius\n    centers[0] = [r_corner, r_corner]\n    centers[1] = [1-r_corner, r_corner]\n    centers[2] = [r_corner, 1-r_corner]\n    centers[3] = [1-r_corner, 1-r_corner]\n    \n    # Edge circles (8)\n    r_edge = 0.0905  # Pre-calculated optimal edge radius\n    edge_positions = [0.25, 0.5, 0.75]\n    \n    # Bottom edge\n    centers[4] = [edge_positions[0], r_edge]\n    centers[5] = [edge_positions[1], r_edge]\n    centers[6] = [edge_positions[2], r_edge]\n    \n    # Top edge\n    centers[7] = [edge_positions[0], 1-r_edge]\n    centers[8] = [edge_positions[1], 1-r_edge]\n    centers[9] = [edge_positions[2], 1-r_edge]\n    \n    # Left edge\n    centers[10] = [r_edge, edge_positions[0]]\n    centers[11] = [r_edge, edge_positions[2]]\n    \n    # Right edge\n    centers[12] = [1-r_edge, edge_positions[0]]\n    centers[13] = [1-r_edge, edge_positions[2]]\n    \n    # Interior circles arranged in a grid-like pattern (12)\n    interior_positions = [0.25, 0.5, 0.75]\n    idx = 14\n    for x in interior_positions:\n        for y in interior_positions:\n            if not (x == 0.5 and y == 0.5):  # Skip center position for now\n                centers[idx] = [x, y]\n                idx += 1\n    \n    # Center circle (1) - often largest\n    centers[25] = [0.5, 0.5]\n    \n    # Calculate initial radii\n    radii = compute_max_radii_fast(centers)\n    \n    return centers, radii\n\ndef fast_optimize(centers, radii):\n    \"\"\"\n    Efficient optimization that focuses on quick improvements\n    without excessive iterations.\n    \"\"\"\n    n = centers.shape[0]\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    # Simple greedy optimization\n    for _ in range(5):  # Limit iterations for speed\n        for i in range(n):\n            # Try small adjustments in 8 directions\n            directions = [(1,0), (1,1), (0,1), (-1,1), (-1,0), (-1,-1), (0,-1), (1,-1)]\n            step_size = 0.01\n            \n            for dx, dy in directions:\n                test_centers = best_centers.copy()\n                test_centers[i, 0] += dx * step_size\n                test_centers[i, 1] += dy * step_size\n                \n                # Keep within unit square\n                test_centers[i, 0] = np.clip(test_centers[i, 0], 0.001, 0.999)\n                test_centers[i, 1] = np.clip(test_centers[i, 1], 0.001, 0.999)\n                \n                # Calculate new radii and sum\n                test_radii = compute_max_radii_fast(test_centers)\n                test_sum = np.sum(test_radii)\n                \n                # Update if better\n                if test_sum > best_sum:\n                    best_centers = test_centers.copy()\n                    best_radii = test_radii.copy()\n                    best_sum = test_sum\n    \n    # Apply a pre-computed pattern adjustment for known improvements\n    # These adjustments are based on mathematical analysis of optimal packings\n    special_adjustments = {\n        0: [0.0905, 0.0905],\n        1: [0.9095, 0.0905],\n        2: [0.0905, 0.9095],\n        3: [0.9095, 0.9095],\n        25: [0.5, 0.5]\n    }\n    \n    for idx, pos in special_adjustments.items():\n        best_centers[idx] = pos\n    \n    # Final radii calculation\n    best_radii = compute_max_radii_fast(best_centers)\n    \n    return best_centers, best_radii\n\ndef compute_max_radii_fast(centers):\n    \"\"\"\n    Efficiently compute the maximum possible radii for each circle\n    without excessive iterations.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, limit by distance to other circles (single pass)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_allowed = dist / 2  # Simple approximation for speed\n                radii[i] = min(radii[i], max_allowed)\n    \n    # Final refinement pass to handle overlaps properly\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                if radii[i] + radii[j] > dist:\n                    # Adjust both radii proportionally\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, variable radii, and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    centers, radii = initialize_hybrid_pattern()\n    centers, radii = optimize_radii_and_positions(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize with a hybrid pattern combining hexagonal-like arrangement with corner/edge circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 Corner circles\n    r_corner = 0.08\n    centers[0] = [r_corner, r_corner]\n    centers[1] = [1 - r_corner, r_corner]\n    centers[2] = [r_corner, 1 - r_corner]\n    centers[3] = [1 - r_corner, 1 - r_corner]\n    radii[:4] = r_corner\n\n    # 4 Edge circles\n    r_edge = 0.09\n    centers[4] = [0.25, r_edge]\n    centers[5] = [0.75, r_edge]\n    centers[6] = [0.25, 1 - r_edge]\n    centers[7] = [0.75, 1 - r_edge]\n    radii[4:8] = r_edge\n\n    # Central hexagonal-ish grid (18 circles)\n    grid_rows = 3\n    grid_cols = 6  # Adjusted for 26 total circles\n    x_start = 0.2\n    y_start = 0.2\n    x_spacing = (0.8 - 2 * x_start) / (grid_cols - 1)\n    y_spacing = (0.8 - 2 * y_start) / (grid_rows - 1)\n\n    idx = 8\n    for i in range(grid_rows):\n        for j in range(grid_cols):\n            x = x_start + j * x_spacing\n            y = y_start + i * y_spacing\n            centers[idx] = [x, y]\n            radii[idx] = 0.07 # Initial guess for central circles\n            idx += 1\n            if idx >= n:\n                break\n        if idx >= n:\n            break\n\n    return centers, radii\n\ndef optimize_radii_and_positions(centers, radii):\n    \"\"\"\n    Optimize radii and positions using a physics-inspired approach with repulsion forces.\n    \"\"\"\n    n = centers.shape[0]\n    num_iterations = 100\n    repulsion_strength = 0.005\n    border_repulsion = 0.01\n    learning_rate = 0.1\n\n    for _ in range(num_iterations):\n        # Calculate repulsion forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < (radii[i] + radii[j]):\n                        overlap = radii[i] + radii[j] - dist\n                        direction = (centers[i] - centers[j]) / dist\n                        forces[i] += direction * repulsion_strength * overlap\n\n        # Add repulsion from borders\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] -= border_repulsion / (x + 1e-6)  # Left border\n            forces[i, 0] += border_repulsion / (1 - x + 1e-6) # Right border\n            forces[i, 1] -= border_repulsion / (y + 1e-6)  # Bottom border\n            forces[i, 1] += border_repulsion / (1 - y + 1e-6) # Top border\n\n        # Update positions\n        centers += forces * learning_rate\n\n        # Keep circles within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Recalculate radii based on nearest neighbors\n        for i in range(n):\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = min(min_dist, dist - radii[j]) # distance to the edge of the other circle\n            radii[i] = min(radii[i], min_dist / 2) # Ensure no overlaps\n\n        # Limit radii based on borders\n        for i in range(n):\n            x, y = centers[i]\n            radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}