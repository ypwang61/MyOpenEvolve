{"id": "55558fb3-2060-4abc-bf72-ad35c811b697", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern and a more robust optimization strategy\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern(n)\n    \n    # Optimize positions and radii simultaneously\n    centers, radii = optimize_positions_and_radii(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern that combines grid-like and free placement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 9 circles in a 3x3 grid in the center\n    grid_size = 3\n    spacing = 0.3\n    offset_x = 0.5 - (grid_size - 1) * spacing / 2\n    offset_y = 0.5 - (grid_size - 1) * spacing / 2\n    \n    idx = 0\n    for i in range(grid_size):\n        for j in range(grid_size):\n            centers[idx] = [offset_x + i * spacing, offset_y + j * spacing]\n            radii[idx] = 0.08  # Initial guess\n            idx += 1\n    \n    # Place circles along the edges and corners\n    edge_positions = [\n        (0.1, 0.1), (0.1, 0.9), (0.9, 0.1), (0.9, 0.9), # Corners\n        (0.1, 0.3), (0.1, 0.5), (0.1, 0.7),             # Left edge\n        (0.9, 0.3), (0.9, 0.5), (0.9, 0.7),             # Right edge\n        (0.3, 0.1), (0.5, 0.1), (0.7, 0.1),             # Bottom edge\n        (0.3, 0.9), (0.5, 0.9), (0.7, 0.9)              # Top edge\n    ]\n    \n    for pos in edge_positions:\n        if idx < n:\n            centers[idx] = pos\n            radii[idx] = 0.07  # Initial guess\n            idx += 1\n            \n    # Remaining circles, place randomly\n    while idx < n:\n        centers[idx] = np.random.uniform(0.1, 0.9, size=2)\n        radii[idx] = 0.06\n        idx += 1\n        \n    return centers, radii\n\ndef optimize_positions_and_radii(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize.\n    \"\"\"\n    n = centers.shape[0]\n    \n    def objective_function(x):\n        \"\"\"\n        Objective function to minimize: negative sum of radii.\n        \"\"\"\n        radii = x[2*n:]\n        return -np.sum(radii)\n    \n    def constraint_overlap(x):\n        \"\"\"\n        Constraint: circles must not overlap.\n        \"\"\"\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap += max(0, radii[i] + radii[j] - dist)  # Penalize overlap\n        return -overlap # We want overlap to be as negative as possible\n    \n    def constraint_bounds(x):\n        \"\"\"\n        Constraint: circles must stay within the unit square.\n        \"\"\"\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        min_dist_to_border = np.min(np.concatenate([centers, 1 - centers]), axis=None)\n        min_radius = np.min(radii)\n        return min(min_dist_to_border - min_radius, min_radius)  # Ensure radii are non-negative and circles are inside\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds: positions within [0, 1], radii within [0.01, 0.5]\n    bounds = [(0.01, 0.99)] * (2*n) + [(0.01, 0.4)] * n\n    \n    # Constraints\n    constraints = [\n        {'type': 'ineq', 'fun': constraint_overlap},\n        {'type': 'ineq', 'fun': constraint_bounds}\n    ]\n    \n    # Optimization\n    result = minimize(objective_function, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 200})\n    \n    # Extract results\n    x_opt = result.x\n    centers_opt = x_opt[:2*n].reshape(n, 2)\n    radii_opt = x_opt[2*n:]\n    \n    # Ensure radii are non-negative\n    radii_opt = np.maximum(radii_opt, 0.01)\n\n    return centers_opt, radii_opt\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "4cfc92be-9bac-4f54-a629-3061217c0edd", "generation": 4, "timestamp": 1750752435.8497756, "iteration_found": 66, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.1679050899377001, "target_ratio": 0.06372109675055032, "combined_score": 0.06372109675055032}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.1679\n- target_ratio: 0.0637\n- combined_score: 0.0637\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.2413)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized patterns\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3697), Performs well on target_ratio (0.8993), Performs well on combined_score (0.8993), Performs well on eval_time (51.0383)\n\n\n### Program 3 (Score: 0.2500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n### Program 4 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a Voronoi-based initialization,\nadaptive radii, and a physics-inspired optimization with enhanced collision resolution.\"\"\"\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a specialized pattern\n    centers = initialize_specialized_pattern(n)\n    \n    # Quick optimization to refine positions\n    centers = optimize_positions(centers, max_iterations=50)\n    \n    # Compute the maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern(n):\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing with n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    \n    # Create a base grid pattern with adjustments for corners and edges\n    # This pattern is based on known good configurations for n=26\n    \n    # First place circles in a 5x5 grid (25 circles)\n    grid_size = 5\n    spacing = 1.0 / (grid_size + 0.5)\n    offset = spacing / 2\n    \n    idx = 0\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if idx < n-1:  # Leave one position for special placement\n                centers[idx] = [offset + i * spacing, offset + j * spacing]\n                idx += 1\n    \n    # Place the last circle at a strategic position\n    centers[n-1] = [0.5, 0.5]\n    \n    # Apply a slight perturbation to break symmetry\n    centers += np.random.uniform(-0.01, 0.01, size=(n, 2))\n    \n    # Ensure all centers are within bounds\n    centers = np.clip(centers, 0.01, 0.99)\n    \n    return centers\n\ndef optimize_positions(centers, max_iterations=50):\n    \"\"\"\n    Optimize circle positions using a fast physics-based approach.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Parameters for the physics simulation\n    repulsion = 0.01\n    attraction_to_center = 0.001\n    border_force = 0.01\n    damping = 0.7\n    \n    # Velocities for momentum\n    velocities = np.zeros_like(centers)\n    \n    for iteration in range(max_iterations):\n        # Calculate forces between circles\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion (vectorized where possible)\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff**2, axis=1)\n            dist_sq[i] = 1.0  # Avoid self-interaction\n            \n            # Force is proportional to 1/r\u00b2\n            magnitude = repulsion / np.maximum(dist_sq, 0.0001)\n            direction = diff / np.sqrt(np.maximum(dist_sq, 0.0001))[:, np.newaxis]\n            \n            # Apply force to each circle\n            for j in range(n):\n                if j != i:\n                    forces[j] += direction[j] * magnitude[j]\n        \n        # Attraction to center of square\n        center_diff = np.array([0.5, 0.5]) - centers\n        forces += attraction_to_center * center_diff\n        \n        # Border repulsion\n        x, y = centers[:, 0], centers[:, 1]\n        forces[:, 0] += border_force * (1.0 / np.maximum(x, 0.001) - 1.0 / np.maximum(1.0 - x, 0.001))\n        forces[:, 1] += border_force * (1.0 / np.maximum(y, 0.001) - 1.0 / np.maximum(1.0 - y, 0.001))\n        \n        # Update velocities with damping\n        velocities = velocities * damping + forces\n        \n        # Update positions\n        centers += velocities\n        \n        # Ensure circles stay within bounds\n        centers = np.clip(centers, 0.01, 0.99)\n    \n    return centers\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    Uses an efficient algorithm that converges quickly.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    radii = np.minimum(centers[:, 0], centers[:, 1])\n    radii = np.minimum(radii, 1.0 - centers[:, 0])\n    radii = np.minimum(radii, 1.0 - centers[:, 1])\n    \n    # Then, limit by distance to other circles\n    for _ in range(3):  # Few iterations for speed\n        for i in range(n):\n            for j in range(i+1, n):  # Only check each pair once\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    # Proportionally adjust both radii\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    # Final refinement - ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                max_r = max(0.0, dist - radii[j])\n                radii[i] = min(radii[i], max_r)\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern and a more robust optimization strategy\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    \n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern(n)\n    \n    # Optimize positions and radii simultaneously\n    centers, radii = optimize_positions_and_radii(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern that combines grid-like and free placement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 9 circles in a 3x3 grid in the center\n    grid_size = 3\n    spacing = 0.3\n    offset_x = 0.5 - (grid_size - 1) * spacing / 2\n    offset_y = 0.5 - (grid_size - 1) * spacing / 2\n    \n    idx = 0\n    for i in range(grid_size):\n        for j in range(grid_size):\n            centers[idx] = [offset_x + i * spacing, offset_y + j * spacing]\n            radii[idx] = 0.08  # Initial guess\n            idx += 1\n    \n    # Place circles along the edges and corners\n    edge_positions = [\n        (0.1, 0.1), (0.1, 0.9), (0.9, 0.1), (0.9, 0.9), # Corners\n        (0.1, 0.3), (0.1, 0.5), (0.1, 0.7),             # Left edge\n        (0.9, 0.3), (0.9, 0.5), (0.9, 0.7),             # Right edge\n        (0.3, 0.1), (0.5, 0.1), (0.7, 0.1),             # Bottom edge\n        (0.3, 0.9), (0.5, 0.9), (0.7, 0.9)              # Top edge\n    ]\n    \n    for pos in edge_positions:\n        if idx < n:\n            centers[idx] = pos\n            radii[idx] = 0.07  # Initial guess\n            idx += 1\n            \n    # Remaining circles, place randomly\n    while idx < n:\n        centers[idx] = np.random.uniform(0.1, 0.9, size=2)\n        radii[idx] = 0.06\n        idx += 1\n        \n    return centers, radii\n\ndef optimize_positions_and_radii(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize.\n    \"\"\"\n    n = centers.shape[0]\n    \n    def objective_function(x):\n        \"\"\"\n        Objective function to minimize: negative sum of radii.\n        \"\"\"\n        radii = x[2*n:]\n        return -np.sum(radii)\n    \n    def constraint_overlap(x):\n        \"\"\"\n        Constraint: circles must not overlap.\n        \"\"\"\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap += max(0, radii[i] + radii[j] - dist)  # Penalize overlap\n        return -overlap # We want overlap to be as negative as possible\n    \n    def constraint_bounds(x):\n        \"\"\"\n        Constraint: circles must stay within the unit square.\n        \"\"\"\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        min_dist_to_border = np.min(np.concatenate([centers, 1 - centers]), axis=None)\n        min_radius = np.min(radii)\n        return min(min_dist_to_border - min_radius, min_radius)  # Ensure radii are non-negative and circles are inside\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds: positions within [0, 1], radii within [0.01, 0.5]\n    bounds = [(0.01, 0.99)] * (2*n) + [(0.01, 0.4)] * n\n    \n    # Constraints\n    constraints = [\n        {'type': 'ineq', 'fun': constraint_overlap},\n        {'type': 'ineq', 'fun': constraint_bounds}\n    ]\n    \n    # Optimization\n    result = minimize(objective_function, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 200})\n    \n    # Extract results\n    x_opt = result.x\n    centers_opt = x_opt[:2*n].reshape(n, 2)\n    radii_opt = x_opt[2*n:]\n    \n    # Ensure radii are non-negative\n    radii_opt = np.maximum(radii_opt, 0.01)\n\n    return centers_opt, radii_opt\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}