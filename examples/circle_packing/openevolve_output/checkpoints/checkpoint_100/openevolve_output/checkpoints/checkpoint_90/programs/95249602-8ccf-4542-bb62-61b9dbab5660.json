{"id": "95249602-8ccf-4542-bb62-61b9dbab5660", "code": "# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a hybrid pattern, adaptive radii, and efficient optimization with improved physics and initialization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize the packing\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle centers and radii using a hybrid approach:\n    - Corner circles\n    - Edge circles\n    - Central hexagonal arrangement\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # --- Corner Circles ---\n    radii[:4] = 0.075\n    centers[0] = [radii[0], radii[0]]\n    centers[1] = [1 - radii[1], radii[1]]\n    centers[2] = [radii[2], 1 - radii[2]]\n    centers[3] = [1 - radii[3], 1 - radii[3]]\n\n    # --- Edge Circles ---\n    radii[4:8] = 0.085\n    centers[4] = [0.5, radii[4]]\n    centers[5] = [0.5, 1 - radii[5]]\n    centers[6] = [radii[6], 0.5]\n    centers[7] = [1 - radii[7], 0.5]\n\n    radii[8:16] = 0.07\n    centers[8] = [0.25, radii[8]]\n    centers[9] = [0.75, radii[9]]\n    centers[10] = [0.25, 1 - radii[10]]\n    centers[11] = [0.75, 1 - radii[11]]\n    centers[12] = [radii[12], 0.25]\n    centers[13] = [radii[13], 0.75]\n    centers[14] = [1 - radii[14], 0.25]\n    centers[15] = [1 - radii[15], 0.75]\n\n    # --- Central Hexagonal Arrangement ---\n    radii[16] = 0.11\n    centers[16] = [0.5, 0.5]  # Center\n    \n    # First ring around the center\n    angles = np.linspace(0, 2 * np.pi, 6, endpoint=False) # 6 circles around the center\n    r_hex = 0.21 # Radius of the hexagonal ring\n    radii[17:23] = 0.065\n    centers[17:23] = centers[16] + r_hex * np.stack([np.cos(angles), np.sin(angles)], axis=-1)\n\n    # Second ring around the center (incomplete to reach 26)\n    angles2 = np.linspace(0, 2*np.pi, 7, endpoint=False)[:3]\n    r_hex2 = 0.40\n    radii[23:26] = 0.055\n    centers[23:26] = centers[16] + r_hex2 * np.stack([np.cos(angles2), np.sin(angles2)], axis=-1)\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.06\n    border_repulsion = 0.03\n    num_iterations = 750\n    damping = 0.92\n    radius_adjust_rate = 0.0005  # Rate to adjust radii based on forces\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n\n                    # Adjust radii based on overlap (smaller circles grow more)\n                    radius_adjust = radius_adjust_rate * overlap\n                    radii[i] += radius_adjust * (radii[j] / (radii[i] + 1e-9))\n                    radii[j] += radius_adjust * (radii[i] / (radii[j] + 1e-9))\n\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            if centers[i, 0] - radii[i] < 0:\n                forces[i, 0] += border_repulsion\n            # Right border\n            if centers[i, 0] + radii[i] > 1:\n                forces[i, 0] -= border_repulsion\n            # Bottom border\n            if centers[i, 1] - radii[i] < 0:\n                forces[i, 1] += border_repulsion\n            # Top border\n            if centers[i, 1] + radii[i] > 1:\n                forces[i, 1] -= border_repulsion\n        \n        # --- Apply Forces and Damping ---\n        centers += forces * (1 - damping)\n\n        # --- Adjust Radii ---\n        radii = compute_max_radii(centers)\n        \n        # --- Keep circles within bounds ---\n        centers[:, 0] = np.clip(centers[:, 0], radii + 0.001, 1 - radii - 0.001)\n        centers[:, 1] = np.clip(centers[:, 1], radii + 0.001, 1 - radii - 0.001)\n\n\n        # --- Normalize Radii ---\n        radii = np.clip(radii, 0.005, 0.5)  # Ensure radii are within reasonable bounds\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # --- Border Distance ---\n        radii[i] = min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])\n        \n        # --- Circle-Circle Distance ---\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                radii[i] = min(radii[i], (dist - (radii[j] + 1e-6)) / 1.0)  # Subtract a small epsilon.  Account for other radius.\n                \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "346ccda7-43df-4d64-93ab-0d1241705cb3", "generation": 7, "timestamp": 1750752890.0516558, "iteration_found": 77, "metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.7912992382099273, "target_ratio": 0.679809957574925, "combined_score": 0.679809957574925, "eval_time": 2.4253530502319336}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7913\n- target_ratio: 0.6798\n- combined_score: 0.6798\n- eval_time: 2.4254\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a hybrid pattern, adaptive radii, and efficient optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize the packing\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle centers and radii using a hybrid approach:\n    - Corner circles\n    - Edge circles\n    - Central hexagonal arrangement\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # --- Corner Circles ---\n    centers[0] = [0.1, 0.1]\n    centers[1] = [0.9, 0.1]\n    centers[2] = [0.1, 0.9]\n    centers[3] = [0.9, 0.9]\n    radii[:4] = 0.08 # Initial radius for corner circles\n\n    # --- Edge Circles ---\n    centers[4] = [0.5, 0.1]\n    centers[5] = [0.5, 0.9]\n    centers[6] = [0.1, 0.5]\n    centers[7] = [0.9, 0.5]\n    radii[4:8] = 0.09 # Initial radius for edge circles\n\n    centers[8] = [0.25, 0.1]\n    centers[9] = [0.75, 0.1]\n    centers[10] = [0.25, 0.9]\n    centers[11] = [0.75, 0.9]\n    centers[12] = [0.1, 0.25]\n    centers[13] = [0.1, 0.75]\n    centers[14] = [0.9, 0.25]\n    centers[15] = [0.9, 0.75]\n    radii[8:16] = 0.075\n\n    # --- Central Hexagonal Arrangement ---\n    centers[16] = [0.5, 0.5]  # Center\n    radii[16] = 0.12\n    \n    # First ring around the center\n    angles = np.linspace(0, 2 * np.pi, 9, endpoint=False)[:6] # 6 circles around the center\n    r_hex = 0.22 # Radius of the hexagonal ring\n    centers[17:23] = np.array([centers[16] + r_hex * np.array([np.cos(angle), np.sin(angle)]) for angle in angles])\n    radii[17:23] = 0.07\n\n    # Second ring around the center (incomplete to reach 26)\n    angles2 = np.linspace(0, 2*np.pi, 9, endpoint=False)[0:3]\n    r_hex2 = 0.42\n    centers[23:26] = np.array([centers[16] + r_hex2 * np.array([np.cos(angle), np.sin(angle)]) for angle in angles2])\n    radii[23:26] = 0.06\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.05\n    border_repulsion = 0.02\n    num_iterations = 500\n    damping = 0.9\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            if centers[i, 0] - radii[i] < 0:\n                forces[i, 0] += border_repulsion\n            # Right border\n            if centers[i, 0] + radii[i] > 1:\n                forces[i, 0] -= border_repulsion\n            # Bottom border\n            if centers[i, 1] - radii[i] < 0:\n                forces[i, 1] += border_repulsion\n            # Top border\n            if centers[i, 1] + radii[i] > 1:\n                forces[i, 1] -= border_repulsion\n        \n        # --- Apply Forces and Damping ---\n        centers += forces * (1 - damping)\n\n        # --- Adjust Radii ---\n        radii = compute_max_radii(centers)\n        \n        # --- Keep circles within bounds ---\n        centers[:, 0] = np.clip(centers[:, 0], radii + 0.001, 1 - radii - 0.001)\n        centers[:, 1] = np.clip(centers[:, 1], radii + 0.001, 1 - radii - 0.001)\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # --- Border Distance ---\n        radii[i] = min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])\n        \n        # --- Circle-Circle Distance ---\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                radii[i] = min(radii[i], (dist - 1e-6) / 2.0)  # Subtract a small epsilon\n                \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a hybrid pattern, adaptive radii, and efficient optimization with improved physics and initialization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize the packing\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle centers and radii using a hybrid approach:\n    - Corner circles\n    - Edge circles\n    - Central hexagonal arrangement\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # --- Corner Circles ---\n    radii[:4] = 0.075\n    centers[0] = [radii[0], radii[0]]\n    centers[1] = [1 - radii[1], radii[1]]\n    centers[2] = [radii[2], 1 - radii[2]]\n    centers[3] = [1 - radii[3], 1 - radii[3]]\n\n    # --- Edge Circles ---\n    radii[4:8] = 0.085\n    centers[4] = [0.5, radii[4]]\n    centers[5] = [0.5, 1 - radii[5]]\n    centers[6] = [radii[6], 0.5]\n    centers[7] = [1 - radii[7], 0.5]\n\n    radii[8:16] = 0.07\n    centers[8] = [0.25, radii[8]]\n    centers[9] = [0.75, radii[9]]\n    centers[10] = [0.25, 1 - radii[10]]\n    centers[11] = [0.75, 1 - radii[11]]\n    centers[12] = [radii[12], 0.25]\n    centers[13] = [radii[13], 0.75]\n    centers[14] = [1 - radii[14], 0.25]\n    centers[15] = [1 - radii[15], 0.75]\n\n    # --- Central Hexagonal Arrangement ---\n    radii[16] = 0.11\n    centers[16] = [0.5, 0.5]  # Center\n    \n    # First ring around the center\n    angles = np.linspace(0, 2 * np.pi, 6, endpoint=False) # 6 circles around the center\n    r_hex = 0.21 # Radius of the hexagonal ring\n    radii[17:23] = 0.065\n    centers[17:23] = centers[16] + r_hex * np.stack([np.cos(angles), np.sin(angles)], axis=-1)\n\n    # Second ring around the center (incomplete to reach 26)\n    angles2 = np.linspace(0, 2*np.pi, 7, endpoint=False)[:3]\n    r_hex2 = 0.40\n    radii[23:26] = 0.055\n    centers[23:26] = centers[16] + r_hex2 * np.stack([np.cos(angles2), np.sin(angles2)], axis=-1)\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the circle packing arrangement using a physics-based simulation.\n    \"\"\"\n    n = centers.shape[0]\n    repulsion_strength = 0.06\n    border_repulsion = 0.03\n    num_iterations = 750\n    damping = 0.92\n    radius_adjust_rate = 0.0005  # Rate to adjust radii based on forces\n    \n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n        \n        # --- Circle-Circle Repulsion ---\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    force_magnitude = repulsion_strength * overlap\n                    forces[i] += direction * force_magnitude\n                    forces[j] -= direction * force_magnitude\n\n                    # Adjust radii based on overlap (smaller circles grow more)\n                    radius_adjust = radius_adjust_rate * overlap\n                    radii[i] += radius_adjust * (radii[j] / (radii[i] + 1e-9))\n                    radii[j] += radius_adjust * (radii[i] / (radii[j] + 1e-9))\n\n        \n        # --- Border Repulsion ---\n        for i in range(n):\n            # Left border\n            if centers[i, 0] - radii[i] < 0:\n                forces[i, 0] += border_repulsion\n            # Right border\n            if centers[i, 0] + radii[i] > 1:\n                forces[i, 0] -= border_repulsion\n            # Bottom border\n            if centers[i, 1] - radii[i] < 0:\n                forces[i, 1] += border_repulsion\n            # Top border\n            if centers[i, 1] + radii[i] > 1:\n                forces[i, 1] -= border_repulsion\n        \n        # --- Apply Forces and Damping ---\n        centers += forces * (1 - damping)\n\n        # --- Adjust Radii ---\n        radii = compute_max_radii(centers)\n        \n        # --- Keep circles within bounds ---\n        centers[:, 0] = np.clip(centers[:, 0], radii + 0.001, 1 - radii - 0.001)\n        centers[:, 1] = np.clip(centers[:, 1], radii + 0.001, 1 - radii - 0.001)\n\n\n        # --- Normalize Radii ---\n        radii = np.clip(radii, 0.005, 0.5)  # Ensure radii are within reasonable bounds\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    for i in range(n):\n        # --- Border Distance ---\n        radii[i] = min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])\n        \n        # --- Circle-Circle Distance ---\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                radii[i] = min(radii[i], (dist - (radii[j] + 1e-6)) / 1.0)  # Subtract a small epsilon.  Account for other radius.\n                \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}