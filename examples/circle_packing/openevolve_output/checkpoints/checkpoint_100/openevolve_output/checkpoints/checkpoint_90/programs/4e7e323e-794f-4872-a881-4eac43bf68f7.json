{"id": "4e7e323e-794f-4872-a881-4eac43bf68f7", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize using a combination of methods\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Refine radii and positions\n    centers, radii = refine_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle positions and radii using a hybrid approach.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 1. Central Circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.2\n\n    # 2. Hexagonal Ring (6 circles)\n    r1 = 0.35  # Radius of the ring\n    radius_ring1 = 0.13\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = radius_ring1\n\n    # 3. Second Ring (12 circles)\n    r2 = 0.65\n    radius_ring2 = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = radius_ring2\n\n    # 4. Corner Circles (4 circles) - smaller radii\n    radii_corner = 0.07\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.9, 0.1]\n    centers[21] = [0.1, 0.9]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = radii_corner\n\n    # 5. Edge Circles (3 circles) - smaller radii\n    radii_edge = 0.07\n    centers[23] = [0.5, 0.05]\n    centers[24] = [0.05, 0.5]\n    centers[25] = [0.95, 0.5]\n    radii[23:26] = radii_edge\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii, iterations=400):\n    \"\"\"\n    Optimize packing using a physics-based approach with adaptive radii.\n    \"\"\"\n    n = centers.shape[0]\n    centers = centers.copy()\n    radii = radii.copy()\n\n    # Optimization parameters\n    repulsion_strength = 0.03\n    border_strength = 0.04\n    damping = 0.8\n    velocity = np.zeros_like(centers)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    forces[i] += repulsion_strength * overlap * direction\n                    forces[j] -= repulsion_strength * overlap * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            if x - r < 0:\n                forces[i, 0] += border_strength * (r - x)\n            if x + r > 1:\n                forces[i, 0] -= border_strength * (x + r - 1)\n            if y - r < 0:\n                forces[i, 1] += border_strength * (r - y)\n            if y + r > 1:\n                forces[i, 1] -= border_strength * (y + r - 1)\n\n        # Update positions\n        velocity = damping * velocity + forces\n        centers += velocity\n\n        # Adjust radii based on current positions (adaptive radii)\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, avoiding overlaps and staying within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    for i in range(n):\n        # Distance to borders\n        radii[i] = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                radii[i] = min(radii[i], (dist - radii[j]) * 0.99) # Slightly reduce to prevent overlap\n\n        radii[i] = max(radii[i], 0.01) # Ensure a minimum radius\n\n    return radii\n\ndef refine_packing(centers, radii, iterations=50):\n    \"\"\"\n    Refine the packing using gradient descent to optimize the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    centers = centers.copy()\n    radii = radii.copy()\n\n    def objective_function(x):\n        \"\"\"\n        Objective function to minimize the negative sum of radii.\n        x: flattened array of centers and radii (interleaved)\n        \"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for overlaps and out-of-bounds\n        penalty = 0.0\n        for i in range(n):\n            # Out of bounds penalty\n            penalty += max(0, current_radii[i] - current_centers[i][0]) * 100\n            penalty += max(0, current_radii[i] - current_centers[i][1]) * 100\n            penalty += max(0, current_centers[i][0] + current_radii[i] - 1) * 100\n            penalty += max(0, current_centers[i][1] + current_radii[i] - 1) * 100\n\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                overlap = current_radii[i] + current_radii[j] - dist\n                penalty += max(0, overlap) * 100  # Overlap penalty\n\n        return -np.sum(current_radii) + penalty\n\n    # Initial guess: flattened centers and radii\n    initial_guess = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for centers (0 to 1) and radii (0 to 0.5)\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.4)] * n  # Radius between 0.01 and 0.4\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective_function, initial_guess, method='L-BFGS-B', bounds=bounds, options={'maxiter': iterations})\n\n    # Extract optimized centers and radii\n    optimized_centers = result.x[:2 * n].reshape(n, 2)\n    optimized_radii = result.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "46262482-ee17-4c24-8789-21ee4eb87829", "generation": 5, "timestamp": 1750752765.3634274, "iteration_found": 70, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.8986416675359539, "target_ratio": 0.3410404810383127, "combined_score": 0.3410404810383127, "eval_time": 75.06479597091675}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.8986\n- target_ratio: 0.3410\n- combined_score: 0.3410\n- eval_time: 75.0648\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: eval_time. Consider continuing with similar changes.\n- Metrics showing regression: sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a refined initialization, physics-based optimization, and gradient descent.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii with improved initialization and optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a specialized pattern for n=26\n    centers, radii = initialize_specialized_pattern()\n    \n    # Apply physics-based optimization with multiple stages\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n    \n    # Apply local refinements\n    centers, radii = local_refinement(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern based on mathematical principles\n    for efficient circle packing with n=26 circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place one large circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.19\n    \n    # First ring - 6 circles in hexagonal arrangement\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+1] = [0.5 + 0.36 * np.cos(angle), 0.5 + 0.36 * np.sin(angle)]\n        radii[i+1] = 0.15\n    \n    # Second ring - 12 circles\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i+7] = [0.5 + 0.68 * np.cos(angle), 0.5 + 0.68 * np.sin(angle)]\n        radii[i+7] = 0.11\n    \n    # Corner circles - 4 circles\n    centers[19] = [0.13, 0.13]\n    centers[20] = [0.87, 0.13]\n    centers[21] = [0.13, 0.87]\n    centers[22] = [0.87, 0.87]\n    radii[19:23] = 0.09\n    \n    # Edge circles - 3 circles to fill gaps\n    centers[23] = [0.5, 0.09]\n    centers[24] = [0.09, 0.5]\n    centers[25] = [0.91, 0.5]\n    radii[23:26] = 0.09\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, iterations=300):\n    \"\"\"\n    Physics-based optimization to maximize the sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        iterations: Number of optimization iterations\n    \n    Returns:\n        Tuple of (optimized_centers, optimized_radii)\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Copy inputs to avoid modifying originals\n    centers = centers.copy()\n    radii = radii.copy()\n    \n    # Optimization parameters\n    repulsion_strength = 0.02\n    attraction_strength = 0.01\n    border_strength = 0.03\n    damping = 0.7\n    \n    # Velocity for momentum-based updates\n    velocities = np.zeros_like(centers)\n    \n    # Main optimization loop\n    for iter in range(iterations):\n        # Decay parameters over time\n        decay_factor = 1.0 - iter / iterations\n        current_repulsion = repulsion_strength * decay_factor\n        current_attraction = attraction_strength * (1.0 - decay_factor * 0.5)\n        \n        # Calculate forces between circles\n        forces = np.zeros_like(centers)\n        \n        # Repulsive forces to avoid overlap\n        for i in range(n):\n            for j in range(i+1, n):\n                direction = centers[i] - centers[j]\n                distance = np.linalg.norm(direction)\n                if distance < 1e-10:\n                    # Avoid division by zero by adding random jitter\n                    direction = np.random.uniform(-0.01, 0.01, 2)\n                    distance = np.linalg.norm(direction)\n                \n                # Normalized direction\n                direction = direction / distance\n                \n                # Calculate overlap\n                overlap = radii[i] + radii[j] - distance\n                \n                # Apply repulsive force if overlapping\n                if overlap > 0:\n                    repulsion = direction * overlap * current_repulsion\n                    forces[i] += repulsion\n                    forces[j] -= repulsion\n        \n        # Attractive forces toward center\n        for i in range(n):\n            direction = np.array([0.5, 0.5]) - centers[i]\n            distance = np.linalg.norm(direction)\n            if distance > 1e-10:\n                direction = direction / distance\n                attraction = direction * distance * current_attraction\n                forces[i] += attraction\n        \n        # Border forces to keep circles inside\n        for i in range(n):\n            # Left border\n            if centers[i, 0] - radii[i] < 0:\n                forces[i, 0] += border_strength * (0 - (centers[i, 0] - radii[i]))\n            \n            # Right border\n            if centers[i, 0] + radii[i] > 1:\n                forces[i, 0] -= border_strength * ((centers[i, 0] + radii[i]) - 1)\n            \n            # Bottom border\n            if centers[i, 1] - radii[i] < 0:\n                forces[i, 1] += border_strength * (0 - (centers[i, 1] - radii[i]))\n            \n            # Top border\n            if centers[i, 1] + radii[i] > 1:\n                forces[i, 1] -= border_strength * ((centers[i, 1] + radii[i]) - 1)\n        \n        # Update velocities with damping\n        velocities = velocities * damping + forces\n        \n        # Update positions\n        centers += velocities\n        \n        # Recalculate radii every few iterations\n        if iter % 10 == 0 or iter == iterations - 1:\n            radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n    \n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(5):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally\n                        ratio = dist / (radii[i] + radii[j])\n                        radii[i] *= ratio * 0.999  # Small safety factor\n                        radii[j] *= ratio * 0.999\n    \n    return radii\n\n\ndef local_refinement(centers, radii, iterations=50):\n    \"\"\"\n    Apply local refinements to improve the packing quality.\n    \n    Args:\n        centers: Circle centers\n        radii: Circle radii\n        iterations: Number of refinement iterations\n    \n    Returns:\n        Tuple of (refined_centers, refined_radii)\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Copy inputs to avoid modifying originals\n    centers = centers.copy()\n    radii = radii.copy()\n    \n    # Parameters for local refinement\n    step_size = 0.005\n    \n    for _ in range(iterations):\n        for i in range(n):\n            # Try small movements in different directions\n            best_sum = np.sum(radii)\n            best_move = np.zeros(2)\n            \n            for dx, dy in [(step_size, 0), (-step_size, 0), (0, step_size), (0, -step_size)]:\n                # Move center temporarily\n                original_pos = centers[i].copy()\n                centers[i] += np.array([dx, dy])\n                \n                # Recalculate radii\n                new_radii = compute_max_radii(centers)\n                new_sum = np.sum(new_radii)\n                \n                # Keep the move if it improves the sum\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_move = np.array([dx, dy])\n                \n                # Restore original position\n                centers[i] = original_pos\n            \n            # Apply the best move found\n            centers[i] += best_move\n        \n        # Recalculate radii after all refinements\n        radii = compute_max_radii(centers)\n    \n    # Special patterns for n=26 from literature\n    # Try a specific arrangement known to be effective\n    special_centers = np.zeros_like(centers)\n    \n    # Create a specialized pattern with variable-sized circles\n    # Center circle\n    special_centers[0] = [0.5, 0.5]\n    \n    # Inner ring - 6 circles\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        special_centers[i+1] = [0.5 + 0.35 * np.cos(angle), 0.5 + 0.35 * np.sin(angle)]\n    \n    # Outer ring - 12 circles\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        special_centers[i+7] = [0.5 + 0.67 * np.cos(angle), 0.5 + 0.67 * np.sin(angle)]\n    \n    # Corner circles\n    special_centers[19] = [0.12, 0.12]\n    special_centers[20] = [0.88, 0.12]\n    special_centers[21] = [0.12, 0.88]\n    special_centers[22] = [0.88, 0.88]\n    \n    # Edge circles\n    special_centers[23] = [0.5, 0.08]\n    special_centers[24] = [0.08, 0.5]\n    special_centers[25] = [0.92, 0.5]\n    \n    # Calculate radii for the special pattern\n    special_radii = compute_max_radii(special_centers)\n    \n    # Keep the better solution\n    if np.sum(special_radii) > np.sum(radii):\n        centers = special_centers\n        radii = special_radii\n    \n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a hybrid pattern\n    centers, radii = initialize_hybrid_pattern()\n\n    # Optimize using a combination of methods\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Refine radii and positions\n    centers, radii = refine_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern():\n    \"\"\"\n    Initialize circle positions and radii using a hybrid approach.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 1. Central Circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.2\n\n    # 2. Hexagonal Ring (6 circles)\n    r1 = 0.35  # Radius of the ring\n    radius_ring1 = 0.13\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = radius_ring1\n\n    # 3. Second Ring (12 circles)\n    r2 = 0.65\n    radius_ring2 = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = radius_ring2\n\n    # 4. Corner Circles (4 circles) - smaller radii\n    radii_corner = 0.07\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.9, 0.1]\n    centers[21] = [0.1, 0.9]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = radii_corner\n\n    # 5. Edge Circles (3 circles) - smaller radii\n    radii_edge = 0.07\n    centers[23] = [0.5, 0.05]\n    centers[24] = [0.05, 0.5]\n    centers[25] = [0.95, 0.5]\n    radii[23:26] = radii_edge\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii, iterations=400):\n    \"\"\"\n    Optimize packing using a physics-based approach with adaptive radii.\n    \"\"\"\n    n = centers.shape[0]\n    centers = centers.copy()\n    radii = radii.copy()\n\n    # Optimization parameters\n    repulsion_strength = 0.03\n    border_strength = 0.04\n    damping = 0.8\n    velocity = np.zeros_like(centers)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    direction = (centers[i] - centers[j]) / dist\n                    forces[i] += repulsion_strength * overlap * direction\n                    forces[j] -= repulsion_strength * overlap * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            if x - r < 0:\n                forces[i, 0] += border_strength * (r - x)\n            if x + r > 1:\n                forces[i, 0] -= border_strength * (x + r - 1)\n            if y - r < 0:\n                forces[i, 1] += border_strength * (r - y)\n            if y + r > 1:\n                forces[i, 1] -= border_strength * (y + r - 1)\n\n        # Update positions\n        velocity = damping * velocity + forces\n        centers += velocity\n\n        # Adjust radii based on current positions (adaptive radii)\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle, avoiding overlaps and staying within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    for i in range(n):\n        # Distance to borders\n        radii[i] = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j])\n                radii[i] = min(radii[i], (dist - radii[j]) * 0.99) # Slightly reduce to prevent overlap\n\n        radii[i] = max(radii[i], 0.01) # Ensure a minimum radius\n\n    return radii\n\ndef refine_packing(centers, radii, iterations=50):\n    \"\"\"\n    Refine the packing using gradient descent to optimize the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    centers = centers.copy()\n    radii = radii.copy()\n\n    def objective_function(x):\n        \"\"\"\n        Objective function to minimize the negative sum of radii.\n        x: flattened array of centers and radii (interleaved)\n        \"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for overlaps and out-of-bounds\n        penalty = 0.0\n        for i in range(n):\n            # Out of bounds penalty\n            penalty += max(0, current_radii[i] - current_centers[i][0]) * 100\n            penalty += max(0, current_radii[i] - current_centers[i][1]) * 100\n            penalty += max(0, current_centers[i][0] + current_radii[i] - 1) * 100\n            penalty += max(0, current_centers[i][1] + current_radii[i] - 1) * 100\n\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                overlap = current_radii[i] + current_radii[j] - dist\n                penalty += max(0, overlap) * 100  # Overlap penalty\n\n        return -np.sum(current_radii) + penalty\n\n    # Initial guess: flattened centers and radii\n    initial_guess = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for centers (0 to 1) and radii (0 to 0.5)\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.4)] * n  # Radius between 0.01 and 0.4\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective_function, initial_guess, method='L-BFGS-B', bounds=bounds, options={'maxiter': iterations})\n\n    # Extract optimized centers and radii\n    optimized_centers = result.x[:2 * n].reshape(n, 2)\n    optimized_radii = result.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}