{"id": "09da4b3b-0c8e-4645-91bb-e1843b59b354", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers, radii = initialize_packing(n)\n    centers, radii = optimize_packing(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_packing(n):\n    \"\"\"Initializes the circle packing with a hybrid approach, prioritizing corner and edge placement.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 larger circles in the corners\n    centers[:4] = np.array([[0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9]])\n    radii[:4] = 0.12\n\n    # Place 8 circles along the edges\n    centers[4:12] = np.array([[0.5, 0.1], [0.1, 0.5], [0.9, 0.5], [0.5, 0.9],\n                                [0.25, 0.1], [0.1, 0.25], [0.75, 0.9], [0.9, 0.75]])\n    radii[4:12] = 0.09\n\n    # Place the remaining 14 circles randomly in the center\n    centers[12:] = np.random.rand(n - 12, 2) * 0.6 + 0.2  # Confine to center\n    radii[12:] = np.random.rand(n - 12) * 0.06 + 0.06\n\n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=300, repulsion_factor=0.15, border_repulsion=0.07, step_size=0.01):\n    \"\"\"Optimizes the circle packing using a physics-based simulation with enhanced collision resolution.\"\"\"\n    n = len(centers)\n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += direction * overlap * repulsion_factor\n\n            # Add repulsive forces from the borders\n            forces[i, 0] += border_repulsion / (centers[i, 0] + 1e-6) - border_repulsion / (1 - centers[i, 0] + 1e-6)\n            forces[i, 1] += border_repulsion / (centers[i, 1] + 1e-6) - border_repulsion / (1 - centers[i, 1] + 1e-6)\n\n        # Update positions based on forces\n        centers += forces * step_size\n\n        # Keep circles within the unit square\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Adjust radii to avoid overlaps - more robust approach\n        for i in range(n):\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    min_dist = min(min_dist, dist - radii[j])\n\n            # Dynamically adjust radius based on available space\n            radii[i] = min(radii[i], 0.5 * min_dist, centers[i, 0], centers[i, 1], 1 - centers[i, 0], 1 - centers[i, 1])\n            radii[i] = max(radii[i], 0.001)  # Ensure radii are not zero\n\n        # Adaptive step size - slower decay\n        step_size *= 0.995\n\n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "bab6540e-73d1-415e-a581-3b06139bd65e", "generation": 5, "timestamp": 1750751245.8094752, "iteration_found": 36, "metrics": {"validity": 1.0, "sum_radii": 0.3445785844912615, "target_ratio": 0.13076986128700627, "combined_score": 0.13076986128700627}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.5774299089113852, "target_ratio": 0.21913848535536443, "combined_score": 0.21913848535536443, "eval_time": 1.450915813446045}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.5774\n- target_ratio: 0.2191\n- combined_score: 0.2191\n- eval_time: 1.4509\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.6550)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.9056), Performs well on target_ratio (0.3437), Performs well on combined_score (0.3437), Performs well on eval_time (0.6818)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers, radii = initialize_packing(n)\n    centers, radii = optimize_packing(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_packing(n):\n    \"\"\"Initializes the circle packing with a hybrid approach.\"\"\"\n    centers = np.random.rand(n, 2) * 0.8 + 0.1  # Initialize within tighter bounds\n    radii = np.random.rand(n) * 0.05 + 0.05  # Initialize radii with a smaller range\n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=200, repulsion_factor=0.1, border_repulsion=0.05, step_size=0.01):\n    \"\"\"Optimizes the circle packing using a physics-based simulation.\"\"\"\n    n = len(centers)\n    for iteration in range(iterations):\n        # Calculate repulsive forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        direction = (centers[i] - centers[j]) / dist\n                        forces[i] += direction * overlap * repulsion_factor\n\n            # Add repulsive forces from the borders\n            forces[i, 0] += border_repulsion / (centers[i, 0] + 1e-6) - border_repulsion / (1 - centers[i, 0] + 1e-6)\n            forces[i, 1] += border_repulsion / (centers[i, 1] + 1e-6) - border_repulsion / (1 - centers[i, 1] + 1e-6)\n\n        # Update positions based on forces\n        centers += forces * step_size\n\n        # Keep circles within the unit square\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Adjust radii to avoid overlaps\n        for i in range(n):\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    min_dist = min(min_dist, dist - radii[j])\n            radii[i] = min(radii[i], min_dist, centers[i, 0], centers[i, 1], 1 - centers[i, 0], 1 - centers[i, 1])\n            radii[i] = max(radii[i], 0.001)  # Ensure radii are not zero\n\n        # Adaptive step size\n        step_size *= 0.99\n\n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers, radii = initialize_packing(n)\n    centers, radii = optimize_packing(centers, radii)\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_packing(n):\n    \"\"\"Initializes the circle packing with a hybrid approach, prioritizing corner and edge placement.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 larger circles in the corners\n    centers[:4] = np.array([[0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9]])\n    radii[:4] = 0.12\n\n    # Place 8 circles along the edges\n    centers[4:12] = np.array([[0.5, 0.1], [0.1, 0.5], [0.9, 0.5], [0.5, 0.9],\n                                [0.25, 0.1], [0.1, 0.25], [0.75, 0.9], [0.9, 0.75]])\n    radii[4:12] = 0.09\n\n    # Place the remaining 14 circles randomly in the center\n    centers[12:] = np.random.rand(n - 12, 2) * 0.6 + 0.2  # Confine to center\n    radii[12:] = np.random.rand(n - 12) * 0.06 + 0.06\n\n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=300, repulsion_factor=0.15, border_repulsion=0.07, step_size=0.01):\n    \"\"\"Optimizes the circle packing using a physics-based simulation with enhanced collision resolution.\"\"\"\n    n = len(centers)\n    for iteration in range(iterations):\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += direction * overlap * repulsion_factor\n\n            # Add repulsive forces from the borders\n            forces[i, 0] += border_repulsion / (centers[i, 0] + 1e-6) - border_repulsion / (1 - centers[i, 0] + 1e-6)\n            forces[i, 1] += border_repulsion / (centers[i, 1] + 1e-6) - border_repulsion / (1 - centers[i, 1] + 1e-6)\n\n        # Update positions based on forces\n        centers += forces * step_size\n\n        # Keep circles within the unit square\n        centers = np.clip(centers, 0.001, 0.999)\n\n        # Adjust radii to avoid overlaps - more robust approach\n        for i in range(n):\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    min_dist = min(min_dist, dist - radii[j])\n\n            # Dynamically adjust radius based on available space\n            radii[i] = min(radii[i], 0.5 * min_dist, centers[i, 0], centers[i, 1], 1 - centers[i, 0], 1 - centers[i, 1])\n            radii[i] = max(radii[i], 0.001)  # Ensure radii are not zero\n\n        # Adaptive step size - slower decay\n        step_size *= 0.995\n\n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}