{"id": "ac346869-2ce5-4537-a052-23c7813370f5", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and adaptive optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # 1. Initialize with a layered pattern: larger circles in the center, smaller towards edges\n    centers, radii = initialize_layered_pattern()\n\n    # 2. Optimize radii using a constrained optimization routine\n    centers, radii = optimize_radii(centers, radii)\n\n    # 3. Optimize positions using a force-directed approach with adaptive parameters\n    centers = optimize_positions(centers, radii)\n\n    # 4. Final refinement using scipy's minimize function\n    centers, radii = refine_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_layered_pattern():\n    \"\"\"Initialize with larger circles in the center and smaller ones towards the edges\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place a larger circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Place a ring of circles around the center\n    num_ring1 = 6\n    radius_ring1 = 0.3\n    for i in range(num_ring1):\n        angle = 2 * np.pi * i / num_ring1\n        centers[1 + i] = [0.5 + radius_ring1 * np.cos(angle), 0.5 + radius_ring1 * np.sin(angle)]\n        radii[1 + i] = 0.09\n\n    # Place a second ring of circles\n    num_ring2 = 12\n    radius_ring2 = 0.45\n    for i in range(num_ring2):\n        angle = 2 * np.pi * i / num_ring2\n        centers[1 + num_ring1 + i] = [0.5 + radius_ring2 * np.cos(angle), 0.5 + radius_ring2 * np.sin(angle)]\n        radii[1 + num_ring1 + i] = 0.07\n\n    # Fill the remaining spots with smaller circles near the corners\n    centers[1 + num_ring1 + num_ring2] = [0.15, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 1] = [0.85, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 2] = [0.15, 0.85]\n    centers[1 + num_ring1 + num_ring2 + 3] = [0.85, 0.85]\n    centers[1 + num_ring1 + num_ring2 + 4] = [0.5, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 5] = [0.5, 0.85]\n    radii[1 + num_ring1 + num_ring2:] = 0.06\n\n    return centers, radii\n\n\ndef optimize_radii(centers, radii):\n    \"\"\"Optimize radii while maintaining non-overlapping constraints\"\"\"\n    n = len(centers)\n\n    def objective(radii):\n        return -np.sum(radii)  # Maximize sum of radii\n\n    def constraint(radii):\n        # Ensure no overlaps and stay within the unit square\n        constraints = []\n        for i in range(n):\n            # Border constraints\n            constraints.append(radii[i] - centers[i][0])  # x > r\n            constraints.append(radii[i] - centers[i][1])  # y > r\n            constraints.append(radii[i] + centers[i][0] - 1)  # x < 1 - r\n            constraints.append(radii[i] + centers[i][1] - 1)  # y < 1 - r\n\n            for j in range(i + 1, n):\n                # Non-overlapping constraints\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                constraints.append(dist - radii[i] - radii[j])  # dist > r_i + r_j\n        return np.array(constraints)\n\n    # Initial guess for radii\n    initial_radii = radii.copy()\n\n    # Define constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Define bounds for radii\n    bnds = [(0.001, 0.2) for _ in range(n)]  # Ensure radii are positive\n\n    # Run optimization\n    result = minimize(objective, initial_radii, method='SLSQP', bounds=bnds, constraints=cons, options={'maxiter': 150})\n    optimized_radii = result.x\n\n    return centers, optimized_radii\n\n\ndef optimize_positions(centers, radii):\n    \"\"\"Optimize circle positions using a force-directed approach\"\"\"\n    n = len(centers)\n    repulsion_force = 0.01\n    border_force = 0.02\n    iterations = 80\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                distance = np.linalg.norm(centers[i] - centers[j])\n                min_distance = radii[i] + radii[j]\n                if distance < min_distance:\n                    overlap = min_distance - distance\n                    direction = (centers[i] - centers[j]) / distance  # Normalize\n\n                    # Apply forces proportionally to radii\n                    force_magnitude = repulsion_force * overlap\n                    forces[i] += force_magnitude * direction\n                    forces[j] -= force_magnitude * direction\n\n        # Calculate border forces\n        for i in range(n):\n            x, y = centers[i]\n\n            if x - radii[i] < 0:\n                forces[i, 0] += border_force\n            if x + radii[i] > 1:\n                forces[i, 0] -= border_force\n            if y - radii[i] < 0:\n                forces[i, 1] += border_force\n            if y + radii[i] > 1:\n                forces[i, 1] -= border_force\n\n        # Update positions\n        centers += forces * 0.1  # Dampening factor\n\n        # Clip positions to stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers\n\n\ndef refine_packing(centers, radii):\n    \"\"\"Refine packing using scipy's minimize function to directly optimize positions\"\"\"\n    n = len(centers)\n\n    def objective(positions):\n        # Reshape positions to (n, 2) array\n        reshaped_positions = positions.reshape((n, 2))\n\n        # Calculate radii based on current positions\n        current_radii = compute_max_radii(reshaped_positions)\n\n        # Return negative sum of radii (since we want to maximize)\n        return -np.sum(current_radii)\n\n    # Flatten centers array for optimization\n    initial_positions = centers.flatten()\n\n    # Define bounds for positions (within the unit square)\n    bounds = [(0, 1) for _ in range(2 * n)]\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective, initial_positions, method='L-BFGS-B', bounds=bounds, options={'maxiter': 100})\n\n    # Reshape optimized positions\n    optimized_centers = result.x.reshape((n, 2))\n    optimized_radii = compute_max_radii(optimized_centers)\n\n    return optimized_centers, optimized_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n\n    # Limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                radii[i] = min(radii[i], (dist - radii[j]) / 2)\n    radii = np.maximum(radii, 0.001) # Ensure radii are positive\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "be1e1f69-eb1c-4b15-92bf-0c2fa154134c", "generation": 3, "timestamp": 1750752313.8460753, "iteration_found": 62, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0, "eval_time": 5.365898847579956}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- eval_time: 5.3659\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.2413)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized patterns\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3697), Performs well on target_ratio (0.8993), Performs well on combined_score (0.8993), Performs well on eval_time (51.0383)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, adaptive radii, and refined physics-based optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and adaptive radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: index 26 is out of bounds for axis 0 with size 26)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a Voronoi-based initialization,\n   force-directed optimization, and adaptive radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a multi-stage approach with enhanced initialization and optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Efficient circle packing for n=26 circles using deterministic construction and fast optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a carefully designed pattern\n    centers = initialize_pattern()\n    \n    # Apply fast optimization\n    centers = optimize_packing(centers)\n    \n    # Calculate final radii\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern():\n    \"\"\"Initialize with a mathematically optimized pattern for n=26\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Position circles in a pattern that combines:\n    # - 5x5 grid arrangement (25 circles)\n    # - 1 central larger circle\n    \n    # First place the central large circle\n    centers[0] = [0.5, 0.5]\n    \n    # Place 5x5 grid (minus the center)\n    idx = 1\n    grid_size = 5\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if not (i == grid_size//2 and j == grid_size//2):  # Skip the center\n                # Distribute evenly across the unit square with margin\n                x = 0.1 + 0.8 * i / (grid_size - 1)\n                y = 0.1 + 0.8 * j / (grid_size - 1)\n                centers[idx] = [x, y]\n                idx += 1\n    \n    return centers\n\n\ndef optimize_packing(centers):\n    \"\"\"Fast optimization to improve circle positions\"\"\"\n    n = centers.shape[0]\n    \n    # Parameters for force-directed optimization\n    repulsion = 0.01\n    attraction = 0.005\n    border_force = 0.02\n    iterations = 50\n    \n    for _ in range(iterations):\n        # Calculate current radii\n        radii = compute_max_radii(centers)\n        \n        # Calculate forces between circles\n        forces = np.zeros_like(centers)\n        \n        # Repulsive forces between circles\n        for i in range(n):\n            for j in range(i+1, n):\n                direction = centers[i] - centers[j]\n                distance = np.linalg.norm(direction)\n                if distance > 0:\n                    # Normalize direction\n                    direction = direction / distance\n                    \n                    # Force inversely proportional to distance\n                    force_magnitude = repulsion / (distance**2)\n                    \n                    # Apply force to both circles in opposite directions\n                    force = force_magnitude * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Attractive forces toward optimal positions\n        for i in range(n):\n            # For the central circle, attract to center\n            if i == 0:\n                center_force = (np.array([0.5, 0.5]) - centers[i]) * attraction * 2\n                forces[i] += center_force\n            else:\n                # For grid circles, attract to their initial positions\n                grid_i = (i - 1) // 5\n                grid_j = (i - 1) % 5\n                if grid_i == 2 and grid_j == 2:  # Adjust for central circle\n                    grid_j += 1\n                \n                target_x = 0.1 + 0.8 * grid_i / 4\n                target_y = 0.1 + 0.8 * grid_j / 4\n                \n                grid_force = (np.array([target_x, target_y]) - centers[i]) * attraction\n                forces[i] += grid_force\n        \n        # Border forces to keep circles inside\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Push away from borders if too close\n            if x - r < 0:\n                forces[i, 0] += border_force\n            if x + r > 1:\n                forces[i, 0] -= border_force\n            if y - r < 0:\n                forces[i, 1] += border_force\n            if y + r > 1:\n                forces[i, 1] -= border_force\n        \n        # Apply forces to update positions\n        centers += forces\n        \n        # Ensure circles stay within bounds\n        centers = np.clip(centers, 0.01, 0.99)\n    \n    # Final refinement with direct optimization\n    centers = refine_positions(centers)\n    \n    return centers\n\n\ndef refine_positions(centers):\n    \"\"\"Final refinement to maximize sum of radii\"\"\"\n    n = centers.shape[0]\n    best_centers = centers.copy()\n    best_sum = np.sum(compute_max_radii(centers))\n    \n    # Simple hill climbing with small random perturbations\n    for _ in range(30):\n        for i in range(n):\n            # Try small random moves for each circle\n            test_centers = best_centers.copy()\n            \n            # Random perturbation\n            test_centers[i, 0] += np.random.uniform(-0.02, 0.02)\n            test_centers[i, 1] += np.random.uniform(-0.02, 0.02)\n            \n            # Keep within bounds\n            test_centers[i] = np.clip(test_centers[i], 0.01, 0.99)\n            \n            # Check if improvement\n            test_radii = compute_max_radii(test_centers)\n            test_sum = np.sum(test_radii)\n            \n            if test_sum > best_sum:\n                best_centers = test_centers.copy()\n                best_sum = test_sum\n    \n    return best_centers\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n    \n    # Limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    # Proportionally reduce both radii\n                    ratio = dist / (radii[i] + radii[j])\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    # One more pass to ensure no overlaps\n    for _ in range(2):\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                if dist < radii[i] + radii[j]:\n                    overlap = radii[i] + radii[j] - dist\n                    # Distribute the overlap reduction proportionally\n                    total = radii[i] + radii[j]\n                    if total > 0:\n                        radii[i] -= overlap * radii[i] / total\n                        radii[j] -= overlap * radii[j] / total\n    \n    # Ensure all radii are positive\n    radii = np.maximum(radii, 0.001)\n    \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and adaptive optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # 1. Initialize with a layered pattern: larger circles in the center, smaller towards edges\n    centers, radii = initialize_layered_pattern()\n\n    # 2. Optimize radii using a constrained optimization routine\n    centers, radii = optimize_radii(centers, radii)\n\n    # 3. Optimize positions using a force-directed approach with adaptive parameters\n    centers = optimize_positions(centers, radii)\n\n    # 4. Final refinement using scipy's minimize function\n    centers, radii = refine_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_layered_pattern():\n    \"\"\"Initialize with larger circles in the center and smaller ones towards the edges\"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place a larger circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Place a ring of circles around the center\n    num_ring1 = 6\n    radius_ring1 = 0.3\n    for i in range(num_ring1):\n        angle = 2 * np.pi * i / num_ring1\n        centers[1 + i] = [0.5 + radius_ring1 * np.cos(angle), 0.5 + radius_ring1 * np.sin(angle)]\n        radii[1 + i] = 0.09\n\n    # Place a second ring of circles\n    num_ring2 = 12\n    radius_ring2 = 0.45\n    for i in range(num_ring2):\n        angle = 2 * np.pi * i / num_ring2\n        centers[1 + num_ring1 + i] = [0.5 + radius_ring2 * np.cos(angle), 0.5 + radius_ring2 * np.sin(angle)]\n        radii[1 + num_ring1 + i] = 0.07\n\n    # Fill the remaining spots with smaller circles near the corners\n    centers[1 + num_ring1 + num_ring2] = [0.15, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 1] = [0.85, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 2] = [0.15, 0.85]\n    centers[1 + num_ring1 + num_ring2 + 3] = [0.85, 0.85]\n    centers[1 + num_ring1 + num_ring2 + 4] = [0.5, 0.15]\n    centers[1 + num_ring1 + num_ring2 + 5] = [0.5, 0.85]\n    radii[1 + num_ring1 + num_ring2:] = 0.06\n\n    return centers, radii\n\n\ndef optimize_radii(centers, radii):\n    \"\"\"Optimize radii while maintaining non-overlapping constraints\"\"\"\n    n = len(centers)\n\n    def objective(radii):\n        return -np.sum(radii)  # Maximize sum of radii\n\n    def constraint(radii):\n        # Ensure no overlaps and stay within the unit square\n        constraints = []\n        for i in range(n):\n            # Border constraints\n            constraints.append(radii[i] - centers[i][0])  # x > r\n            constraints.append(radii[i] - centers[i][1])  # y > r\n            constraints.append(radii[i] + centers[i][0] - 1)  # x < 1 - r\n            constraints.append(radii[i] + centers[i][1] - 1)  # y < 1 - r\n\n            for j in range(i + 1, n):\n                # Non-overlapping constraints\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                constraints.append(dist - radii[i] - radii[j])  # dist > r_i + r_j\n        return np.array(constraints)\n\n    # Initial guess for radii\n    initial_radii = radii.copy()\n\n    # Define constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Define bounds for radii\n    bnds = [(0.001, 0.2) for _ in range(n)]  # Ensure radii are positive\n\n    # Run optimization\n    result = minimize(objective, initial_radii, method='SLSQP', bounds=bnds, constraints=cons, options={'maxiter': 150})\n    optimized_radii = result.x\n\n    return centers, optimized_radii\n\n\ndef optimize_positions(centers, radii):\n    \"\"\"Optimize circle positions using a force-directed approach\"\"\"\n    n = len(centers)\n    repulsion_force = 0.01\n    border_force = 0.02\n    iterations = 80\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                distance = np.linalg.norm(centers[i] - centers[j])\n                min_distance = radii[i] + radii[j]\n                if distance < min_distance:\n                    overlap = min_distance - distance\n                    direction = (centers[i] - centers[j]) / distance  # Normalize\n\n                    # Apply forces proportionally to radii\n                    force_magnitude = repulsion_force * overlap\n                    forces[i] += force_magnitude * direction\n                    forces[j] -= force_magnitude * direction\n\n        # Calculate border forces\n        for i in range(n):\n            x, y = centers[i]\n\n            if x - radii[i] < 0:\n                forces[i, 0] += border_force\n            if x + radii[i] > 1:\n                forces[i, 0] -= border_force\n            if y - radii[i] < 0:\n                forces[i, 1] += border_force\n            if y + radii[i] > 1:\n                forces[i, 1] -= border_force\n\n        # Update positions\n        centers += forces * 0.1  # Dampening factor\n\n        # Clip positions to stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers\n\n\ndef refine_packing(centers, radii):\n    \"\"\"Refine packing using scipy's minimize function to directly optimize positions\"\"\"\n    n = len(centers)\n\n    def objective(positions):\n        # Reshape positions to (n, 2) array\n        reshaped_positions = positions.reshape((n, 2))\n\n        # Calculate radii based on current positions\n        current_radii = compute_max_radii(reshaped_positions)\n\n        # Return negative sum of radii (since we want to maximize)\n        return -np.sum(current_radii)\n\n    # Flatten centers array for optimization\n    initial_positions = centers.flatten()\n\n    # Define bounds for positions (within the unit square)\n    bounds = [(0, 1) for _ in range(2 * n)]\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective, initial_positions, method='L-BFGS-B', bounds=bounds, options={'maxiter': 100})\n\n    # Reshape optimized positions\n    optimized_centers = result.x.reshape((n, 2))\n    optimized_radii = compute_max_radii(optimized_centers)\n\n    return optimized_centers, optimized_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n\n    # Limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Limit by distance to other circles\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                radii[i] = min(radii[i], (dist - radii[j]) / 2)\n    radii = np.maximum(radii, 0.001) # Ensure radii are positive\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}