{"id": "2bed54c7-c49e-426b-8e3b-7c269dc2b527", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and gradient-based radius adjustment\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_optimized_26_v5,  # More advanced initialization\n        initialize_pattern_specialized_26_v4,\n        initialize_pattern_hybrid_26_v4,\n        initialize_pattern_billiard_26_v4,\n        initialize_pattern_corner_optimized_26_v4,\n        initialize_pattern_ring_26_v4\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_positions_with_scipy(centers, radii)\n        centers, radii = optimize_radii_with_gradient_descent(centers, radii)\n        centers, radii = optimize_positions_with_scipy(centers, radii) # Re-optimize positions after radius adjustment\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_optimized_26_v5(n):\n    \"\"\"A highly optimized initialization pattern for 26 circles.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Largest possible center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.150  # Increased center radius\n\n    # Ring of 6 circles around the center\n    ring1_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring of 6 circles, offset from the first\n    ring2_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = ring2_radius\n\n    # Place 4 circles near the corners\n    corner_radius = 0.122\n    centers[13] = [corner_radius, corner_radius]\n    centers[14] = [1 - corner_radius, corner_radius]\n    centers[15] = [corner_radius, 1 - corner_radius]\n    centers[16] = [1 - corner_radius, 1 - corner_radius]\n    radii[13:17] = corner_radius\n\n    # Place 4 circles at the midpoints of the edges\n    edge_radius = 0.097\n    centers[17] = [0.5, edge_radius]\n    centers[18] = [0.5, 1 - edge_radius]\n    centers[19] = [edge_radius, 0.5]\n    centers[20] = [1 - edge_radius, 0.5]\n    radii[17:21] = edge_radius\n\n    # Place 5 smaller circles to fill remaining gaps\n    small_radius = 0.084\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.85]  # Experiment with placement\n    radii[21:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_specialized_26_v4(n):\n    \"\"\"Specialized pattern for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.124\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.110\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.130\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 2 circles in outer ring\n    outer_radius = 0.089\n    for i in range(2):\n        angle = 2 * np.pi * i / 2\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    # Fill remaining spaces with 7 smaller circles\n    small_radius = 0.079\n    centers[19] = [0.25, 0.25]\n    centers[20] = [0.75, 0.25]\n    centers[21] = [0.25, 0.75]\n    centers[22] = [0.75, 0.75]\n    centers[23] = [0.35, 0.5]\n    centers[24] = [0.65, 0.5]\n    centers[25] = [0.5, 0.35]\n    radii[19:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_26_v4(n):\n    \"\"\"Hybrid pattern optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.136\n\n    # Inner ring (6 circles)\n    inner_radius = 0.109\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.099\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.119\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.079\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_billiard_26_v4(n):\n    \"\"\"Billiard-table inspired pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 corner circles\n    corner_radius = 0.119\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.099\n    edge_positions = [0.3, 0.7]\n\n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n\n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n\n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n\n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n\n    radii[4:12] = edge_radius\n\n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.089\n\n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.111  # Slightly larger center circle\n\n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n\n    # Outer partial ring (7 circles)\n    outer_radius = 0.084\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi / 7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_corner_optimized_26_v4(n):\n    \"\"\"Pattern emphasizing optimal corner and edge utilization.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.129\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.104\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 4 smaller edge circles\n    small_edge_radius = 0.089\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Inner grid (10 circles)\n    inner_radius = 0.084\n    grid_positions = [0.3, 0.5, 0.7]\n\n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.121\n                else:\n                    radii[count] = inner_radius\n                count += 1\n\n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.079\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_ring_26_v4(n):\n    \"\"\"Concentric rings of circles, optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.139\n\n    # First ring (8 circles)\n    ring1_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring (12 circles)\n    ring2_radius = 0.094\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 9] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.099\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n\n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.089\n\n    return centers, radii\n\n\ndef optimize_positions_with_scipy(centers, radii):\n    \"\"\"Optimize circle positions using scipy.optimize.minimize, keeping radii fixed.\"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii), radii are fixed.\"\"\"\n        current_centers = x.reshape((n, 2))\n        return -np.sum(radii) # Maximize sum of radii (which are constant here)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x.reshape((n, 2))\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - radii[i] - radii[j] - 1e-8)  # Add tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - radii[i] + 1e-8)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - radii[i] + 1e-8)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - radii[i] + 1e-8)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - radii[i] + 1e-8)  # y <= 1 - r\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = centers.flatten()\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'maxiter': 1000, 'ftol': 1e-9})\n\n    # Extract optimized centers\n    optimized_centers = res.x.reshape((n, 2))\n\n    return optimized_centers, radii\n\n\ndef optimize_radii_with_gradient_descent(centers, radii, learning_rate=0.001, iterations=500):\n    \"\"\"Adjust radii using gradient descent to maximize sum of radii while avoiding overlap.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        gradient = np.zeros(n)\n        for i in range(n):\n            # Calculate gradient for each circle\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Circles overlap, adjust radii to reduce overlap\n                        gradient[i] -= overlap  # Reduce radius of circle i\n\n        # Update radii based on gradient\n        radii += learning_rate * gradient\n\n        # Ensure radii are within bounds and non-negative\n        for i in range(n):\n             radii[i] = max(0.005, min(radii[i], min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])))\n\n\n        # Correct center positions\n        for i in range(n):\n            centers[i, 0] = max(radii[i], min(centers[i, 0], 1 - radii[i]))\n            centers[i, 1] = max(radii[i], min(centers[i, 1], 1 - radii[i]))\n\n    return centers, radii\n\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "31b3b739-d3e6-46f4-93bf-fa7f017dfdd6", "generation": 12, "timestamp": 1750800069.4971414, "iteration_found": 135, "metrics": {"validity": 1.0, "sum_radii": 2.446173278186242, "target_ratio": 0.9283390050042665, "combined_score": 0.9283390050042665, "eval_time": 49.67795467376709}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6139574311616056, "target_ratio": 0.9920142053744234, "combined_score": 0.9920142053744234, "eval_time": 14.61216402053833}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6140\n- target_ratio: 0.9920\n- combined_score: 0.9920\n- eval_time: 14.6122\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8375, target_ratio: 0.6974, combined_score: 0.6974, eval_time: 93.8945\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 10.6921)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6306), Performs well on target_ratio (0.9983), Performs well on combined_score (0.9983), Performs well on eval_time (47.8335)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 8.5529)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6280), Performs well on target_ratio (0.9973), Performs well on combined_score (0.9973), Performs well on eval_time (37.1418)\n\n\n### Program 4 (Score: 3.7046)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4894), Performs well on target_ratio (0.9447), Performs well on combined_score (0.9447), Performs well on eval_time (13.1441)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.1619)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_optimized_26_v5,  # More advanced initialization\n        initialize_pattern_specialized_26_v4,\n        initialize_pattern_hybrid_26_v4,\n        initialize_pattern_billiard_26_v4,\n        initialize_pattern_corner_optimized_26_v4,\n        initialize_pattern_ring_26_v4\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n\n        # Combine and simplify optimization stages using scipy.optimize.minimize\n        centers, radii = optimize_with_scipy(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_optimized_26_v5(n):\n    \"\"\"A highly optimized initialization pattern for 26 circles.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Largest possible center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.150  # Increased center radius\n\n    # Ring of 6 circles around the center\n    ring1_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring of 6 circles, offset from the first\n    ring2_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = ring2_radius\n\n    # Place 4 circles near the corners\n    corner_radius = 0.122\n    centers[13] = [corner_radius, corner_radius]\n    centers[14] = [1 - corner_radius, corner_radius]\n    centers[15] = [corner_radius, 1 - corner_radius]\n    centers[16] = [1 - corner_radius, 1 - corner_radius]\n    radii[13:17] = corner_radius\n\n    # Place 4 circles at the midpoints of the edges\n    edge_radius = 0.097\n    centers[17] = [0.5, edge_radius]\n    centers[18] = [0.5, 1 - edge_radius]\n    centers[19] = [edge_radius, 0.5]\n    centers[20] = [1 - edge_radius, 0.5]\n    radii[17:21] = edge_radius\n\n    # Place 5 smaller circles to fill remaining gaps\n    small_radius = 0.084\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.85]  # Experiment with placement\n    radii[21:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_specialized_26_v4(n):\n    \"\"\"Specialized pattern for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.124\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.110\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.130\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 2 circles in outer ring\n    outer_radius = 0.089\n    for i in range(2):\n        angle = 2 * np.pi * i / 2\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    # Fill remaining spaces with 7 smaller circles\n    small_radius = 0.079\n    centers[19] = [0.25, 0.25]\n    centers[20] = [0.75, 0.25]\n    centers[21] = [0.25, 0.75]\n    centers[22] = [0.75, 0.75]\n    centers[23] = [0.35, 0.5]\n    centers[24] = [0.65, 0.5]\n    centers[25] = [0.5, 0.35]\n    radii[19:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_26_v4(n):\n    \"\"\"Hybrid pattern optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.136\n\n    # Inner ring (6 circles)\n    inner_radius = 0.109\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.099\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.119\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.079\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_billiard_26_v4(n):\n    \"\"\"Billiard-table inspired pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 corner circles\n    corner_radius = 0.119\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.099\n    edge_positions = [0.3, 0.7]\n\n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n\n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n\n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n\n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n\n    radii[4:12] = edge_radius\n\n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.089\n\n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.111  # Slightly larger center circle\n\n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n\n    # Outer partial ring (7 circles)\n    outer_radius = 0.084\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi / 7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_corner_optimized_26_v4(n):\n    \"\"\"Pattern emphasizing optimal corner and edge utilization.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.129\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.104\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 4 smaller edge circles\n    small_edge_radius = 0.089\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Inner grid (10 circles)\n    inner_radius = 0.084\n    grid_positions = [0.3, 0.5, 0.7]\n\n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.121\n                else:\n                    radii[count] = inner_radius\n                count += 1\n\n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.079\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_ring_26_v4(n):\n    \"\"\"Concentric rings of circles, optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.139\n\n    # First ring (8 circles)\n    ring1_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring (12 circles)\n    ring2_radius = 0.094\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 9] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.099\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n\n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.089\n\n    return centers, radii\n\n\ndef optimize_with_scipy(centers, radii):\n    \"\"\"Optimize circle positions and radii using scipy.optimize.minimize.\"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-8)  # Add smaller tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] + 1e-8)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] + 1e-8)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i] + 1e-8)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] + 1e-8)  # y <= 1 - r\n            constraints.append(current_radii[i] - 0.005) # radii >= 0.005\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'maxiter': 2000, 'ftol': 1e-9}) # Increased iterations and tighter tolerance\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and gradient-based radius adjustment\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_optimized_26_v5,  # More advanced initialization\n        initialize_pattern_specialized_26_v4,\n        initialize_pattern_hybrid_26_v4,\n        initialize_pattern_billiard_26_v4,\n        initialize_pattern_corner_optimized_26_v4,\n        initialize_pattern_ring_26_v4\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_positions_with_scipy(centers, radii)\n        centers, radii = optimize_radii_with_gradient_descent(centers, radii)\n        centers, radii = optimize_positions_with_scipy(centers, radii) # Re-optimize positions after radius adjustment\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_optimized_26_v5(n):\n    \"\"\"A highly optimized initialization pattern for 26 circles.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Largest possible center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.150  # Increased center radius\n\n    # Ring of 6 circles around the center\n    ring1_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring of 6 circles, offset from the first\n    ring2_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = ring2_radius\n\n    # Place 4 circles near the corners\n    corner_radius = 0.122\n    centers[13] = [corner_radius, corner_radius]\n    centers[14] = [1 - corner_radius, corner_radius]\n    centers[15] = [corner_radius, 1 - corner_radius]\n    centers[16] = [1 - corner_radius, 1 - corner_radius]\n    radii[13:17] = corner_radius\n\n    # Place 4 circles at the midpoints of the edges\n    edge_radius = 0.097\n    centers[17] = [0.5, edge_radius]\n    centers[18] = [0.5, 1 - edge_radius]\n    centers[19] = [edge_radius, 0.5]\n    centers[20] = [1 - edge_radius, 0.5]\n    radii[17:21] = edge_radius\n\n    # Place 5 smaller circles to fill remaining gaps\n    small_radius = 0.084\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.85]  # Experiment with placement\n    radii[21:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_specialized_26_v4(n):\n    \"\"\"Specialized pattern for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.124\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.110\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.130\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 2 circles in outer ring\n    outer_radius = 0.089\n    for i in range(2):\n        angle = 2 * np.pi * i / 2\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    # Fill remaining spaces with 7 smaller circles\n    small_radius = 0.079\n    centers[19] = [0.25, 0.25]\n    centers[20] = [0.75, 0.25]\n    centers[21] = [0.25, 0.75]\n    centers[22] = [0.75, 0.75]\n    centers[23] = [0.35, 0.5]\n    centers[24] = [0.65, 0.5]\n    centers[25] = [0.5, 0.35]\n    radii[19:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_26_v4(n):\n    \"\"\"Hybrid pattern optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.136\n\n    # Inner ring (6 circles)\n    inner_radius = 0.109\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.099\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.119\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.079\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_billiard_26_v4(n):\n    \"\"\"Billiard-table inspired pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 corner circles\n    corner_radius = 0.119\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.099\n    edge_positions = [0.3, 0.7]\n\n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n\n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n\n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n\n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n\n    radii[4:12] = edge_radius\n\n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.089\n\n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.111  # Slightly larger center circle\n\n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n\n    # Outer partial ring (7 circles)\n    outer_radius = 0.084\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi / 7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_corner_optimized_26_v4(n):\n    \"\"\"Pattern emphasizing optimal corner and edge utilization.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.129\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.104\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 4 smaller edge circles\n    small_edge_radius = 0.089\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Inner grid (10 circles)\n    inner_radius = 0.084\n    grid_positions = [0.3, 0.5, 0.7]\n\n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.121\n                else:\n                    radii[count] = inner_radius\n                count += 1\n\n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.079\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_ring_26_v4(n):\n    \"\"\"Concentric rings of circles, optimized for n=26.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.139\n\n    # First ring (8 circles)\n    ring1_radius = 0.104\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring (12 circles)\n    ring2_radius = 0.094\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 9] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.099\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n\n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.089\n\n    return centers, radii\n\n\ndef optimize_positions_with_scipy(centers, radii):\n    \"\"\"Optimize circle positions using scipy.optimize.minimize, keeping radii fixed.\"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii), radii are fixed.\"\"\"\n        current_centers = x.reshape((n, 2))\n        return -np.sum(radii) # Maximize sum of radii (which are constant here)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x.reshape((n, 2))\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - radii[i] - radii[j] - 1e-8)  # Add tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - radii[i] + 1e-8)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - radii[i] + 1e-8)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - radii[i] + 1e-8)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - radii[i] + 1e-8)  # y <= 1 - r\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = centers.flatten()\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'maxiter': 1000, 'ftol': 1e-9})\n\n    # Extract optimized centers\n    optimized_centers = res.x.reshape((n, 2))\n\n    return optimized_centers, radii\n\n\ndef optimize_radii_with_gradient_descent(centers, radii, learning_rate=0.001, iterations=500):\n    \"\"\"Adjust radii using gradient descent to maximize sum of radii while avoiding overlap.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        gradient = np.zeros(n)\n        for i in range(n):\n            # Calculate gradient for each circle\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Circles overlap, adjust radii to reduce overlap\n                        gradient[i] -= overlap  # Reduce radius of circle i\n\n        # Update radii based on gradient\n        radii += learning_rate * gradient\n\n        # Ensure radii are within bounds and non-negative\n        for i in range(n):\n             radii[i] = max(0.005, min(radii[i], min(centers[i, 0], 1 - centers[i, 0], centers[i, 1], 1 - centers[i, 1])))\n\n\n        # Correct center positions\n        for i in range(n):\n            centers[i, 0] = max(radii[i], min(centers[i, 0], 1 - radii[i]))\n            centers[i, 1] = max(radii[i], min(centers[i, 1], 1 - radii[i]))\n\n    return centers, radii\n\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}