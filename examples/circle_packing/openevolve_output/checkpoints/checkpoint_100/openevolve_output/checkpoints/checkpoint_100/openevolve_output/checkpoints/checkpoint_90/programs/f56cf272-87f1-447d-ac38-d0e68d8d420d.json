{"id": "f56cf272-87f1-447d-ac38-d0e68d8d420d", "code": "# EVOLVE-BLOCK-START\n\"\"\"Improved circle packing for n=26 circles using a hybrid pattern and multi-stage optimization with gradient-based methods\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial pattern: Hybrid approach - corners, edges, center, and fill\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Edge circles\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [edge_radius, 0.5]\n    centers[6] = [1 - edge_radius, 0.5]\n    centers[7] = [0.5, 1 - edge_radius]\n    radii[4:8] = edge_radius\n\n    # Central circles (more tightly packed)\n    center_radius = 0.12\n    centers[8] = [0.5, 0.5]\n    radii[8] = center_radius\n\n    # Remaining circles (fill the gaps using spiral-like distribution)\n    remaining_radius = 0.085\n    for i in range(9, n):\n        angle = (i - 9) * 2 * np.pi / (n - 9)\n        distance_from_center = 0.3 * (i - 9) / (n - 9)  # Increased distance scaling\n        x = 0.5 + distance_from_center * np.cos(angle)\n        y = 0.5 + distance_from_center * np.sin(angle)\n        centers[i] = [x, y]\n        radii[i] = remaining_radius\n\n    # Refine the packing using optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef optimize_packing(centers, radii, iterations=200):\n    \"\"\"Optimize the circle packing using gradient-based optimization.\"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function: negative sum of radii.\"\"\"\n        r = x[2*n:]\n        return -np.sum(r)\n\n    def constraint_overlap(x):\n        \"\"\"Constraint: no overlapping circles.\"\"\"\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(c[i] - c[j])\n                overlap += max(0, radii_lower_bound - (dist - r[i] - r[j]))  # Penalize distances less than radii sum\n        return -overlap # Ensure this is non-negative for 'ineq' constraint\n\n\n    def constraint_bounds(x):\n        \"\"\"Constraint: circles within the unit square.\"\"\"\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        min_dist_to_wall = np.min(np.concatenate([c[:, 0] - r, c[:, 1] - r, 1 - c[:, 0] - r, 1 - c[:, 1] - r])) # min dist to wall\n        return min_dist_to_wall # Ensure non-negative\n\n    # Initial guess and bounds\n    x0 = np.concatenate([centers.flatten(), radii])\n    bounds = [(0, 1) for _ in range(2 * n)] + [(0.01, 0.15) for _ in range(n)]  # Radius bounds\n\n    # Constraints\n    radii_lower_bound = 0.001 # prevent radii from becoming zero, which can break the overlap constraint\n    constraints = [{'type': 'ineq', 'fun': constraint_overlap},\n                   {'type': 'ineq', 'fun': constraint_bounds}]\n\n    # Optimization\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints,\n                      options={'maxiter': iterations, 'ftol': 1e-7})  # Increased ftol\n\n    # Extract results\n    optimized_centers = result.x[:2*n].reshape(n, 2)\n    optimized_radii = result.x[2*n:]\n\n    return optimized_centers, optimized_radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "3dd58f92-6a71-4d9c-ad1c-288ce060b320", "generation": 12, "timestamp": 1750794929.3195677, "iteration_found": 80, "metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6161045771570652, "target_ratio": 0.9928290615396833, "combined_score": 0.9928290615396833, "eval_time": 3.9809420108795166}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6161\n- target_ratio: 0.9928\n- combined_score: 0.9928\n- eval_time: 3.9809\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6241, target_ratio: 0.9959, combined_score: 0.9959, eval_time: 35.2108\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6280, target_ratio: 0.9973, combined_score: 0.9973, eval_time: 37.1418\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6267, target_ratio: 0.9968, combined_score: 0.9968, eval_time: 42.1538\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 6.7041)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6280), Performs well on target_ratio (0.9973), Performs well on combined_score (0.9973), Performs well on eval_time (27.8981)\n\n\n### Program 2 (Score: 9.5548)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6267), Performs well on target_ratio (0.9968), Performs well on combined_score (0.9968), Performs well on eval_time (42.1538)\n\n\n### Program 3 (Score: 2.7578)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6195), Performs well on target_ratio (0.9941), Performs well on combined_score (0.9941), Performs well on eval_time (8.1812)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: index 26 is out of bounds for axis 0 with size 26)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\nLooking at the current program, I can see it's failing with an \"index 26 is out of bounds for axis 0 with size 26\" error. This typically happens when we try to access an array element that doesn't exist. The best performing version had a score of 0.9968 with a sum_radii of 2.6267, which is very close to the target of 2.637.\n\nLet me rewrite the program with a focus on fixing the index error and improving the circle packing algorithm:\n\n```python\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Directly use the known optimal solution for n=26\n    # This is based on mathematical research on circle packing problems\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Pattern based on a specialized arrangement for n=26\n    # Corner circles (4)\n    corner_radius = 0.11924\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8)\n    edge_radius = 0.10146\n    # Bottom edge\n    centers[4] = [0.25, edge_radius]\n    centers[5] = [0.5, edge_radius]\n    centers[6] = [0.75, edge_radius]\n    # Right edge\n    centers[7] = [1 - edge_radius, 0.25]\n    centers[8] = [1 - edge_radius, 0.5]\n    centers[9] = [1 - edge_radius, 0.75]\n    # Top edge\n    centers[10] = [0.25, 1 - edge_radius]\n    centers[11] = [0.75, 1 - edge_radius]\n    radii[4:12] = edge_radius\n    \n    # Central circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.11924\n    \n    # Inner ring (6 circles)\n    inner_radius = 0.10146\n    centers[13] = [0.5 - 0.2236, 0.5]\n    centers[14] = [0.5 - 0.1118, 0.5 + 0.1936]\n    centers[15] = [0.5 + 0.1118, 0.5 + 0.1936]\n    centers[16] = [0.5 + 0.2236, 0.5]\n    centers[17] = [0.5 + 0.1118, 0.5 - 0.1936]\n    centers[18] = [0.5 - 0.1118, 0.5 - 0.1936]\n    radii[13:19] = inner_radius\n    \n    # Remaining circles in strategic positions\n    mid_radius = 0.10146\n    centers[19] = [0.25, 0.25]\n    centers[20] = [0.75, 0.25]\n    centers[21] = [0.25, 0.75]\n    centers[22] = [0.75, 0.75]\n    centers[23] = [0.5, 0.25]\n    centers[24] = [0.5, 0.75]\n    centers[25] = [0.25, 0.5]\n    radii[19:26] = mid_radius\n    \n    # Fine-tune the packing\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Calculate sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\ndef optimize_packing(centers, radii, iterations=500):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # First ensure no overlaps\n    centers, radii = resolve_overlaps(centers, radii, iterations=100)\n    \n    # Then optimize positions to maximize radii\n    centers, radii = optimize_positions(centers, radii, iterations=100)\n    \n    # Grow radii to fill available space\n    centers, radii = grow_radii(centers, radii, iterations=100)\n    \n    # Final fine-tuning\n    centers, radii = fine_tune(centers, radii, iterations=200)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=100):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 60.0\n    wall_repulsion = 60.0\n    dt = 0.01\n    dampening = 0.8\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = centers[i] - centers[j]\n                dist = np.linalg.norm(diff)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = diff / (dist + 1e-10)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * velocity + forces * dt\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef optimize_positions(centers, radii, iterations=100):\n    \"\"\"\n    Optimize circle positions to maximize potential for radius growth\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    dt = 0.005\n    dampening = 0.9\n    \n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate forces to optimize spacing\n        for i in range(n):\n            # Find nearest neighbor\n            min_dist = float('inf')\n            nearest = -1\n            \n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - (radii[i] + radii[j])\n                    if dist < min_dist:\n                        min_dist = dist\n                        nearest = j\n            \n            if nearest >= 0:\n                # Calculate direction to nearest neighbor\n                diff = centers[i] - centers[nearest]\n                dist = np.linalg.norm(diff)\n                direction = diff / (dist + 1e-10)\n                \n                # Apply a small force to move away from nearest neighbor\n                forces[i] += 0.5 * direction\n        \n        # Update positions\n        velocity = dampening * velocity + forces * dt\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef grow_radii(centers, radii, iterations=100):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.002\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\ndef fine_tune(centers, radii, iterations=200):\n    \"\"\"\n    Fine-tune the circle packing using a specialized optimization approach\n    \"\"\"\n    n = len(centers)\n    \n    # Define the objective function for optimization\n    def objective(x):\n        # Extract centers and radii from flattened array\n        c = x[:n*2].reshape(n, 2)\n        r = x[n*2:]\n        \n        # Calculate sum of radii (negative because we're minimizing)\n        return -np.sum(r)\n    \n    # Define constraints\n    constraints = []\n    \n    # No overlap between circles\n    for i in range(n):\n        for j in range(i+1, n):\n            def circle_constraint(x, i=i, j=j):\n                c = x[:n*2].reshape(n, 2)\n                r = x[n*2:]\n                dist = np.linalg.norm(c[i] - c[j])\n                return dist - r[i] - r[j]\n            \n            constraints.append({'type': 'ineq', 'fun': circle_constraint})\n    \n    # Circles within bounds\n    for i in range(n):\n        def left_bound(x, i=i):\n            c = x[:n*2].reshape(n, 2)\n            r = x[n*2:]\n            return c[i, 0] - r[i]\n        \n        def bottom_bound(x, i=i):\n            c = x[:n*2].reshape(n, 2)\n            r = x[n*2:]\n            return c[i, 1] - r[i]\n        \n        def right_bound(x, i=i):\n            c = x[:n*2].reshape(n, 2)\n            r = x[n*2:]\n            return 1 - c[i, 0] - r[i]\n        \n        def top_bound(x, i=i):\n            c = x[:n*2].reshape(n, 2)\n            r = x[n*2:]\n            return 1 - c[i, 1] - r[i]\n        \n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n    \n    # Prepare initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds for variables\n    bounds = []\n    for i in range(n):\n        bounds.append((0, 1))  # x-coordinate\n        bounds.append((0, 1))  # y-coordinate\n    for i in range(n):\n        bounds.append((0.01, 0.15))  # radius\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        x0,\n        method='SLSQP',\n        bounds=bounds,\n        constraints=constraints,\n        options={'maxiter': iterations, 'ftol': 1e-6}\n    )\n    \n    # Extract optimized centers and radii\n    opt_centers = result.x[:n*2].reshape(n, 2)\n    opt_radii = result.x[n*2:]\n    \n    # Final adjustment to ensure no overlaps\n    opt_centers, opt_radii = resolve_overlaps(opt_centers, opt_radii, iterations=50)\n    \n    # Final radius optimization\n    opt_centers, opt_radii = optimize_all_radii(opt_centers, opt_radii)\n    \n    return opt_centers, opt_radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(20):\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space * 0.9999  # Very slight reduction for numerical stability\n    \n    return centers, radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Improved circle packing for n=26 circles using a hybrid pattern and multi-stage optimization with gradient-based methods\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial pattern: Hybrid approach - corners, edges, center, and fill\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Edge circles\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [edge_radius, 0.5]\n    centers[6] = [1 - edge_radius, 0.5]\n    centers[7] = [0.5, 1 - edge_radius]\n    radii[4:8] = edge_radius\n\n    # Central circles (more tightly packed)\n    center_radius = 0.12\n    centers[8] = [0.5, 0.5]\n    radii[8] = center_radius\n\n    # Remaining circles (fill the gaps using spiral-like distribution)\n    remaining_radius = 0.085\n    for i in range(9, n):\n        angle = (i - 9) * 2 * np.pi / (n - 9)\n        distance_from_center = 0.3 * (i - 9) / (n - 9)  # Increased distance scaling\n        x = 0.5 + distance_from_center * np.cos(angle)\n        y = 0.5 + distance_from_center * np.sin(angle)\n        centers[i] = [x, y]\n        radii[i] = remaining_radius\n\n    # Refine the packing using optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef optimize_packing(centers, radii, iterations=200):\n    \"\"\"Optimize the circle packing using gradient-based optimization.\"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function: negative sum of radii.\"\"\"\n        r = x[2*n:]\n        return -np.sum(r)\n\n    def constraint_overlap(x):\n        \"\"\"Constraint: no overlapping circles.\"\"\"\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(c[i] - c[j])\n                overlap += max(0, radii_lower_bound - (dist - r[i] - r[j]))  # Penalize distances less than radii sum\n        return -overlap # Ensure this is non-negative for 'ineq' constraint\n\n\n    def constraint_bounds(x):\n        \"\"\"Constraint: circles within the unit square.\"\"\"\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        min_dist_to_wall = np.min(np.concatenate([c[:, 0] - r, c[:, 1] - r, 1 - c[:, 0] - r, 1 - c[:, 1] - r])) # min dist to wall\n        return min_dist_to_wall # Ensure non-negative\n\n    # Initial guess and bounds\n    x0 = np.concatenate([centers.flatten(), radii])\n    bounds = [(0, 1) for _ in range(2 * n)] + [(0.01, 0.15) for _ in range(n)]  # Radius bounds\n\n    # Constraints\n    radii_lower_bound = 0.001 # prevent radii from becoming zero, which can break the overlap constraint\n    constraints = [{'type': 'ineq', 'fun': constraint_overlap},\n                   {'type': 'ineq', 'fun': constraint_bounds}]\n\n    # Optimization\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints,\n                      options={'maxiter': iterations, 'ftol': 1e-7})  # Increased ftol\n\n    # Extract results\n    optimized_centers = result.x[:2*n].reshape(n, 2)\n    optimized_radii = result.x[2*n:]\n\n    return optimized_centers, optimized_radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}