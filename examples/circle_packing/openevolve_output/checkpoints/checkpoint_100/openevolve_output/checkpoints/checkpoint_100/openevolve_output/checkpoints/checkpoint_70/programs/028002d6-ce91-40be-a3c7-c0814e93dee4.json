{"id": "028002d6-ce91-40be-a3c7-c0814e93dee4", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_graham_pattern,        # Based on mathematical literature\n        initialize_specialized_n26,        # Specialized for exactly n=26\n        initialize_edge_optimized,         # Optimized edge placement\n        initialize_variable_size_pattern,  # Variable sized circles\n        initialize_corner_optimized,       # Corner-optimized pattern\n        initialize_hybrid_pattern          # Hybrid approach\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_graham_pattern(n):\n    \"\"\"\n    Initialize with Graham & Lubachevsky pattern which is known to be \n    efficient for n=26 in a square\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be scaled during optimization\n    base_radius = 0.095\n    \n    # Corner circles (4)\n    corner_radius = base_radius * 1.05\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - slightly smaller\n    edge_radius = base_radius * 0.95\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.5, edge_radius],\n        [0.75, edge_radius],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.5],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(8):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Central large circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = base_radius * 1.15\n    \n    # Inner ring (6 circles)\n    inner_radius = base_radius * 1.0\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius + 0.005\n        centers[13+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13+i] = inner_radius\n    \n    # Remaining circles in intermediate positions\n    mid_radius = base_radius * 0.9\n    remaining_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i in range(7):\n        centers[19+i] = remaining_positions[i]\n        radii[19+i] = mid_radius\n    \n    return centers, radii\n\n\ndef initialize_specialized_n26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set up a pattern with larger circles in key positions\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (5 circles)\n    ring1_radius = 0.1\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + ring1_radius + 0.003\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (10 circles)\n    ring2_radius = 0.09\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        dist = radii[0] + 2 * ring1_radius + ring2_radius + 0.01\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = ring2_radius\n    \n    # Corner circles (4)\n    corner_radius = 0.105\n    centers[16] = [corner_radius, corner_radius]\n    centers[17] = [1 - corner_radius, corner_radius]\n    centers[18] = [corner_radius, 1 - corner_radius]\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[16:20] = corner_radius\n    \n    # Edge circles (6)\n    edge_radius = 0.085\n    centers[20] = [0.5, edge_radius]\n    centers[21] = [0.5, 1 - edge_radius]\n    centers[22] = [edge_radius, 0.5]\n    centers[23] = [1 - edge_radius, 0.5]\n    centers[24] = [0.25, 1 - edge_radius]\n    centers[25] = [0.75, 1 - edge_radius]\n    radii[20:26] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_edge_optimized(n):\n    \"\"\"\n    Initialize with a pattern that places circles optimally along edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (12) - medium\n    edge_radius = 0.095\n    edge_count = 3  # 3 circles per edge\n    \n    # Bottom edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+i] = [x, edge_radius]\n        radii[4+i] = edge_radius\n    \n    # Right edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+edge_count+i] = [1 - edge_radius, y]\n        radii[4+edge_count+i] = edge_radius\n    \n    # Top edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+2*edge_count+i] = [x, 1 - edge_radius]\n        radii[4+2*edge_count+i] = edge_radius\n    \n    # Left edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+3*edge_count+i] = [edge_radius, y]\n        radii[4+3*edge_count+i] = edge_radius\n    \n    # Interior circles (10) - smaller\n    interior_radius = 0.085\n    count = 16\n    \n    # Place interior circles in a grid pattern\n    interior_positions = [\n        [0.25, 0.25], [0.5, 0.25], [0.75, 0.25],\n        [0.25, 0.5], [0.5, 0.5], [0.75, 0.5],\n        [0.25, 0.75], [0.5, 0.75], [0.75, 0.75],\n        [0.33, 0.33]\n    ]\n    \n    for pos in interior_positions:\n        centers[count] = pos\n        radii[count] = interior_radius\n        count += 1\n    \n    return centers, radii\n\n\ndef initialize_variable_size_pattern(n):\n    \"\"\"\n    Initialize with a pattern that uses variable sized circles\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with 3 different circle sizes\n    large_radius = 0.11\n    medium_radius = 0.09\n    small_radius = 0.075\n    \n    # Place large circles (7)\n    large_positions = [\n        [0.5, 0.5],                # Center\n        [large_radius, large_radius],               # Corners\n        [1 - large_radius, large_radius],\n        [large_radius, 1 - large_radius],\n        [1 - large_radius, 1 - large_radius],\n        [0.5, large_radius],       # Middle of edges\n        [0.5, 1 - large_radius]\n    ]\n    \n    for i, pos in enumerate(large_positions):\n        centers[i] = pos\n        radii[i] = large_radius\n    \n    # Place medium circles (10)\n    medium_positions = [\n        [medium_radius, 0.5],\n        [1 - medium_radius, 0.5],\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.25, 0.5],\n        [0.75, 0.5],\n        [0.25, medium_radius],\n        [0.75, medium_radius]\n    ]\n    \n    for i, pos in enumerate(medium_positions):\n        centers[i+7] = pos\n        radii[i+7] = medium_radius\n    \n    # Place small circles (9)\n    small_positions = [\n        [0.25, 1 - medium_radius],\n        [0.75, 1 - medium_radius],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.5, 0.33]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        centers[i+17] = pos\n        radii[i+17] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_corner_optimized(n):\n    \"\"\"\n    Initialize with a pattern that optimizes corner placements\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.3, edge_radius],\n        [0.7, edge_radius],\n        [0.3, 1 - edge_radius],\n        [0.7, 1 - edge_radius],\n        [edge_radius, 0.3],\n        [edge_radius, 0.7],\n        [1 - edge_radius, 0.3],\n        [1 - edge_radius, 0.7]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+4] = pos\n        radii[i+4] = edge_radius\n    \n    # Middle edge circles (4) - medium-small\n    mid_edge_radius = 0.085\n    centers[12] = [0.5, mid_edge_radius]\n    centers[13] = [0.5, 1 - mid_edge_radius]\n    centers[14] = [mid_edge_radius, 0.5]\n    centers[15] = [1 - mid_edge_radius, 0.5]\n    radii[12:16] = mid_edge_radius\n    \n    # Interior circles (10) - variable sizes\n    # Central circle - larger\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.1\n    \n    # Remaining interior circles\n    interior_radius = 0.08\n    interior_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.5],\n        [0.67, 0.5],\n        [0.5, 0.33],\n        [0.5, 0.67],\n        [0.4, 0.4]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        centers[i+17] = pos\n        radii[i+17] = interior_radius\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining multiple approaches\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with gradually decreasing circle sizes from center to edges\n    \n    # Central circle - largest\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (6 circles) - large\n    ring1_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.002\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - large\n    corner_radius = 0.105\n    centers[7] = [corner_radius, corner_radius]\n    centers[8] = [1 - corner_radius, corner_radius]\n    centers[9] = [corner_radius, 1 - corner_radius]\n    centers[10] = [1 - corner_radius, 1 - corner_radius]\n    radii[7:11] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.09\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+11] = pos\n        radii[i+11] = edge_radius\n    \n    # Remaining circles - smaller\n    small_radius = 0.08\n    small_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        centers[i+19] = pos\n        radii[i+19] = small_radius\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with simulated annealing\n    centers, radii = fine_tune(centers, radii, max_iterations)\n    \n    # Final radius optimization\n    centers, radii = optimize_all_radii(centers, radii)\n    \n    return centers, radii\n\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0\n    wall_repulsion = 25.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion - optimized with vectorization\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff * diff, axis=1)\n            min_dist = radii + radii[i]\n            overlap = min_dist**2 > dist_sq\n            \n            for j in range(n):\n                if i != j and overlap[j]:\n                    dist = np.sqrt(dist_sq[j])\n                    min_dist_ij = min_dist[j]\n                    \n                    if dist < min_dist_ij:\n                        overlap_amount = min_dist_ij - dist\n                        direction = diff[j] / (dist + 1e-10)\n                        force = repulsion_strength * overlap_amount * direction\n                        forces[i] += force\n                        forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef grow_radii(centers, radii, iterations=300):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\n\ndef fine_tune(centers, radii, iterations=1000):\n    \"\"\"\n    Fine-tune positions and sizes using simulated annealing\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.02\n    cooling_rate = 0.997\n    \n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Decide what to modify\n        if np.random.random() < 0.7:  # 70% chance to move a circle\n            # Move a circle\n            idx = np.random.randint(0, n)\n            new_centers[idx] += np.random.normal(0, 0.005, 2)\n            \n            # Keep circle within bounds\n            new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n            new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        else:  # 30% chance to adjust radii\n            # Adjust multiple radii\n            num_to_adjust = np.random.randint(1, 4)  # Adjust 1-3 circles\n            indices = np.random.choice(n, num_to_adjust, replace=False)\n            \n            for idx in indices:\n                radius_change = np.random.normal(0, 0.002)\n                new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n        \n        # Check for validity\n        valid = True\n        \n        # Check circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(new_centers[i] - new_centers[j])\n                min_dist = new_radii[i] + new_radii[j]\n                \n                if dist < min_dist - 1e-10:  # Allow tiny overlap for numerical stability\n                    valid = False\n                    break\n            \n            if not valid:\n                break\n        \n        # Check wall constraints\n        if valid:\n            for i in range(n):\n                x, y = new_centers[i]\n                r = new_radii[i]\n                \n                if x < r or x > 1 - r or y < r or y > 1 - r:\n                    valid = False\n                    break\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            \n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            \n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(10):\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "5c3b9e71-c3a1-4115-b65d-443498a2c07b", "generation": 5, "timestamp": 1750790006.7153382, "iteration_found": 7, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: index 26 is out of bounds for axis 0 with size 26"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.4609975066629937, "target_ratio": 0.933964898164324, "combined_score": 0.933964898164324, "eval_time": 12.577818155288696}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4610\n- target_ratio: 0.9340\n- combined_score: 0.9340\n- eval_time: 12.5778\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score, eval_time. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4124, target_ratio: 0.9155, combined_score: 0.9155, eval_time: 8.2766\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4398, target_ratio: 0.9259, combined_score: 0.9259, eval_time: 10.4567\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4610, target_ratio: 0.9340, combined_score: 0.9340, eval_time: 12.5778\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.7393)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3551), Performs well on target_ratio (0.8938), Performs well on combined_score (0.8938), Performs well on eval_time (3.5537)\n\n\n### Program 2 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n### Program 3 (Score: 3.1497)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4398), Performs well on target_ratio (0.9259), Performs well on combined_score (0.9259), Performs well on eval_time (10.4567)\n\n\n### Program 4 (Score: 2.2650)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3834), Performs well on target_ratio (0.9045), Performs well on combined_score (0.9045), Performs well on eval_time (6.1328)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(6):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        else:\n            centers, radii = initialize_pattern_triangular(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11  # Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.11 * (1 - dist_to_center**2) # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.05\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.09\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius + 2 * middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.10\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.07\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2)\n    radii = np.random.rand(n) * 0.08 + 0.04  # Radii between 0.04 and 0.12\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern, denser packing.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    radius = 0.08  # Initial radius, will be adjusted.\n    x_start = radius\n    y_start = radius\n    x_spacing = 2 * radius\n    y_spacing = np.sqrt(3) * radius\n    count = 0\n\n    x = x_start\n    y = y_start\n\n    while count < n:\n        centers[count] = [x, y]\n        radii[count] = radius\n        count += 1\n\n        x += x_spacing\n        if x > 1 - radius:\n            x = x_start + (x_spacing / 2 if int(y / y_spacing) % 2 == 0 else 0) # Stagger rows\n            y += y_spacing\n            if y > 1 - radius:\n                radius *= 0.9 # Reduce radius slightly if too many are needed.\n                x_start = radius\n                y_start = radius\n                x_spacing = 2 * radius\n                y_spacing = np.sqrt(3) * radius\n                x = x_start\n                y = y_start\n                count = 0 #Restart packing with smaller circles\n\n    return centers[:n], radii[:n]\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 20.0  # Increased\n    wall_repulsion = 20.0  # Increased\n    dt = 0.01\n    dampening = 0.95\n    gravity = 0.002  # Add a weak gravity towards the center, reduced\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape) # Reduced magnitude\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0007 # Reduced growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.003, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.001) # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist: # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.9 * radii[i] + 0.1 * available_space # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["After analyzing the current program and the performance metrics, I'll implement a fundamentally different approach to break through the plateau and get closer to the target of 2.637 for the sum of radii.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_graham_pattern,        # Based on mathematical literature\n        initialize_specialized_n26,        # Specialized for exactly n=26\n        initialize_edge_optimized,         # Optimized edge placement\n        initialize_variable_size_pattern,  # Variable sized circles\n        initialize_corner_optimized,       # Corner-optimized pattern\n        initialize_hybrid_pattern          # Hybrid approach\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_graham_pattern(n):\n    \"\"\"\n    Initialize with Graham & Lubachevsky pattern which is known to be \n    efficient for n=26 in a square\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be scaled during optimization\n    base_radius = 0.095\n    \n    # Corner circles (4)\n    corner_radius = base_radius * 1.05\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - slightly smaller\n    edge_radius = base_radius * 0.95\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.5, edge_radius],\n        [0.75, edge_radius],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.5],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(8):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Central large circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = base_radius * 1.15\n    \n    # Inner ring (6 circles)\n    inner_radius = base_radius * 1.0\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius + 0.005\n        centers[13+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13+i] = inner_radius\n    \n    # Remaining circles in intermediate positions\n    mid_radius = base_radius * 0.9\n    remaining_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i in range(7):\n        centers[19+i] = remaining_positions[i]\n        radii[19+i] = mid_radius\n    \n    return centers, radii\n\n\ndef initialize_specialized_n26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set up a pattern with larger circles in key positions\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (5 circles)\n    ring1_radius = 0.1\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + ring1_radius + 0.003\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (10 circles)\n    ring2_radius = 0.09\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        dist = radii[0] + 2 * ring1_radius + ring2_radius + 0.01\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = ring2_radius\n    \n    # Corner circles (4)\n    corner_radius = 0.105\n    centers[16] = [corner_radius, corner_radius]\n    centers[17] = [1 - corner_radius, corner_radius]\n    centers[18] = [corner_radius, 1 - corner_radius]\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[16:20] = corner_radius\n    \n    # Edge circles (6)\n    edge_radius = 0.085\n    centers[20] = [0.5, edge_radius]\n    centers[21] = [0.5, 1 - edge_radius]\n    centers[22] = [edge_radius, 0.5]\n    centers[23] = [1 - edge_radius, 0.5]\n    centers[24] = [0.25, 1 - edge_radius]\n    centers[25] = [0.75, 1 - edge_radius]\n    radii[20:26] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_edge_optimized(n):\n    \"\"\"\n    Initialize with a pattern that places circles optimally along edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (12) - medium\n    edge_radius = 0.095\n    edge_count = 3  # 3 circles per edge\n    \n    # Bottom edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+i] = [x, edge_radius]\n        radii[4+i] = edge_radius\n    \n    # Right edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+edge_count+i] = [1 - edge_radius, y]\n        radii[4+edge_count+i] = edge_radius\n    \n    # Top edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+2*edge_count+i] = [x, 1 - edge_radius]\n        radii[4+2*edge_count+i] = edge_radius\n    \n    # Left edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+3*edge_count+i] = [edge_radius, y]\n        radii[4+3*edge_count+i] = edge_radius\n    \n    # Interior circles (10) - smaller\n    interior_radius = 0.085\n    count = 16\n    \n    # Place interior circles in a grid pattern\n    interior_positions = [\n        [0.25, 0.25], [0.5, 0.25], [0.75, 0.25],\n        [0.25, 0.5], [0.5, 0.5], [0.75, 0.5],\n        [0.25, 0.75], [0.5, 0.75], [0.75, 0.75],\n        [0.33, 0.33]\n    ]\n    \n    for pos in interior_positions:\n        centers[count] = pos\n        radii[count] = interior_radius\n        count += 1\n    \n    return centers, radii\n\n\ndef initialize_variable_size_pattern(n):\n    \"\"\"\n    Initialize with a pattern that uses variable sized circles\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with 3 different circle sizes\n    large_radius = 0.11\n    medium_radius = 0.09\n    small_radius = 0.075\n    \n    # Place large circles (7)\n    large_positions = [\n        [0.5, 0.5],                # Center\n        [large_radius, large_radius],               # Corners\n        [1 - large_radius, large_radius],\n        [large_radius, 1 - large_radius],\n        [1 - large_radius, 1 - large_radius],\n        [0.5, large_radius],       # Middle of edges\n        [0.5, 1 - large_radius]\n    ]\n    \n    for i, pos in enumerate(large_positions):\n        centers[i] = pos\n        radii[i] = large_radius\n    \n    # Place medium circles (10)\n    medium_positions = [\n        [medium_radius, 0.5],\n        [1 - medium_radius, 0.5],\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.25, 0.5],\n        [0.75, 0.5],\n        [0.25, medium_radius],\n        [0.75, medium_radius]\n    ]\n    \n    for i, pos in enumerate(medium_positions):\n        centers[i+7] = pos\n        radii[i+7] = medium_radius\n    \n    # Place small circles (9)\n    small_positions = [\n        [0.25, 1 - medium_radius],\n        [0.75, 1 - medium_radius],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.5, 0.33]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        centers[i+17] = pos\n        radii[i+17] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_corner_optimized(n):\n    \"\"\"\n    Initialize with a pattern that optimizes corner placements\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.3, edge_radius],\n        [0.7, edge_radius],\n        [0.3, 1 - edge_radius],\n        [0.7, 1 - edge_radius],\n        [edge_radius, 0.3],\n        [edge_radius, 0.7],\n        [1 - edge_radius, 0.3],\n        [1 - edge_radius, 0.7]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+4] = pos\n        radii[i+4] = edge_radius\n    \n    # Middle edge circles (4) - medium-small\n    mid_edge_radius = 0.085\n    centers[12] = [0.5, mid_edge_radius]\n    centers[13] = [0.5, 1 - mid_edge_radius]\n    centers[14] = [mid_edge_radius, 0.5]\n    centers[15] = [1 - mid_edge_radius, 0.5]\n    radii[12:16] = mid_edge_radius\n    \n    # Interior circles (10) - variable sizes\n    # Central circle - larger\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.1\n    \n    # Remaining interior circles\n    interior_radius = 0.08\n    interior_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.5],\n        [0.67, 0.5],\n        [0.5, 0.33],\n        [0.5, 0.67],\n        [0.4, 0.4]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        centers[i+17] = pos\n        radii[i+17] = interior_radius\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining multiple approaches\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with gradually decreasing circle sizes from center to edges\n    \n    # Central circle - largest\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (6 circles) - large\n    ring1_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.002\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - large\n    corner_radius = 0.105\n    centers[7] = [corner_radius, corner_radius]\n    centers[8] = [1 - corner_radius, corner_radius]\n    centers[9] = [corner_radius, 1 - corner_radius]\n    centers[10] = [1 - corner_radius, 1 - corner_radius]\n    radii[7:11] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.09\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+11] = pos\n        radii[i+11] = edge_radius\n    \n    # Remaining circles - smaller\n    small_radius = 0.08\n    small_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        centers[i+19] = pos\n        radii[i+19] = small_radius\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with simulated annealing\n    centers, radii = fine_tune(centers, radii, max_iterations)\n    \n    # Final radius optimization\n    centers, radii = optimize_all_radii(centers, radii)\n    \n    return centers, radii\n\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0\n    wall_repulsion = 25.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion - optimized with vectorization\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff * diff, axis=1)\n            min_dist = radii + radii[i]\n            overlap = min_dist**2 > dist_sq\n            \n            for j in range(n):\n                if i != j and overlap[j]:\n                    dist = np.sqrt(dist_sq[j])\n                    min_dist_ij = min_dist[j]\n                    \n                    if dist < min_dist_ij:\n                        overlap_amount = min_dist_ij - dist\n                        direction = diff[j] / (dist + 1e-10)\n                        force = repulsion_strength * overlap_amount * direction\n                        forces[i] += force\n                        forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef grow_radii(centers, radii, iterations=300):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\n\ndef fine_tune(centers, radii, iterations=1000):\n    \"\"\"\n    Fine-tune positions and sizes using simulated annealing\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.02\n    cooling_rate = 0.997\n    \n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Decide what to modify\n        if np.random.random() < 0.7:  # 70% chance to move a circle\n            # Move a circle\n            idx = np.random.randint(0, n)\n            new_centers[idx] += np.random.normal(0, 0.005, 2)\n            \n            # Keep circle within bounds\n            new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n            new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        else:  # 30% chance to adjust radii\n            # Adjust multiple radii\n            num_to_adjust = np.random.randint(1, 4)  # Adjust 1-3 circles\n            indices = np.random.choice(n, num_to_adjust, replace=False)\n            \n            for idx in indices:\n                radius_change = np.random.normal(0, 0.002)\n                new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n        \n        # Check for validity\n        valid = True\n        \n        # Check circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(new_centers[i] - new_centers[j])\n                min_dist = new_radii[i] + new_radii[j]\n                \n                if dist < min_dist - 1e-10:  # Allow tiny overlap for numerical stability\n                    valid = False\n                    break\n            \n            if not valid:\n                break\n        \n        # Check wall constraints\n        if valid:\n            for i in range(n):\n                x, y = new_centers[i]\n                r = new_radii[i]\n                \n                if x < r or x > 1 - r or y < r or y > 1 - r:\n                    valid = False\n                    break\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            \n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            \n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(10):\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}