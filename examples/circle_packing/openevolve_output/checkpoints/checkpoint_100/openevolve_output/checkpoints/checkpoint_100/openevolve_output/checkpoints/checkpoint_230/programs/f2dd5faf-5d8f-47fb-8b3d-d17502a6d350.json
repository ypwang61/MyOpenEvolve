{"id": "f2dd5faf-5d8f-47fb-8b3d-d17502a6d350", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.  It uses a layered approach, starting with a central arrangement and expanding outward.  Also, it employs a more sophisticated collision resolution strategy. Introducing a gradient descent based optimization phase.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a layered pattern\n    centers, radii = initialize_layered_pattern(n)\n\n    # Multi-phase optimization\n    centers, radii = global_optimization(centers, radii)\n    centers, radii = local_refinement(centers, radii)\n    centers, radii = size_optimization(centers, radii)\n    centers, radii = gradient_descent_optimization(centers, radii)\n\n\n    # Final validation and adjustment\n    centers, radii = ensure_valid_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_layered_pattern(n):\n    \"\"\"\n    Initializes circle positions and radii based on a layered pattern,\n    placing larger circles in the center and smaller ones outwards.  Adjusted for better initial guess.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.16  # Slightly larger central circle\n\n    # Layer 1 (6 circles)\n    num_layer1 = min(6, n - 1)\n    radius_layer1 = 0.095  # Slightly larger first layer\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        centers[i + 1] = [0.5 + 0.32 * np.cos(angle), 0.5 + 0.32 * np.sin(angle)]\n        radii[i + 1] = radius_layer1\n\n    # Layer 2 (Remaining circles)\n    num_layer2 = n - 1 - num_layer1\n    radius_layer2 = 0.075  # Slightly larger second layer\n    for i in range(num_layer2):\n        angle = 2 * np.pi * i / num_layer2\n        centers[i + 1 + num_layer1] = [0.5 + 0.47 * np.cos(angle), 0.5 + 0.47 * np.sin(angle)]\n        radii[i + 1 + num_layer1] = radius_layer2\n\n    # Smaller circles in corners, fewer of them\n    corner_radius = 0.065 # Slightly larger corner circles\n    radii[n-1] = corner_radius\n    centers[n-1] = [0.92, 0.92]\n    radii[n-2] = corner_radius\n    centers[n-2] = [0.08, 0.08]\n    #radii[n-3] = corner_radius\n    #centers[n-3] = [0.08, 0.92]\n    #radii[n-4] = corner_radius\n    #centers[n-4] = [0.92, 0.08]\n\n    return centers, radii\n\n\ndef global_optimization(centers, radii, iterations=600):\n    \"\"\"\n    First phase: Global optimization to find good overall arrangement using a\n    more robust collision resolution and adaptive parameters. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 22.0  # Increased repulsion slightly\n    wall_repulsion = 27.0  # Increased wall repulsion slightly\n    dt = 0.01\n    dampening = 0.88  # Reduced dampening slightly\n\n    # Prioritize circles - larger ones get more \"authority\"\n    priorities = np.power(radii, 1.5)\n    priorities = priorities / np.sum(priorities)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Overlap resolution with priority weighting AND adaptive repulsion\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n\n                    # Distribute force according to relative priority\n                    p_i = priorities[i] / (priorities[i] + priorities[j])\n                    p_j = 1 - p_i\n\n                    # Adaptive repulsion: stronger when circles are very close\n                    adaptive_repulsion = repulsion_strength * (1 + (min_dist - dist) / min_dist)\n\n                    force_i = adaptive_repulsion * overlap * direction * p_j\n                    force_j = -adaptive_repulsion * overlap * direction * p_i\n\n                    forces[i] += force_i\n                    forces[j] += force_j\n\n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef local_refinement(centers, radii, iterations=350):\n    \"\"\"\n    Second phase: Local refinement to optimize positions, with more aggressive\n    movement and growth potential evaluation. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Try small random movements\n            best_pos = centers[i].copy()\n            max_move = min(0.022, radii[i] * 0.32)  # Increased movement range slightly\n\n            for _ in range(12):  # Try more random directions, fewer tries for speed\n                angle = np.random.uniform(0, 2 * np.pi)\n                distance = np.random.uniform(0, max_move)\n                test_pos = centers[i] + distance * np.array([np.cos(angle), np.sin(angle)])\n\n                # Check if valid\n                if is_valid_position(test_pos, radii[i], centers, radii, exclude=i):\n                    # Check if it allows for radius growth\n                    growth_potential = calculate_growth_potential(test_pos, i, centers, radii)\n                    current_potential = calculate_growth_potential(centers[i], i, centers, radii)\n\n                    if growth_potential > current_potential:\n                        best_pos = test_pos\n\n            # Update to best position found\n            centers[i] = best_pos\n\n            # Keep within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef size_optimization(centers, radii, iterations=250):\n    \"\"\"\n    Third phase: Optimize circle sizes to maximize sum of radii, with adaptive\n    growth rate and overlap resolution. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Calculate maximum possible radius at current position\n            max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n\n            # Gradually approach maximum radius\n            growth_rate = 0.35  # Adjust growth rate for stability (increased)\n            radii[i] = radii[i] + growth_rate * (max_r - radii[i])\n\n            # Ensure minimum radius\n            radii[i] = max(0.01, radii[i])\n\n        # Periodically check and resolve any overlaps (more frequent)\n        if _ % 8 == 0: # Slightly more frequent overlap resolution\n            centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef gradient_descent_optimization(centers, radii, iterations=150):\n    \"\"\"Optimize circle positions using gradient descent.\"\"\"\n    n = len(centers)\n    learning_rate = 0.01\n\n    def objective_function(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for invalid configurations (overlaps and out-of-bounds)\n        penalty = 0.0\n        for i in range(n):\n            # Boundary penalty\n            penalty += 100 * (max(0, current_radii[i] - current_centers[i][0])**2 +\n                              max(0, current_radii[i] - current_centers[i][1])**2 +\n                              max(0, current_centers[i][0] - (1 - current_radii[i]))**2 +\n                              max(0, current_centers[i][1] - (1 - current_radii[i]))**2)\n\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                min_dist = current_radii[i] + current_radii[j]\n                penalty += 100 * max(0, (min_dist - dist))**2  # Overlap penalty\n\n        return -np.sum(current_radii) + penalty\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Optimization loop\n    for _ in range(iterations):\n        # Calculate gradient numerically (crude but effective)\n        gradient = np.zeros_like(x0)\n        epsilon = 1e-4\n        for i in range(len(x0)):\n            x_plus = x0.copy()\n            x_minus = x0.copy()\n            x_plus[i] += epsilon\n            x_minus[i] -= epsilon\n            gradient[i] = (objective_function(x_plus) - objective_function(x_minus)) / (2 * epsilon)\n\n        # Update positions and radii\n        x0 -= learning_rate * gradient\n\n        # Clip radii to be within reasonable bounds\n        x0[2 * n:] = np.clip(x0[2 * n:], 0.01, 0.4)  # Prevent radii from becoming too small/large\n\n        # Reshape back to centers and radii\n        centers = x0[:2 * n].reshape(n, 2)\n        radii = x0[2 * n:]\n\n        # Enforce bounds after update\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n\n    return centers, radii\n\n\n\ndef calculate_max_radius(pos, centers, radii, exclude=-1):\n    \"\"\"Calculate maximum possible radius at a given position\"\"\"\n    n = len(centers)\n\n    # Distance to walls\n    wall_dist = min(pos[0], pos[1], 1 - pos[0], 1 - pos[1])\n\n    # Distance to other circles\n    circle_dist = float('inf')\n    for j in range(n):\n        if j != exclude:\n            dist = np.linalg.norm(pos - centers[j]) - radii[j]\n            circle_dist = min(circle_dist, dist)\n\n    return min(wall_dist, circle_dist)\n\n\ndef calculate_growth_potential(pos, idx, centers, radii):\n    \"\"\"Calculate potential for radius growth at a position\"\"\"\n    return calculate_max_radius(pos, centers, radii, exclude=idx) - radii[idx]\n\n\ndef is_valid_position(pos, radius, centers, radii, exclude=-1):\n    \"\"\"Check if a position is valid (within bounds and no overlaps)\"\"\"\n    # Check bounds\n    if pos[0] < radius or pos[0] > 1 - radius or pos[1] < radius or pos[1] > 1 - radius:\n        return False\n\n    # Check overlaps\n    for j, (center, r) in enumerate(zip(centers, radii)):\n        if j != exclude:\n            if np.linalg.norm(pos - center) < radius + r - 1e-10:\n                return False\n\n    return True\n\n\ndef resolve_overlaps(centers, radii, iterations=4): #Reduced iterations slightly\n    \"\"\"Resolve any overlaps by slightly adjusting positions and radii, with\n    more aggressive correction.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        overlap_exists = False\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist - 1e-10:\n                    overlap_exists = True\n                    overlap = min_dist - dist\n\n                    # Adjust radii slightly\n                    radii[i] -= overlap * 0.32 * (radii[i] / (radii[i] + radii[j]))  # Increased adjustment slightly\n                    radii[j] -= overlap * 0.32 * (radii[j] / (radii[i] + radii[j]))  # Increased adjustment slightly\n\n                    # Move circles apart\n                    direction = (centers[i] - centers[j]) / (dist + 1e-10)\n                    centers[i] += direction * overlap * 0.32  # Increased movement slightly\n                    centers[j] -= direction * overlap * 0.32  # Increased movement slightly\n\n                    # Ensure minimum radius\n                    radii[i] = max(0.01, radii[i])\n                    radii[j] = max(0.01, radii[j])\n\n        if not overlap_exists:\n            break\n\n    # Final bounds check\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"Final validation to ensure the packing is valid\"\"\"\n    # First resolve any remaining overlaps\n    centers, radii = resolve_overlaps(centers, radii, iterations=8) #Reduced iterations slightly\n\n    n = len(centers)\n    for i in range(n):\n        # Ensure within bounds\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n        # Final radius adjustment\n        max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n        radii[i] = min(radii[i], max_r - 1e-10)\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "820c429d-3e25-45d0-8469-b613e9f88d4e", "generation": 6, "timestamp": 1750808671.9554172, "iteration_found": 216, "metrics": {"validity": 1.0, "sum_radii": 1.9632632480725254, "target_ratio": 0.7450714413937478, "combined_score": 0.7450714413937478, "eval_time": 78.51589298248291}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.340626957371505, "target_ratio": 0.8882834752833036, "combined_score": 0.8882834752833036, "eval_time": 54.44805860519409}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.3406\n- target_ratio: 0.8883\n- combined_score: 0.8883\n- eval_time: 54.4481\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6086, target_ratio: 0.9900, combined_score: 0.9900, eval_time: 188.9534\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6182, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 198.3766\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 10.8197)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (48.4616)\n\n\n### Program 2 (Score: 40.7964)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6182), Performs well on target_ratio (0.9936), Performs well on combined_score (0.9936), Performs well on eval_time (198.3766)\n\n\n### Program 3 (Score: 6.2195)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and gradient-based refinement\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport math\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1820), Performs well on target_ratio (0.8281), Performs well on combined_score (0.8281), Performs well on eval_time (26.2592)\n\n\n### Program 4 (Score: 5.3470)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4581), Performs well on target_ratio (0.9329), Performs well on combined_score (0.9329), Performs well on eval_time (21.4112)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.8531)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nfrom scipy.spatial import Delaunay\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.  It uses a layered approach, starting with a central arrangement and expanding outward.  Also, it employs a more sophisticated collision resolution strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a layered pattern\n    centers, radii = initialize_layered_pattern(n)\n\n    # Multi-phase optimization\n    centers, radii = global_optimization(centers, radii)\n    centers, radii = local_refinement(centers, radii)\n    centers, radii = size_optimization(centers, radii)\n\n    # Final validation and adjustment\n    centers, radii = ensure_valid_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_layered_pattern(n):\n    \"\"\"\n    Initializes circle positions and radii based on a layered pattern,\n    placing larger circles in the center and smaller ones outwards.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Start with a central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Layer 1 (6 circles)\n    num_layer1 = min(6, n - 1)  # Ensure we don't exceed n\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        centers[i + 1] = [0.5 + 0.3 * np.cos(angle), 0.5 + 0.3 * np.sin(angle)]\n        radii[i + 1] = 0.09\n\n    # Layer 2 (Remaining circles)\n    num_layer2 = n - 1 - num_layer1\n    for i in range(num_layer2):\n        angle = 2 * np.pi * i / num_layer2\n        centers[i + 1 + num_layer1] = [0.5 + 0.45 * np.cos(angle), 0.5 + 0.45 * np.sin(angle)]\n        radii[i + 1 + num_layer1] = 0.07\n\n    # Smaller circles in corners\n    radii[n-1] = 0.06\n    centers[n-1] = [0.9, 0.9]\n    radii[n-2] = 0.06\n    centers[n-2] = [0.1, 0.1]\n    radii[n-3] = 0.06\n    centers[n-3] = [0.1, 0.9]\n    radii[n-4] = 0.06\n    centers[n-4] = [0.9, 0.1]\n\n    return centers, radii\n\n\ndef global_optimization(centers, radii, iterations=700):\n    \"\"\"\n    First phase: Global optimization to find good overall arrangement using a\n    more robust collision resolution and adaptive parameters.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 20.0  # Increased repulsion\n    wall_repulsion = 25.0  # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.9  # Reduced dampening\n\n    # Prioritize circles - larger ones get more \"authority\"\n    priorities = np.power(radii, 1.5)\n    priorities = priorities / np.sum(priorities)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Overlap resolution with priority weighting AND adaptive repulsion\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n\n                    # Distribute force according to relative priority\n                    p_i = priorities[i] / (priorities[i] + priorities[j])\n                    p_j = 1 - p_i\n\n                    # Adaptive repulsion: stronger when circles are very close\n                    adaptive_repulsion = repulsion_strength * (1 + (min_dist - dist) / min_dist)\n\n                    force_i = adaptive_repulsion * overlap * direction * p_j\n                    force_j = -adaptive_repulsion * overlap * direction * p_i\n\n                    forces[i] += force_i\n                    forces[j] += force_j\n\n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef local_refinement(centers, radii, iterations=400):\n    \"\"\"\n    Second phase: Local refinement to optimize positions, with more aggressive\n    movement and growth potential evaluation.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Try small random movements\n            best_pos = centers[i].copy()\n            max_move = min(0.02, radii[i] * 0.3)  # Increased movement range\n\n            for _ in range(15):  # Try more random directions\n                angle = np.random.uniform(0, 2 * np.pi)\n                distance = np.random.uniform(0, max_move)\n                test_pos = centers[i] + distance * np.array([np.cos(angle), np.sin(angle)])\n\n                # Check if valid\n                if is_valid_position(test_pos, radii[i], centers, radii, exclude=i):\n                    # Check if it allows for radius growth\n                    growth_potential = calculate_growth_potential(test_pos, i, centers, radii)\n                    current_potential = calculate_growth_potential(centers[i], i, centers, radii)\n\n                    if growth_potential > current_potential:\n                        best_pos = test_pos\n\n            # Update to best position found\n            centers[i] = best_pos\n\n            # Keep within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef size_optimization(centers, radii, iterations=300):\n    \"\"\"\n    Third phase: Optimize circle sizes to maximize sum of radii, with adaptive\n    growth rate and overlap resolution.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Calculate maximum possible radius at current position\n            max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n\n            # Gradually approach maximum radius\n            growth_rate = 0.3  # Adjust growth rate for stability (increased)\n            radii[i] = radii[i] + growth_rate * (max_r - radii[i])\n\n            # Ensure minimum radius\n            radii[i] = max(0.01, radii[i])\n\n        # Periodically check and resolve any overlaps (more frequent)\n        if _ % 10 == 0:\n            centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\n\ndef calculate_max_radius(pos, centers, radii, exclude=-1):\n    \"\"\"Calculate maximum possible radius at a given position\"\"\"\n    n = len(centers)\n\n    # Distance to walls\n    wall_dist = min(pos[0], pos[1], 1 - pos[0], 1 - pos[1])\n\n    # Distance to other circles\n    circle_dist = float('inf')\n    for j in range(n):\n        if j != exclude:\n            dist = np.linalg.norm(pos - centers[j]) - radii[j]\n            circle_dist = min(circle_dist, dist)\n\n    return min(wall_dist, circle_dist)\n\n\ndef calculate_growth_potential(pos, idx, centers, radii):\n    \"\"\"Calculate potential for radius growth at a position\"\"\"\n    return calculate_max_radius(pos, centers, radii, exclude=idx) - radii[idx]\n\n\ndef is_valid_position(pos, radius, centers, radii, exclude=-1):\n    \"\"\"Check if a position is valid (within bounds and no overlaps)\"\"\"\n    # Check bounds\n    if pos[0] < radius or pos[0] > 1 - radius or pos[1] < radius or pos[1] > 1 - radius:\n        return False\n\n    # Check overlaps\n    for j, (center, r) in enumerate(zip(centers, radii)):\n        if j != exclude:\n            if np.linalg.norm(pos - center) < radius + r - 1e-10:\n                return False\n\n    return True\n\n\ndef resolve_overlaps(centers, radii, iterations=5):\n    \"\"\"Resolve any overlaps by slightly adjusting positions and radii, with\n    more aggressive correction.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        overlap_exists = False\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist - 1e-10:\n                    overlap_exists = True\n                    overlap = min_dist - dist\n\n                    # Adjust radii slightly\n                    radii[i] -= overlap * 0.3 * (radii[i] / (radii[i] + radii[j]))  # Increased adjustment\n                    radii[j] -= overlap * 0.3 * (radii[j] / (radii[i] + radii[j]))  # Increased adjustment\n\n                    # Move circles apart\n                    direction = (centers[i] - centers[j]) / (dist + 1e-10)\n                    centers[i] += direction * overlap * 0.3  # Increased movement\n                    centers[j] -= direction * overlap * 0.3  # Increased movement\n\n                    # Ensure minimum radius\n                    radii[i] = max(0.01, radii[i])\n                    radii[j] = max(0.01, radii[j])\n\n        if not overlap_exists:\n            break\n\n    # Final bounds check\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"Final validation to ensure the packing is valid\"\"\"\n    # First resolve any remaining overlaps\n    centers, radii = resolve_overlaps(centers, radii, iterations=10)\n\n    n = len(centers)\n    for i in range(n):\n        # Ensure within bounds\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n        # Final radius adjustment\n        max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n        radii[i] = min(radii[i], max_r - 1e-10)\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.  It uses a layered approach, starting with a central arrangement and expanding outward.  Also, it employs a more sophisticated collision resolution strategy. Introducing a gradient descent based optimization phase.\n\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a layered pattern\n    centers, radii = initialize_layered_pattern(n)\n\n    # Multi-phase optimization\n    centers, radii = global_optimization(centers, radii)\n    centers, radii = local_refinement(centers, radii)\n    centers, radii = size_optimization(centers, radii)\n    centers, radii = gradient_descent_optimization(centers, radii)\n\n\n    # Final validation and adjustment\n    centers, radii = ensure_valid_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_layered_pattern(n):\n    \"\"\"\n    Initializes circle positions and radii based on a layered pattern,\n    placing larger circles in the center and smaller ones outwards.  Adjusted for better initial guess.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.16  # Slightly larger central circle\n\n    # Layer 1 (6 circles)\n    num_layer1 = min(6, n - 1)\n    radius_layer1 = 0.095  # Slightly larger first layer\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        centers[i + 1] = [0.5 + 0.32 * np.cos(angle), 0.5 + 0.32 * np.sin(angle)]\n        radii[i + 1] = radius_layer1\n\n    # Layer 2 (Remaining circles)\n    num_layer2 = n - 1 - num_layer1\n    radius_layer2 = 0.075  # Slightly larger second layer\n    for i in range(num_layer2):\n        angle = 2 * np.pi * i / num_layer2\n        centers[i + 1 + num_layer1] = [0.5 + 0.47 * np.cos(angle), 0.5 + 0.47 * np.sin(angle)]\n        radii[i + 1 + num_layer1] = radius_layer2\n\n    # Smaller circles in corners, fewer of them\n    corner_radius = 0.065 # Slightly larger corner circles\n    radii[n-1] = corner_radius\n    centers[n-1] = [0.92, 0.92]\n    radii[n-2] = corner_radius\n    centers[n-2] = [0.08, 0.08]\n    #radii[n-3] = corner_radius\n    #centers[n-3] = [0.08, 0.92]\n    #radii[n-4] = corner_radius\n    #centers[n-4] = [0.92, 0.08]\n\n    return centers, radii\n\n\ndef global_optimization(centers, radii, iterations=600):\n    \"\"\"\n    First phase: Global optimization to find good overall arrangement using a\n    more robust collision resolution and adaptive parameters. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 22.0  # Increased repulsion slightly\n    wall_repulsion = 27.0  # Increased wall repulsion slightly\n    dt = 0.01\n    dampening = 0.88  # Reduced dampening slightly\n\n    # Prioritize circles - larger ones get more \"authority\"\n    priorities = np.power(radii, 1.5)\n    priorities = priorities / np.sum(priorities)\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Overlap resolution with priority weighting AND adaptive repulsion\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n\n                    # Distribute force according to relative priority\n                    p_i = priorities[i] / (priorities[i] + priorities[j])\n                    p_j = 1 - p_i\n\n                    # Adaptive repulsion: stronger when circles are very close\n                    adaptive_repulsion = repulsion_strength * (1 + (min_dist - dist) / min_dist)\n\n                    force_i = adaptive_repulsion * overlap * direction * p_j\n                    force_j = -adaptive_repulsion * overlap * direction * p_i\n\n                    forces[i] += force_i\n                    forces[j] += force_j\n\n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef local_refinement(centers, radii, iterations=350):\n    \"\"\"\n    Second phase: Local refinement to optimize positions, with more aggressive\n    movement and growth potential evaluation. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Try small random movements\n            best_pos = centers[i].copy()\n            max_move = min(0.022, radii[i] * 0.32)  # Increased movement range slightly\n\n            for _ in range(12):  # Try more random directions, fewer tries for speed\n                angle = np.random.uniform(0, 2 * np.pi)\n                distance = np.random.uniform(0, max_move)\n                test_pos = centers[i] + distance * np.array([np.cos(angle), np.sin(angle)])\n\n                # Check if valid\n                if is_valid_position(test_pos, radii[i], centers, radii, exclude=i):\n                    # Check if it allows for radius growth\n                    growth_potential = calculate_growth_potential(test_pos, i, centers, radii)\n                    current_potential = calculate_growth_potential(centers[i], i, centers, radii)\n\n                    if growth_potential > current_potential:\n                        best_pos = test_pos\n\n            # Update to best position found\n            centers[i] = best_pos\n\n            # Keep within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef size_optimization(centers, radii, iterations=250):\n    \"\"\"\n    Third phase: Optimize circle sizes to maximize sum of radii, with adaptive\n    growth rate and overlap resolution. Reduced iterations for speed.\n    \"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        for i in range(n):\n            # Calculate maximum possible radius at current position\n            max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n\n            # Gradually approach maximum radius\n            growth_rate = 0.35  # Adjust growth rate for stability (increased)\n            radii[i] = radii[i] + growth_rate * (max_r - radii[i])\n\n            # Ensure minimum radius\n            radii[i] = max(0.01, radii[i])\n\n        # Periodically check and resolve any overlaps (more frequent)\n        if _ % 8 == 0: # Slightly more frequent overlap resolution\n            centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef gradient_descent_optimization(centers, radii, iterations=150):\n    \"\"\"Optimize circle positions using gradient descent.\"\"\"\n    n = len(centers)\n    learning_rate = 0.01\n\n    def objective_function(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for invalid configurations (overlaps and out-of-bounds)\n        penalty = 0.0\n        for i in range(n):\n            # Boundary penalty\n            penalty += 100 * (max(0, current_radii[i] - current_centers[i][0])**2 +\n                              max(0, current_radii[i] - current_centers[i][1])**2 +\n                              max(0, current_centers[i][0] - (1 - current_radii[i]))**2 +\n                              max(0, current_centers[i][1] - (1 - current_radii[i]))**2)\n\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                min_dist = current_radii[i] + current_radii[j]\n                penalty += 100 * max(0, (min_dist - dist))**2  # Overlap penalty\n\n        return -np.sum(current_radii) + penalty\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Optimization loop\n    for _ in range(iterations):\n        # Calculate gradient numerically (crude but effective)\n        gradient = np.zeros_like(x0)\n        epsilon = 1e-4\n        for i in range(len(x0)):\n            x_plus = x0.copy()\n            x_minus = x0.copy()\n            x_plus[i] += epsilon\n            x_minus[i] -= epsilon\n            gradient[i] = (objective_function(x_plus) - objective_function(x_minus)) / (2 * epsilon)\n\n        # Update positions and radii\n        x0 -= learning_rate * gradient\n\n        # Clip radii to be within reasonable bounds\n        x0[2 * n:] = np.clip(x0[2 * n:], 0.01, 0.4)  # Prevent radii from becoming too small/large\n\n        # Reshape back to centers and radii\n        centers = x0[:2 * n].reshape(n, 2)\n        radii = x0[2 * n:]\n\n        # Enforce bounds after update\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n\n    return centers, radii\n\n\n\ndef calculate_max_radius(pos, centers, radii, exclude=-1):\n    \"\"\"Calculate maximum possible radius at a given position\"\"\"\n    n = len(centers)\n\n    # Distance to walls\n    wall_dist = min(pos[0], pos[1], 1 - pos[0], 1 - pos[1])\n\n    # Distance to other circles\n    circle_dist = float('inf')\n    for j in range(n):\n        if j != exclude:\n            dist = np.linalg.norm(pos - centers[j]) - radii[j]\n            circle_dist = min(circle_dist, dist)\n\n    return min(wall_dist, circle_dist)\n\n\ndef calculate_growth_potential(pos, idx, centers, radii):\n    \"\"\"Calculate potential for radius growth at a position\"\"\"\n    return calculate_max_radius(pos, centers, radii, exclude=idx) - radii[idx]\n\n\ndef is_valid_position(pos, radius, centers, radii, exclude=-1):\n    \"\"\"Check if a position is valid (within bounds and no overlaps)\"\"\"\n    # Check bounds\n    if pos[0] < radius or pos[0] > 1 - radius or pos[1] < radius or pos[1] > 1 - radius:\n        return False\n\n    # Check overlaps\n    for j, (center, r) in enumerate(zip(centers, radii)):\n        if j != exclude:\n            if np.linalg.norm(pos - center) < radius + r - 1e-10:\n                return False\n\n    return True\n\n\ndef resolve_overlaps(centers, radii, iterations=4): #Reduced iterations slightly\n    \"\"\"Resolve any overlaps by slightly adjusting positions and radii, with\n    more aggressive correction.\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        overlap_exists = False\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist - 1e-10:\n                    overlap_exists = True\n                    overlap = min_dist - dist\n\n                    # Adjust radii slightly\n                    radii[i] -= overlap * 0.32 * (radii[i] / (radii[i] + radii[j]))  # Increased adjustment slightly\n                    radii[j] -= overlap * 0.32 * (radii[j] / (radii[i] + radii[j]))  # Increased adjustment slightly\n\n                    # Move circles apart\n                    direction = (centers[i] - centers[j]) / (dist + 1e-10)\n                    centers[i] += direction * overlap * 0.32  # Increased movement slightly\n                    centers[j] -= direction * overlap * 0.32  # Increased movement slightly\n\n                    # Ensure minimum radius\n                    radii[i] = max(0.01, radii[i])\n                    radii[j] = max(0.01, radii[j])\n\n        if not overlap_exists:\n            break\n\n    # Final bounds check\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"Final validation to ensure the packing is valid\"\"\"\n    # First resolve any remaining overlaps\n    centers, radii = resolve_overlaps(centers, radii, iterations=8) #Reduced iterations slightly\n\n    n = len(centers)\n    for i in range(n):\n        # Ensure within bounds\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n        # Final radius adjustment\n        max_r = calculate_max_radius(centers[i], centers, radii, exclude=i)\n        radii[i] = min(radii[i], max_r - 1e-10)\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}