{"id": "b5a33306-7637-4e2e-af7b-e9cbb858efbb", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Try multiple initializations and optimization strategies\n    for strategy in range(3):\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        else:\n            centers, radii = initialize_pattern_hybrid(n)\n            \n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=400)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11  # Larger center circle\n    \n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n    \n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing/2 + i*spacing, spacing/2 + j*spacing]\n                \n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5)**2 + (centers[count][1] - 0.5)**2)\n                radii[count] = 0.11 * (1 - dist_to_center)\n                count += 1\n    \n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.05\n    \n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n    \n    # Middle ring (6 circles)\n    middle_radius = 0.09\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi/6\n        dist = radii[0] + 2*inner_radius + middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n    \n    # Outer partial ring (9 circles)\n    outer_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2*inner_radius + 2*middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    \n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 15.0\n    wall_repulsion = 15.0\n    dt = 0.01\n    dampening = 0.95\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter/iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.01 * temperature, centers.shape)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    \n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n        \n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n        \n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n        \n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n                \n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n                \n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n    \n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n    \n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Randomly perturb positions\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.01, 2)\n        \n        # Randomly adjust radius\n        radius_change = np.random.normal(0, 0.005)\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n        \n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        \n        # Check for overlaps\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n                \n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            if dist < new_radii[idx] + new_radii[i]:\n                valid = False\n                break\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            if new_sum > np.sum(radii) or np.random.random() < np.exp((new_sum - np.sum(radii)) / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    # Calculate available space for each circle\n    for _ in range(10):  # Multiple iterations for convergence\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = available_space\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e66a31b3-146a-4b2a-ae44-5c069962917e", "generation": 2, "timestamp": 1750789749.712525, "iteration_found": 3, "metrics": {"validity": 1.0, "sum_radii": 2.3833883714733695, "target_ratio": 0.9045117159291726, "combined_score": 0.9045117159291726, "eval_time": 6.132775783538818}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 0.0000, sum_radii: 0.0000, target_ratio: 0.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 0.0000, sum_radii: 0.0000, target_ratio: 0.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4124, target_ratio: 0.9155, combined_score: 0.9155, eval_time: 8.2766\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.7040)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (8.2766)\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a carefully designed pattern\n    centers, radii = initialize_pattern(n)\n\n    # Optimization phases\n    centers, radii = optimize(centers, radii, iterations=500)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern(n):\n    \"\"\"\n    Initialize circle positions and radii based on a hybrid hexagonal/corner packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Hexagonal core (19 circles)\n    radii[:19] = 0.095\n    centers[0] = [0.5, 0.5]\n    count = 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + 2 * radii[0] * np.cos(angle), 0.5 + 2 * radii[0] * np.sin(angle)]\n        count += 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        centers[count] = [0.5 + 4 * radii[0] * np.cos(angle), 0.5 + 4 * radii[0] * np.sin(angle)]\n        count += 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + 6 * radii[0] * np.cos(angle), 0.5 + 6 * radii[0] * np.sin(angle)]\n        count += 1\n\n    # Corner circles (4 circles)\n    radii[19:23] = 0.08\n    centers[19] = [radii[19], radii[19]]\n    centers[20] = [1 - radii[20], radii[20]]\n    centers[21] = [radii[21], 1 - radii[21]]\n    centers[22] = [1 - radii[22], 1 - radii[22]]\n\n    # Edge circles (3 circles)\n    radii[23:] = 0.075\n    centers[23] = [0.5, radii[23]]\n    centers[24] = [0.5, 1 - radii[24]]\n    centers[25] = [radii[25], 0.5]\n\n    return centers, radii\n\n\ndef optimize(centers, radii, iterations):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 10.0\n    wall_repulsion = 10.0\n    dt = 0.01\n    dampening = 0.98\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Radius adjustment based on local density\n        for i in range(n):\n            # Calculate available space\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n            # Grow or shrink radius based on available space\n            radii[i] += 0.05 * available_space * dt\n\n            # Clamp radii\n            radii[i] = max(0.01, radii[i])\n            radii[i] = min(0.2, radii[i])\n\n            # Keep circle within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Based on my analysis of the current program and the goal of reaching a sum of radii closer to 2.637, I'll implement several key improvements:\n\n1. Use a more sophisticated initialization pattern with variable-sized circles\n2. Implement a multi-stage optimization approach with different strategies\n3. Add specialized corner and edge handling\n4. Implement a more advanced physics model with targeted growth strategies\n5. Add simulated annealing to escape local optima\n\nHere's my rewritten program:\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Try multiple initializations and optimization strategies\n    for strategy in range(3):\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        else:\n            centers, radii = initialize_pattern_hybrid(n)\n            \n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=400)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11  # Larger center circle\n    \n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n    \n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing/2 + i*spacing, spacing/2 + j*spacing]\n                \n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5)**2 + (centers[count][1] - 0.5)**2)\n                radii[count] = 0.11 * (1 - dist_to_center)\n                count += 1\n    \n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.05\n    \n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n    \n    # Middle ring (6 circles)\n    middle_radius = 0.09\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi/6\n        dist = radii[0] + 2*inner_radius + middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n    \n    # Outer partial ring (9 circles)\n    outer_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2*inner_radius + 2*middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    \n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 15.0\n    wall_repulsion = 15.0\n    dt = 0.01\n    dampening = 0.95\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter/iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.01 * temperature, centers.shape)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    \n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n        \n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n        \n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n        \n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n                \n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n                \n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n    \n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n    \n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Randomly perturb positions\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.01, 2)\n        \n        # Randomly adjust radius\n        radius_change = np.random.normal(0, 0.005)\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n        \n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        \n        # Check for overlaps\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n                \n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            if dist < new_radii[idx] + new_radii[i]:\n                valid = False\n                break\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            if new_sum > np.sum(radii) or np.random.random() < np.exp((new_sum - np.sum(radii)) / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    # Calculate available space for each circle\n    for _ in range(10):  # Multiple iterations for convergence\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = available_space\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\nThis rewritten program introduces several significant improvements:\n\n1. **Multiple initialization strategies** - Testing hexagonal, grid, and hybrid patterns to find the best starting point\n\n2. **Multi-stage optimization approach**:\n   - Stage 1: Resolves overlaps and establishes basic structure\n   - Stage 2: Grows radii while maintaining valid packing\n   - Stage 3: Fine-tunes positions and sizes with simulated annealing\n\n3. **Variable-sized circles** - Different sized circles for different positions (center, corners, edges)\n\n4. **Simulated annealing** - Helps escape local optima by occasionally accepting worse solutions\n\n5. **Specialized corner and edge handling** - Optimizes the placement of circles at corners and edges\n\n6. **Periodic global radius optimization** - Periodically optimizes all radii to fill available space\n\n7. **Best solution tracking** - Keeps track of the best solution found during optimization\n\nThese improvements should significantly boost the sum of radii toward the target of 2.637 by exploring a wider range of packing configurations and using more sophisticated optimization techniques."]}}}