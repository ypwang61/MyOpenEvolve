{"id": "1e880445-137f-4b5f-92e4-e00755f832a6", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(8):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        elif strategy == 5:\n            centers, radii = initialize_pattern_radial(n)\n        elif strategy == 6:\n            centers, radii = initialize_pattern_triangular(n) # New strategy\n        else:\n            centers, radii = initialize_pattern_clustered(n)  # New strategy\n\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=350) # increased iterations\n        centers, radii = optimize_stage2(centers, radii, iterations=350)  # Increased iterations\n        centers, radii = optimize_stage3(centers, radii, iterations=600)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.098\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.95  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.088\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.95 + ring_radius * 1.95 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - reduce number to fit within 26\n    edge_radius = 0.083\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    #centers[count] = [edge_radius, 0.5] # remove one edge circle\n    #radii[count] = edge_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / (grid_size + 0.5) # Adjust spacing for better distribution\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 1.2 + i * spacing, spacing / 1.2 + j * spacing] # Adjusted center\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.065 + 0.045 * (1 - dist_to_center**2) # Quadratic falloff, adjusted sizes\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.055 # Adjusted size\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125 # Adjusted size\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.105 # Adjusted size\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.095 # Adjusted size\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.9 + middle_radius * 0.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (5 circles) - reduce number\n    outer_radius = 0.085 # Adjusted size\n    for i in range(5):\n        angle = 2 * np.pi * i / 5 # reduce number\n        dist = radii[0] + 2 * inner_radius * 1.9 + 2 * middle_radius * 0.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093 # Adjusted size\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.105 # Adjusted size\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining)) + 1 # Adjusted grid size\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.075 # Adjusted size\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii, scaled appropriately\"\"\"\n    centers = np.random.rand(n, 2) * 0.7 + 0.15 # Ensure circles aren't too close to the edges initially\n    radii = np.random.rand(n) * 0.05 + 0.06  # Radii between 0.06 and 0.11\n    return centers, radii\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger circle in center\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13 # Adjusted size\n\n    remaining = n - 1\n    angles = np.linspace(0, 2 * np.pi, remaining, endpoint=False)\n    radius_offset = 0.35 # Adjusted offset\n\n    for i in range(remaining):\n        centers[i+1] = [0.5 + radius_offset * np.cos(angles[i]), 0.5 + radius_offset * np.sin(angles[i])]\n        radii[i+1] = 0.075 # Adjusted size\n\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    num_rows = 6  # Adjust for 26 circles\n    count = 0\n    y_offset = 0.1\n\n    for row in range(num_rows):\n        x_offset = (0.5 / num_rows) * (row % 2)  # Staggered rows\n        num_circles_in_row = num_rows - (row // 2) # Adjust circles in each row\n        x_spacing = 1 / (num_circles_in_row + 1)\n        y = y_offset + row * x_spacing * np.sqrt(3) / 2\n\n        for col in range(num_circles_in_row):\n            if count < n:\n                x = x_offset + x_spacing * (col + 1)\n                centers[count, 0] = x\n                centers[count, 1] = y\n                radii[count] = 0.07 + 0.02 * (1 - (row/num_rows)) # Vary radius based on row\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_clustered(n):\n    \"\"\"Initialize with circles clustered in the center and corners.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    num_clusters = 4\n    circles_per_cluster = n // num_clusters\n\n    cluster_centers = [[0.2, 0.2], [0.8, 0.2], [0.2, 0.8], [0.8, 0.8]]\n    count = 0\n\n    for i in range(num_clusters):\n        for j in range(circles_per_cluster):\n            if count < n:\n                x = cluster_centers[i][0] + np.random.normal(0, 0.05)\n                y = cluster_centers[i][1] + np.random.normal(0, 0.05)\n                centers[count, 0] = x\n                centers[count, 1] = y\n                radii[count] = 0.05 + np.random.rand() * 0.04\n                count += 1\n\n    # Distribute remaining circles randomly\n    while count < n:\n        centers[count, 0] = np.random.rand() * 0.8 + 0.1\n        centers[count, 1] = np.random.rand() * 0.8 + 0.1\n        radii[count] = 0.06 + np.random.rand() * 0.03\n        count += 1\n    return centers, radii\n\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure using a more robust force model\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0  # Increased repulsion\n    wall_repulsion = 30.0  # Increased wall repulsion\n    dt = 0.02  # Adjusted time step\n    dampening = 0.92 # Reduced dampening\n    gravity = 0.0035  # Add a weak gravity towards the center\n    min_radius = 0.01  # Minimum radius constraint\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction / (radii[i] * radii[j])  # Inverse radius weighting\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r)) / r  # Inverse radius weighting\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - reduced perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n\n        # Keep circles within bounds and enforce minimum radius\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n            radii[i] = max(radii[i], min_radius) # Enforce minimum radius\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, using a more sophisticated growth strategy.\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.003 # Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap / radii[i]  # Inverse radius weighting\n                    overlaps[j] += overlap / radii[j]  # Inverse radius weighting\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                overlaps[i] += (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                overlaps[i] += (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                overlaps[i] += (y - (1 - r)) / r  # Inverse radius weighting\n\n        # Grow circles without overlaps, prioritizing larger circles\n        growth_order = np.argsort(radii)[::-1]  # Grow largest circles first\n        for i in growth_order:\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.05) # Reduced shrinkage factor\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes using a more aggressive simulated annealing\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.05  # Initial temperature for simulated annealing\n    cooling_rate = 0.992  # Cooling rate - slower cooling\n    position_perturbation = 0.016 # Increased position perturbation\n    radius_perturbation = 0.008 # Increased radius perturbation\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius - more aggressive perturbations\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, position_perturbation, 2)\n        radius_change = np.random.normal(0, radius_perturbation)\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - best_sum # Use best_sum instead of np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n                best_sum = new_sum\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n\n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "b9ebd515-8222-4ee4-b45d-579e33bff02c", "generation": 6, "timestamp": 1750799315.6932254, "iteration_found": 126, "metrics": {"validity": 1.0, "sum_radii": 1.7043134171900753, "target_ratio": 0.6467982607931976, "combined_score": 0.6467982607931976, "eval_time": 15.265385150909424}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.400158135387835, "target_ratio": 0.9108759527088558, "combined_score": 0.9108759527088558, "eval_time": 12.269848823547363}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4002\n- target_ratio: 0.9109\n- combined_score: 0.9109\n- eval_time: 12.2698\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8375, target_ratio: 0.6974, combined_score: 0.6974, eval_time: 93.8945\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 10.6921)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6306), Performs well on target_ratio (0.9983), Performs well on combined_score (0.9983), Performs well on eval_time (47.8335)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 1.7393)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3551), Performs well on target_ratio (0.8938), Performs well on combined_score (0.8938), Performs well on eval_time (3.5537)\n\n\n### Program 4 (Score: 3.8023)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4636), Performs well on target_ratio (0.9350), Performs well on combined_score (0.9350), Performs well on eval_time (13.6778)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 6.7041)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(6):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        else:\n            centers, radii = initialize_pattern_radial(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11  # Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.11 * (1 - dist_to_center**2) # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.05\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.09\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius + 2 * middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.10\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.07\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii, scaled appropriately\"\"\"\n    centers = np.random.rand(n, 2) * 0.8 + 0.1 # Ensure circles aren't too close to the edges initially\n    radii = np.random.rand(n) * 0.06 + 0.05  # Radii between 0.05 and 0.11\n    return centers, radii\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger circle in center\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    remaining = n - 1\n    angles = np.linspace(0, 2 * np.pi, remaining, endpoint=False)\n    radius_offset = 0.3\n\n    for i in range(remaining):\n        centers[i+1] = [0.5 + radius_offset * np.cos(angles[i]), 0.5 + radius_offset * np.sin(angles[i])]\n        radii[i+1] = 0.07\n\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure using a more robust force model\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0  # Increased repulsion\n    wall_repulsion = 25.0  # Increased wall repulsion\n    dt = 0.02  # Adjusted time step\n    dampening = 0.9\n    gravity = 0.003  # Add a weak gravity towards the center\n    min_radius = 0.01  # Minimum radius constraint\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction / (radii[i] * radii[j])  # Inverse radius weighting\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r)) / r  # Inverse radius weighting\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - reduced perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n\n        # Keep circles within bounds and enforce minimum radius\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n            radii[i] = max(radii[i], min_radius) # Enforce minimum radius\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, using a more sophisticated growth strategy.\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0025 # Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap / radii[i]  # Inverse radius weighting\n                    overlaps[j] += overlap / radii[j]  # Inverse radius weighting\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                overlaps[i] += (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                overlaps[i] += (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                overlaps[i] += (y - (1 - r)) / r  # Inverse radius weighting\n\n        # Grow circles without overlaps, prioritizing larger circles\n        growth_order = np.argsort(radii)[::-1]  # Grow largest circles first\n        for i in growth_order:\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.05) # Reduced shrinkage factor\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes using a more aggressive simulated annealing\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.05  # Initial temperature for simulated annealing\n    cooling_rate = 0.99  # Cooling rate - slower cooling\n    position_perturbation = 0.015 # Increased position perturbation\n    radius_perturbation = 0.007 # Increased radius perturbation\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius - more aggressive perturbations\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, position_perturbation, 2)\n        radius_change = np.random.normal(0, radius_perturbation)\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - best_sum # Use best_sum instead of np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n                best_sum = new_sum\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n\n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(8):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        elif strategy == 5:\n            centers, radii = initialize_pattern_radial(n)\n        elif strategy == 6:\n            centers, radii = initialize_pattern_triangular(n) # New strategy\n        else:\n            centers, radii = initialize_pattern_clustered(n)  # New strategy\n\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=350) # increased iterations\n        centers, radii = optimize_stage2(centers, radii, iterations=350)  # Increased iterations\n        centers, radii = optimize_stage3(centers, radii, iterations=600)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.098\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.95  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.088\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.95 + ring_radius * 1.95 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - reduce number to fit within 26\n    edge_radius = 0.083\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [0.5, 1 - edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    #centers[count] = [edge_radius, 0.5] # remove one edge circle\n    #radii[count] = edge_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / (grid_size + 0.5) # Adjust spacing for better distribution\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 1.2 + i * spacing, spacing / 1.2 + j * spacing] # Adjusted center\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.065 + 0.045 * (1 - dist_to_center**2) # Quadratic falloff, adjusted sizes\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.055 # Adjusted size\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125 # Adjusted size\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.105 # Adjusted size\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.095 # Adjusted size\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.9 + middle_radius * 0.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (5 circles) - reduce number\n    outer_radius = 0.085 # Adjusted size\n    for i in range(5):\n        angle = 2 * np.pi * i / 5 # reduce number\n        dist = radii[0] + 2 * inner_radius * 1.9 + 2 * middle_radius * 0.9 # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093 # Adjusted size\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.105 # Adjusted size\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining)) + 1 # Adjusted grid size\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.075 # Adjusted size\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii, scaled appropriately\"\"\"\n    centers = np.random.rand(n, 2) * 0.7 + 0.15 # Ensure circles aren't too close to the edges initially\n    radii = np.random.rand(n) * 0.05 + 0.06  # Radii between 0.06 and 0.11\n    return centers, radii\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger circle in center\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13 # Adjusted size\n\n    remaining = n - 1\n    angles = np.linspace(0, 2 * np.pi, remaining, endpoint=False)\n    radius_offset = 0.35 # Adjusted offset\n\n    for i in range(remaining):\n        centers[i+1] = [0.5 + radius_offset * np.cos(angles[i]), 0.5 + radius_offset * np.sin(angles[i])]\n        radii[i+1] = 0.075 # Adjusted size\n\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    num_rows = 6  # Adjust for 26 circles\n    count = 0\n    y_offset = 0.1\n\n    for row in range(num_rows):\n        x_offset = (0.5 / num_rows) * (row % 2)  # Staggered rows\n        num_circles_in_row = num_rows - (row // 2) # Adjust circles in each row\n        x_spacing = 1 / (num_circles_in_row + 1)\n        y = y_offset + row * x_spacing * np.sqrt(3) / 2\n\n        for col in range(num_circles_in_row):\n            if count < n:\n                x = x_offset + x_spacing * (col + 1)\n                centers[count, 0] = x\n                centers[count, 1] = y\n                radii[count] = 0.07 + 0.02 * (1 - (row/num_rows)) # Vary radius based on row\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_clustered(n):\n    \"\"\"Initialize with circles clustered in the center and corners.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    num_clusters = 4\n    circles_per_cluster = n // num_clusters\n\n    cluster_centers = [[0.2, 0.2], [0.8, 0.2], [0.2, 0.8], [0.8, 0.8]]\n    count = 0\n\n    for i in range(num_clusters):\n        for j in range(circles_per_cluster):\n            if count < n:\n                x = cluster_centers[i][0] + np.random.normal(0, 0.05)\n                y = cluster_centers[i][1] + np.random.normal(0, 0.05)\n                centers[count, 0] = x\n                centers[count, 1] = y\n                radii[count] = 0.05 + np.random.rand() * 0.04\n                count += 1\n\n    # Distribute remaining circles randomly\n    while count < n:\n        centers[count, 0] = np.random.rand() * 0.8 + 0.1\n        centers[count, 1] = np.random.rand() * 0.8 + 0.1\n        radii[count] = 0.06 + np.random.rand() * 0.03\n        count += 1\n    return centers, radii\n\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure using a more robust force model\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0  # Increased repulsion\n    wall_repulsion = 30.0  # Increased wall repulsion\n    dt = 0.02  # Adjusted time step\n    dampening = 0.92 # Reduced dampening\n    gravity = 0.0035  # Add a weak gravity towards the center\n    min_radius = 0.01  # Minimum radius constraint\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction / (radii[i] * radii[j])  # Inverse radius weighting\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r)) / r  # Inverse radius weighting\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - reduced perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n\n        # Keep circles within bounds and enforce minimum radius\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n            radii[i] = max(radii[i], min_radius) # Enforce minimum radius\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, using a more sophisticated growth strategy.\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.003 # Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap / radii[i]  # Inverse radius weighting\n                    overlaps[j] += overlap / radii[j]  # Inverse radius weighting\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += (r - x) / r  # Inverse radius weighting\n            if x > 1 - r:\n                overlaps[i] += (x - (1 - r)) / r  # Inverse radius weighting\n            if y < r:\n                overlaps[i] += (r - y) / r  # Inverse radius weighting\n            if y > 1 - r:\n                overlaps[i] += (y - (1 - r)) / r  # Inverse radius weighting\n\n        # Grow circles without overlaps, prioritizing larger circles\n        growth_order = np.argsort(radii)[::-1]  # Grow largest circles first\n        for i in growth_order:\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.05) # Reduced shrinkage factor\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes using a more aggressive simulated annealing\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.05  # Initial temperature for simulated annealing\n    cooling_rate = 0.992  # Cooling rate - slower cooling\n    position_perturbation = 0.016 # Increased position perturbation\n    radius_perturbation = 0.008 # Increased radius perturbation\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius - more aggressive perturbations\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, position_perturbation, 2)\n        radius_change = np.random.normal(0, radius_perturbation)\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - best_sum # Use best_sum instead of np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n                best_sum = new_sum\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n\n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}