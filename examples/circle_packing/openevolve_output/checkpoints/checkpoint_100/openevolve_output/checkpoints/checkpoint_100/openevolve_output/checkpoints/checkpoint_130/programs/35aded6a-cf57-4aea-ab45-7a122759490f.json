{"id": "35aded6a-cf57-4aea-ab45-7a122759490f", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a multi-stage optimization with Voronoi relaxation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nfrom scipy.spatial import Voronoi\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a combination of initialization,\n    gradient-based optimization, and Voronoi relaxation.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Initialize with an improved pattern\n    initial_centers, initial_radii = initialize_pattern_optimized_26_v6(n)\n\n    # Optimize with gradient descent\n    centers, radii = optimize_with_scipy_gradient(initial_centers, initial_radii)\n\n    # Voronoi Relaxation - a few iterations\n    for _ in range(2):  # Reduced iterations for speed\n        centers, radii = relax_with_voronoi(centers, radii)\n        centers, radii = optimize_with_scipy_gradient(centers, radii) # Re-optimize after relaxation\n\n    # Keep the best result\n    sum_radii = np.sum(radii)\n    if sum_radii > best_sum:\n        best_sum = sum_radii\n        best_centers = centers.copy()\n        best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_optimized_26_v6(n):\n    \"\"\"\n    Improved initialization with a more balanced and varied arrangement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large circles in corners\n    corner_radius = 0.120\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium circles on edges\n    edge_radius = 0.090\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Center circle (slightly larger)\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.135\n\n    # Ring of 6 circles around the center\n    ring_radius = 0.080\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[8] + ring_radius * 1.05  # Adjusted distance\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = ring_radius\n\n    # Fill gaps with smaller circles using a more structured approach\n    gap_radius = 0.070\n    centers[15] = [0.25, 0.25]\n    centers[16] = [0.75, 0.25]\n    centers[17] = [0.25, 0.75]\n    centers[18] = [0.75, 0.75]\n    centers[19] = [0.25, 0.5]\n    centers[20] = [0.75, 0.5]\n    radii[15:21] = gap_radius\n\n    # Fill remaining space with even smaller circles\n    remaining_radius = 0.060\n    centers[21] = [0.5, 0.25]\n    centers[22] = [0.5, 0.75]\n    centers[23] = [0.375, 0.375]\n    centers[24] = [0.625, 0.625]\n    centers[25] = [0.375, 0.625]\n    radii[21:26] = remaining_radius\n\n    return centers, radii\n\ndef optimize_with_scipy_gradient(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with gradient-based optimization.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-8)  # Increased tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] + 1e-8)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] + 1e-8)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i] + 1e-8)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] + 1e-8)  # y <= 1 - r\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for radii (0.01 to 0.2)\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.2)] * n  # Center coordinates within [0, 1], radii within [0.01, 0.2]\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP with increased maxiter and ftol\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, bounds=bounds, options={'maxiter': 750, 'ftol': 1e-8}) # Reduced maxiter\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\ndef relax_with_voronoi(centers, radii):\n    \"\"\"\n    Relax the circle packing using Voronoi diagrams.\n    \"\"\"\n    n = len(centers)\n    vor = Voronoi(centers)\n    new_centers = centers.copy()\n    new_radii = radii.copy()\n\n    for i in range(n):\n        # Find vertices of the Voronoi region around the circle's center\n        region = vor.regions[vor.point_region[i]]\n        if not region or -1 in region:\n            continue  # Skip unbounded regions\n\n        vertices = vor.vertices[region]\n\n        # Filter vertices within the unit square\n        vertices = vertices[(vertices[:, 0] >= 0) & (vertices[:, 0] <= 1) & (vertices[:, 1] >= 0) & (vertices[:, 1] <= 1)]\n\n        if len(vertices) > 0:\n            # Calculate the centroid of the Voronoi vertices\n            centroid = np.mean(vertices, axis=0)\n\n            # Move the circle's center towards the centroid\n            new_centers[i] = 0.7 * new_centers[i] + 0.3 * centroid  # Dampened movement\n\n            # Adjust radius based on distance to Voronoi vertices (approximation)\n            distances = np.linalg.norm(vertices - new_centers[i], axis=1)\n            new_radii[i] = min(np.min(distances) * 0.95, 0.195)  # Limit radius to avoid excessive growth\n\n    return new_centers, new_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "fd144939-78ed-4ef0-a831-55da2c1e970c", "generation": 12, "timestamp": 1750797668.335237, "iteration_found": 112, "metrics": {"validity": 1.0, "sum_radii": 2.5924574178186637, "target_ratio": 0.9838548075213146, "combined_score": 0.9838548075213146, "eval_time": 4.119489908218384}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.5406311733534266, "target_ratio": 0.9641864035496875, "combined_score": 0.9641864035496875, "eval_time": 2.6441450119018555}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.5406\n- target_ratio: 0.9642\n- combined_score: 0.9642\n- eval_time: 2.6441\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5976, target_ratio: 0.9858, combined_score: 0.9858, eval_time: 74.9053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 6.7041)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6280), Performs well on target_ratio (0.9973), Performs well on combined_score (0.9973), Performs well on eval_time (27.8981)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 3.0264)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5465), Performs well on target_ratio (0.9664), Performs well on combined_score (0.9664), Performs well on eval_time (9.6524)\n\n\n### Program 4 (Score: 4.1367)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4999), Performs well on target_ratio (0.9487), Performs well on combined_score (0.9487), Performs well on eval_time (15.2861)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 8.1653)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a gradient-based optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport heapq\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Using only a single, well-tuned initialization function\n    initial_centers, initial_radii = initialize_pattern_optimized_26_v5(n)\n\n    # Perform gradient-based optimization using the refined optimization function\n    centers, radii = optimize_with_scipy_gradient(initial_centers, initial_radii)\n\n    # Keep the best result\n    sum_radii = np.sum(radii)\n    if sum_radii > best_sum:\n        best_sum = sum_radii\n        best_centers = centers.copy()\n        best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_optimized_26_v5(n):\n    \"\"\"\n    Optimized initialization with strategic placement and size variation.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large circles in corners\n    corner_radius = 0.125\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium circles on edges\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Center circle (slightly larger)\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.140\n\n    # Ring of 6 circles around the center\n    ring_radius = 0.085\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[8] + ring_radius * 1.06  # Slightly increased distance\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = ring_radius\n\n    # Remaining 6 circles to fill gaps, smaller size\n    remaining_radius = 0.070\n    centers[15] = [0.2, 0.2]\n    centers[16] = [0.8, 0.2]\n    centers[17] = [0.2, 0.8]\n    centers[18] = [0.8, 0.8]\n    centers[19] = [0.2, 0.5]\n    centers[20] = [0.8, 0.5]\n    radii[15:21] = remaining_radius\n\n    # Last 5 circles, even smaller to fill remaining space\n    last_radius = 0.065\n    centers[21] = [0.5, 0.2]\n    centers[22] = [0.5, 0.8]\n    centers[23] = [0.35, 0.35]\n    centers[24] = [0.65, 0.65]\n    centers[25] = [0.35, 0.65]\n    radii[21:26] = last_radius\n\n    return centers, radii\n\ndef optimize_with_scipy_gradient(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with gradient-based optimization.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-7)  # Increased tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] + 1e-7)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] + 1e-7)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i] + 1e-7)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] + 1e-7)  # y <= 1 - r\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for radii (0.01 to 0.2)\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.2)] * n  # Center coordinates within [0, 1], radii within [0.01, 0.2]\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP with increased maxiter and ftol\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, bounds=bounds, options={'maxiter': 1500, 'ftol': 1e-9})\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a multi-stage optimization with Voronoi relaxation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nfrom scipy.spatial import Voronoi\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a combination of initialization,\n    gradient-based optimization, and Voronoi relaxation.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Initialize with an improved pattern\n    initial_centers, initial_radii = initialize_pattern_optimized_26_v6(n)\n\n    # Optimize with gradient descent\n    centers, radii = optimize_with_scipy_gradient(initial_centers, initial_radii)\n\n    # Voronoi Relaxation - a few iterations\n    for _ in range(2):  # Reduced iterations for speed\n        centers, radii = relax_with_voronoi(centers, radii)\n        centers, radii = optimize_with_scipy_gradient(centers, radii) # Re-optimize after relaxation\n\n    # Keep the best result\n    sum_radii = np.sum(radii)\n    if sum_radii > best_sum:\n        best_sum = sum_radii\n        best_centers = centers.copy()\n        best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_optimized_26_v6(n):\n    \"\"\"\n    Improved initialization with a more balanced and varied arrangement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large circles in corners\n    corner_radius = 0.120\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium circles on edges\n    edge_radius = 0.090\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Center circle (slightly larger)\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.135\n\n    # Ring of 6 circles around the center\n    ring_radius = 0.080\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[8] + ring_radius * 1.05  # Adjusted distance\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = ring_radius\n\n    # Fill gaps with smaller circles using a more structured approach\n    gap_radius = 0.070\n    centers[15] = [0.25, 0.25]\n    centers[16] = [0.75, 0.25]\n    centers[17] = [0.25, 0.75]\n    centers[18] = [0.75, 0.75]\n    centers[19] = [0.25, 0.5]\n    centers[20] = [0.75, 0.5]\n    radii[15:21] = gap_radius\n\n    # Fill remaining space with even smaller circles\n    remaining_radius = 0.060\n    centers[21] = [0.5, 0.25]\n    centers[22] = [0.5, 0.75]\n    centers[23] = [0.375, 0.375]\n    centers[24] = [0.625, 0.625]\n    centers[25] = [0.375, 0.625]\n    radii[21:26] = remaining_radius\n\n    return centers, radii\n\ndef optimize_with_scipy_gradient(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with gradient-based optimization.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-8)  # Increased tolerance\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] + 1e-8)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] + 1e-8)  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i] + 1e-8)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] + 1e-8)  # y <= 1 - r\n\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for radii (0.01 to 0.2)\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.2)] * n  # Center coordinates within [0, 1], radii within [0.01, 0.2]\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP with increased maxiter and ftol\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, bounds=bounds, options={'maxiter': 750, 'ftol': 1e-8}) # Reduced maxiter\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\ndef relax_with_voronoi(centers, radii):\n    \"\"\"\n    Relax the circle packing using Voronoi diagrams.\n    \"\"\"\n    n = len(centers)\n    vor = Voronoi(centers)\n    new_centers = centers.copy()\n    new_radii = radii.copy()\n\n    for i in range(n):\n        # Find vertices of the Voronoi region around the circle's center\n        region = vor.regions[vor.point_region[i]]\n        if not region or -1 in region:\n            continue  # Skip unbounded regions\n\n        vertices = vor.vertices[region]\n\n        # Filter vertices within the unit square\n        vertices = vertices[(vertices[:, 0] >= 0) & (vertices[:, 0] <= 1) & (vertices[:, 1] >= 0) & (vertices[:, 1] <= 1)]\n\n        if len(vertices) > 0:\n            # Calculate the centroid of the Voronoi vertices\n            centroid = np.mean(vertices, axis=0)\n\n            # Move the circle's center towards the centroid\n            new_centers[i] = 0.7 * new_centers[i] + 0.3 * centroid  # Dampened movement\n\n            # Adjust radius based on distance to Voronoi vertices (approximation)\n            distances = np.linalg.norm(vertices - new_centers[i], axis=1)\n            new_radii[i] = min(np.min(distances) * 0.95, 0.195)  # Limit radius to avoid excessive growth\n\n    return new_centers, new_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}