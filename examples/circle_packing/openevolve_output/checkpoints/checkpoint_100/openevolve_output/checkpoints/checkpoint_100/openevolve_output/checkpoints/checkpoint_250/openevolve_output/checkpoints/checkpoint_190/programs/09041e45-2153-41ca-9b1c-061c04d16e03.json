{"id": "09041e45-2153-41ca-9b1c-061c04d16e03", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using a refined multi-stage optimization approach with specialized geometric patterns and adaptive radius scaling to maximize the sum of radii toward the target value of 2.645. This implementation leverages mathematical insights from circle packing theory and incorporates a physics-based simulation for initial placement refinement.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message.s')\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Use a diverse set of specialized patterns\n    patterns = [\n        initialize_pattern_variable_sized,\n        initialize_pattern_hybrid_with_large_center,\n        initialize_pattern_edge_optimized,\n        initialize_pattern_corner_specialized,\n        initialize_pattern_triangular_grid\n    ]\n    \n    # Two-stage optimization approach\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func()\n        \n        # Ensure we have exactly 26 circles\n        assert centers.shape[0] == n, f\"Pattern function {pattern_func.__name__} returned {centers.shape[0]} circles instead of {n}\"\n\n        # Physics-based simulation for initial refinement\n        try:\n            centers, radii = physics_simulation(centers, radii, iterations=50)\n        except Exception as e:\n            print(f\"Physics simulation failed for {pattern_func.__name__}: {e}\")\n            continue\n        \n        # First optimization stage - coarse optimization\n        try:\n            centers, radii = optimize_packing(centers, radii, iterations=100, ftol=1e-5)\n            \n            # Second optimization stage - fine-tuning\n            centers, radii = optimize_packing(centers, radii, iterations=75, ftol=1e-7)\n            \n            # Adaptive radius scaling\n            radii = adaptive_radius_scaling(centers, radii)\n\n            # Final refinement of radii\n            radii = refine_radii(centers, radii)\n            \n            # Keep the best result\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n        except Exception as e:\n            print(f\"Optimization failed for {pattern_func.__name__}: {e}\")\n            continue\n\n    # Try a final post-processing step on the best solution\n    if best_centers is not None:\n        try:\n            # Apply local perturbations to try to improve the solution\n            improved_centers, improved_radii = local_search_improvement(best_centers, best_radii, iterations=30)\n            improved_sum = np.sum(improved_radii)\n            \n            if improved_sum > best_sum:\n                best_centers = improved_centers\n                best_radii = improved_radii\n                best_sum = improved_sum\n        except Exception as e:\n            print(f\"Post-processing optimization failed: {e}\")\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_variable_sized():\n    \"\"\"\n    Initialize with a pattern using variable-sized circles optimized for n=26.\n    This pattern uses circles of 3-4 different sizes, with larger circles in strategic positions.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.123\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.107\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.132\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.103\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius + 0.002\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 9 circles in outer ring\n    outer_radius = 0.078\n    for i in range(9):\n        angle = 2 * np.pi * i / 9 + np.pi/9\n        dist = 0.41\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_with_large_center():\n    \"\"\"\n    Initialize with a hybrid pattern featuring a large central circle surrounded by\n    concentric rings of smaller circles, with specialized corner and edge placement.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.135\n\n    # Inner ring (6 circles)\n    inner_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.001\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.098\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius + 0.002\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.118\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.078\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_edge_optimized():\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal edge utilization with variable-sized circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.125\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 per edge)\n    edge_radius = 0.105\n    edge_positions = [0.33, 0.67]\n    \n    count = 4\n    for pos in edge_positions:\n        # Bottom edge\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Top edge\n        centers[count] = [pos, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Left edge\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Right edge\n        centers[count] = [1 - edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n\n    # Center circle\n    center_radius = 0.129\n    centers[count] = [0.5, 0.5]\n    radii[count] = center_radius\n    count += 1\n\n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Fill remaining spaces with smaller circles\n    small_radius = 0.076\n    remaining_positions = [\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, (x, y) in enumerate(remaining_positions):\n        if count < n:\n            centers[count] = [x, y]\n            radii[count] = small_radius\n            count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_specialized():\n    \"\"\"\n    Initialize with a pattern that uses specialized corner arrangements\n    with a mix of large and small circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.127\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.102\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 8 smaller edge circles\n    small_edge_radius = 0.087\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Center circle (larger)\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.124\n\n    # Inner grid (9 circles)\n    inner_radius = 0.083\n    grid_positions = [\n        (0.3, 0.3), (0.5, 0.3), (0.7, 0.3),\n        (0.3, 0.5), (0.7, 0.5),\n        (0.3, 0.7), (0.5, 0.7), (0.7, 0.7),\n        (0.4, 0.6)\n    ]\n    \n    for i, (x, y) in enumerate(grid_positions[:n-17]):\n        centers[17 + i] = [x, y]\n        radii[17 + i] = inner_radius\n\n    return centers, radii\n\ndef initialize_pattern_triangular_grid():\n    \"\"\"\n    Initialize with a triangular grid pattern which can be more efficient for circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with a base radius\n    base_radius = 0.095\n    \n    # Create a triangular grid\n    row_height = base_radius * np.sqrt(3)\n    \n    # Place circles in a triangular grid pattern\n    count = 0\n    \n    # First row (5 circles)\n    y = base_radius\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Second row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Third row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fourth row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fifth row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # If we don't have enough circles, add more at strategic positions\n    if count < n:\n        # Place 4 larger circles in corners\n        corner_radius = 0.12\n        corner_positions = [\n            [corner_radius, corner_radius],\n            [1 - corner_radius, corner_radius],\n            [corner_radius, 1 - corner_radius],\n            [1 - corner_radius, 1 - corner_radius]\n        ]\n        \n        for pos in corner_positions:\n            if count < n:\n                centers[count] = pos\n                radii[count] = corner_radius\n                count += 1\n    \n    # If we still don't have enough, add a center circle\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.13\n        count += 1\n    \n    # Fill remaining positions if needed\n    remaining_positions = [\n        [0.25, 0.5], [0.75, 0.5],\n        [0.5, 0.25], [0.5, 0.75]\n    ]\n    \n    for pos in remaining_positions:\n        if count < n:\n            centers[count] = pos\n            radii[count] = 0.09\n            count += 1\n    \n    # Ensure we have exactly n circles\n    assert count == n, f\"Generated {count} circles instead of {n}\"\n    \n    return centers, radii\n\ndef physics_simulation(centers, radii, iterations=50, force_strength=0.001):\n    \"\"\"\n    Simulate a physics-based system where circles repel each other to improve initial placement.\n    \"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        forces = np.zeros((n, 2))\n        \n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                \n                # If circles are overlapping, apply a repulsive force\n                if dist < radii[i] + radii[j]:\n                    overlap = radii[i] + radii[j] - dist\n                    direction = dist_vec / dist if dist > 0 else np.array([1, 0])  # Avoid division by zero\n                    force = force_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force  # Newton's third law\n        \n        # Update circle positions based on forces\n        for i in range(n):\n            centers[i] += forces[i]\n            \n            # Keep circles within the unit square\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n            \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=200, ftol=1e-6):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with SLSQP method.\n    \n    Args:\n        centers: Initial centers of circles\n        radii: Initial radii of circles\n        iterations: Maximum number of iterations\n        ftol: Tolerance for convergence\n        \n    Returns:\n        Tuple of (optimized_centers, optimized_radii)\n    \"\"\"\n    n = len(centers)\n    \n    # Function to minimize (negative sum of radii)\n    def objective(x):\n        current_radii = x[2*n:]\n        return -np.sum(current_radii)\n    \n    # Constraint: no overlapping circles\n    def overlap_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-9) # Add small constant\n        \n        return np.array(constraints)\n    \n    # Constraint: circles within the unit square\n    def boundary_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] - 1e-9)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] - 1e-9)  # x <= 1-r\n            constraints.append(current_centers[i, 1] - current_radii[i] - 1e-9)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] - 1e-9)  # y <= 1-r\n        \n        return np.array(constraints)\n    \n    # Combine all constraints\n    constraint1 = {'type': 'ineq', 'fun': overlap_constraint}\n    constraint2 = {'type': 'ineq', 'fun': boundary_constraint}\n    constraints = [constraint1, constraint2]\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    center_bounds = [(0.01, 0.99) for _ in range(2*n)]\n    radii_bounds = [(0.03, 0.2) for _ in range(n)]\n    bounds = center_bounds + radii_bounds\n    \n    # Optimize\n    result = minimize(\n        objective,\n        x0,\n        method='SLSQP',\n        bounds=bounds,\n        constraints=constraints,\n        options={'maxiter': iterations, 'ftol': ftol, 'disp': False}\n    )\n    \n    # Extract results\n    optimized_centers = result.x[:2*n].reshape((n, 2))\n    optimized_radii = result.x[2*n:]\n    \n    return optimized_centers, optimized_radii\n\ndef adaptive_radius_scaling(centers, radii):\n    \"\"\"\n    Scale radii based on local density to improve packing efficiency.\n    Circles in sparser areas get slightly larger, while those in dense areas get smaller.\n    \"\"\"\n    n = len(centers)\n    scaled_radii = radii.copy()\n    \n    for i in range(n):\n        # Calculate distance to other circles\n        distances = [np.linalg.norm(centers[i] - centers[j]) for j in range(n) if i != j]\n        \n        # Calculate average distance to nearest neighbors\n        avg_distance = np.mean(sorted(distances)[:5])  # Average distance to 5 nearest neighbors\n        \n        # Adjust radius based on average distance\n        if avg_distance > 2.5 * radii[i]:  # Sparsely packed\n            scaled_radii[i] *= 1.02  # Increase radius slightly\n        elif avg_distance < 2.1 * radii[i]:  # Densely packed\n            scaled_radii[i] *= 0.98  # Decrease radius slightly\n        \n        # Ensure radii stay within bounds\n        scaled_radii[i] = np.clip(scaled_radii[i], 0.03, 0.2)\n        \n    return scaled_radii\n\ndef refine_radii(centers, radii):\n    \"\"\"\n    Precisely calculate the maximum possible radius for each circle while keeping centers fixed.\n    \n    Args:\n        centers: Fixed positions of circle centers\n        radii: Current radii (used as initial values)\n        \n    Returns:\n        Refined radii that maximize the sum while maintaining validity\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all pairs of circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            distances[i, j] = distances[j, i] = np.linalg.norm(centers[i] - centers[j])\n    \n    # Calculate distances to boundaries\n    boundary_distances = np.zeros((n, 4))\n    for i in range(n):\n        boundary_distances[i, 0] = centers[i, 0]  # Distance to left boundary\n        boundary_distances[i, 1] = 1 - centers[i, 0]  # Distance to right boundary\n        boundary_distances[i, 2] = centers[i, 1]  # Distance to bottom boundary\n        boundary_distances[i, 3] = 1 - centers[i, 1]  # Distance to top boundary\n    \n    # Iteratively refine radii for better convergence\n    refined_radii = radii.copy()\n    \n    for _ in range(3):  # Multiple iterations for better convergence\n        for i in range(n):\n            # Maximum radius based on other circles\n            max_radius_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    max_radius_circles = min(max_radius_circles, (distances[i, j] - refined_radii[j]))\n            \n            # Maximum radius based on boundaries\n            max_radius_boundary = np.min(boundary_distances[i])\n            \n            # Set radius to the minimum of the two constraints\n            refined_radii[i] = min(max_radius_circles, max_radius_boundary)\n    \n    return refined_radii\n\ndef local_search_improvement(centers, radii, iterations=50):\n    \"\"\"\n    Apply local search to improve the solution by making small perturbations\n    to circle positions and then re-optimizing radii.\n    \n    Args:\n        centers: Current best centers\n        radii: Current best radii\n        iterations: Number of local search iterations\n        \n    Returns:\n        Improved centers and radii if found, otherwise original\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for _ in range(iterations):\n        # Make a small random perturbation to centers\n        perturbed_centers = best_centers.copy()\n        \n        # Select a random subset of circles to perturb\n        indices = np.random.choice(n, size=min(5, n), replace=False)\n        \n        for idx in indices:\n            # Apply small random perturbation\n            perturbed_centers[idx] += np.random.uniform(-0.008, 0.008, size=2) #Reduce perturbation size\n            \n            # Ensure centers remain in bounds\n            perturbed_centers[idx] = np.clip(perturbed_centers[idx], 0.01, 0.99)\n        \n        # Refine radii with fixed perturbed centers\n        try:\n            perturbed_radii = refine_radii(perturbed_centers, best_radii.copy())\n            sum_radii = np.sum(perturbed_radii)\n            \n            # Check if this is an improvement\n            if sum_radii > best_sum:\n                best_centers = perturbed_centers.copy()\n                best_radii = perturbed_radii.copy()\n                best_sum = sum_radii\n                \n                # Try to further optimize this promising solution\n                try:\n                    optimized_centers, optimized_radii = optimize_packing(\n                        best_centers, best_radii, iterations=75, ftol=1e-7 #Reduced iterations\n                    )\n                    optimized_sum = np.sum(optimized_radii)\n                    \n                    if optimized_sum > best_sum:\n                        best_centers = optimized_centers\n                        best_radii = optimized_radii\n                        best_sum = optimized_sum\n                except:\n                    pass  # If optimization fails, keep the current best\n        except:\n            continue  # If refinement fails, skip this iteration\n    \n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c3dcdccd-d445-4279-97df-dbdd8cf75506", "generation": 7, "timestamp": 1750950298.7156312, "iteration_found": 174, "metrics": {"validity": 1.0, "sum_radii": 2.6041460788244257, "target_ratio": 0.9882907320016797, "combined_score": 0.9882907320016797, "eval_time": 4.218160390853882}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6041460637735807, "target_ratio": 0.988290726289784, "combined_score": 0.988290726289784, "eval_time": 6.22069787979126}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.645 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.636, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6041\n- target_ratio: 0.9883\n- combined_score: 0.9883\n- eval_time: 6.2207\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5846, target_ratio: 0.9809, combined_score: 0.9809, eval_time: 183.1378\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5701, target_ratio: 0.9754, combined_score: 0.9754, eval_time: 184.1761\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6093, target_ratio: 0.9902, combined_score: 0.9902, eval_time: 190.7207\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 9.7633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (43.1799)\n\n\n### Program 2 (Score: 39.2621)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using mathematical insights and specialized optimization techniques to maximize the sum of radii toward the target of 2.645.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6093), Performs well on target_ratio (0.9902), Performs well on combined_score (0.9902), Performs well on eval_time (190.7207)\n\n\n### Program 3 (Score: 6.3621)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square, using a hybrid approach combining mathematical patterns, physics-based optimization, and adaptive sizing strategies to maximize the sum of radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\nimport time\nimport random\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6281), Performs well on target_ratio (0.9974), Performs well on combined_score (0.9974), Performs well on eval_time (26.1879)\n\n\n### Program 4 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using multi-stage optimization with variable-sized circles, specialized mathematical patterns, and adaptive optimization techniques to maximize the sum of radii toward the theoretical optimal value of 2.645. This version focuses on enhanced penalty functions, refined initialization strategies, and more aggressive optimization techniques to break through the 2.636 plateau. This version introduces a new penalty function based on the Lennard-Jones potential, a more sophisticated initialization using a combination of hexagonal and random placements, and a refined optimization strategy that alternates between position and radius optimization. It also reduces the number of iterations in each stage to avoid timeouts.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize, basinhopping\nimport time\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 7.1293)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a simplified, yet effective, physics-based simulation with adaptive force scaling and radius adjustments. It prioritizes speed and robustness to avoid timeouts, using a gradient-free optimization approach.  It also includes a radius rescaling step to improve the sum of radii after the simulation.\"\"\"\nimport numpy as np\nimport logging\nimport time\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using a multi-stage optimization approach with specialized geometric patterns to maximize the sum of radii toward the target value of 2.645. This implementation leverages mathematical insights from circle packing theory.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Use a diverse set of specialized patterns\n    patterns = [\n        initialize_pattern_variable_sized,\n        initialize_pattern_hybrid_with_large_center,\n        initialize_pattern_edge_optimized,\n        initialize_pattern_corner_specialized,\n        initialize_pattern_triangular_grid\n    ]\n    \n    # Two-stage optimization approach\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func()\n        \n        # Ensure we have exactly 26 circles\n        assert centers.shape[0] == n, f\"Pattern function {pattern_func.__name__} returned {centers.shape[0]} circles instead of {n}\"\n        \n        # First optimization stage - coarse optimization\n        try:\n            centers, radii = optimize_packing(centers, radii, iterations=150, ftol=1e-5)\n            \n            # Second optimization stage - fine-tuning\n            centers, radii = optimize_packing(centers, radii, iterations=100, ftol=1e-7)\n            \n            # Final refinement of radii\n            radii = refine_radii(centers, radii)\n            \n            # Keep the best result\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n        except Exception as e:\n            print(f\"Optimization failed for {pattern_func.__name__}: {e}\")\n            continue\n\n    # Try a final post-processing step on the best solution\n    if best_centers is not None:\n        try:\n            # Apply local perturbations to try to improve the solution\n            improved_centers, improved_radii = local_search_improvement(best_centers, best_radii)\n            improved_sum = np.sum(improved_radii)\n            \n            if improved_sum > best_sum:\n                best_centers = improved_centers\n                best_radii = improved_radii\n                best_sum = improved_sum\n        except Exception as e:\n            print(f\"Post-processing optimization failed: {e}\")\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_variable_sized():\n    \"\"\"\n    Initialize with a pattern using variable-sized circles optimized for n=26.\n    This pattern uses circles of 3-4 different sizes, with larger circles in strategic positions.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.123\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.107\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.132\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.103\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius + 0.002\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 9 circles in outer ring\n    outer_radius = 0.078\n    for i in range(9):\n        angle = 2 * np.pi * i / 9 + np.pi/9\n        dist = 0.41\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_with_large_center():\n    \"\"\"\n    Initialize with a hybrid pattern featuring a large central circle surrounded by\n    concentric rings of smaller circles, with specialized corner and edge placement.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.135\n\n    # Inner ring (6 circles)\n    inner_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.001\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.098\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius + 0.002\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.118\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.078\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_edge_optimized():\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal edge utilization with variable-sized circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.125\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 per edge)\n    edge_radius = 0.105\n    edge_positions = [0.33, 0.67]\n    \n    count = 4\n    for pos in edge_positions:\n        # Bottom edge\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Top edge\n        centers[count] = [pos, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Left edge\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Right edge\n        centers[count] = [1 - edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n\n    # Center circle\n    center_radius = 0.129\n    centers[count] = [0.5, 0.5]\n    radii[count] = center_radius\n    count += 1\n\n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Fill remaining spaces with smaller circles\n    small_radius = 0.076\n    remaining_positions = [\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, (x, y) in enumerate(remaining_positions):\n        if count < n:\n            centers[count] = [x, y]\n            radii[count] = small_radius\n            count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_specialized():\n    \"\"\"\n    Initialize with a pattern that uses specialized corner arrangements\n    with a mix of large and small circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.127\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.102\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 8 smaller edge circles\n    small_edge_radius = 0.087\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Center circle (larger)\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.124\n\n    # Inner grid (9 circles)\n    inner_radius = 0.083\n    grid_positions = [\n        (0.3, 0.3), (0.5, 0.3), (0.7, 0.3),\n        (0.3, 0.5), (0.7, 0.5),\n        (0.3, 0.7), (0.5, 0.7), (0.7, 0.7),\n        (0.4, 0.6)\n    ]\n    \n    for i, (x, y) in enumerate(grid_positions[:n-17]):\n        centers[17 + i] = [x, y]\n        radii[17 + i] = inner_radius\n\n    return centers, radii\n\ndef initialize_pattern_triangular_grid():\n    \"\"\"\n    Initialize with a triangular grid pattern which can be more efficient for circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with a base radius\n    base_radius = 0.095\n    \n    # Create a triangular grid\n    row_height = base_radius * np.sqrt(3)\n    \n    # Place circles in a triangular grid pattern\n    count = 0\n    \n    # First row (5 circles)\n    y = base_radius\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Second row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Third row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fourth row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fifth row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # If we don't have enough circles, add more at strategic positions\n    if count < n:\n        # Place 4 larger circles in corners\n        corner_radius = 0.12\n        corner_positions = [\n            [corner_radius, corner_radius],\n            [1 - corner_radius, corner_radius],\n            [corner_radius, 1 - corner_radius],\n            [1 - corner_radius, 1 - corner_radius]\n        ]\n        \n        for pos in corner_positions:\n            if count < n:\n                centers[count] = pos\n                radii[count] = corner_radius\n                count += 1\n    \n    # If we still don't have enough, add a center circle\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.13\n        count += 1\n    \n    # Fill remaining positions if needed\n    remaining_positions = [\n        [0.25, 0.5], [0.75, 0.5],\n        [0.5, 0.25], [0.5, 0.75]\n    ]\n    \n    for pos in remaining_positions:\n        if count < n:\n            centers[count] = pos\n            radii[count] = 0.09\n            count += 1\n    \n    # Ensure we have exactly n circles\n    assert count == n, f\"Generated {count} circles instead of {n}\"\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=200, ftol=1e-6):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with SLSQP method.\n    \n    Args:\n        centers: Initial centers of circles\n        radii: Initial radii of circles\n        iterations: Maximum number of iterations\n        ftol: Tolerance for convergence\n        \n    Returns:\n        Tuple of (optimized_centers, optimized_radii)\n    \"\"\"\n    n = len(centers)\n    \n    # Function to minimize (negative sum of radii)\n    def objective(x):\n        current_radii = x[2*n:]\n        return -np.sum(current_radii)\n    \n    # Constraint: no overlapping circles\n    def overlap_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j])\n        \n        return np.array(constraints)\n    \n    # Constraint: circles within the unit square\n    def boundary_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i])  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i])  # x <= 1-r\n            constraints.append(current_centers[i, 1] - current_radii[i])  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i])  # y <= 1-r\n        \n        return np.array(constraints)\n    \n    # Combine all constraints\n    constraint1 = {'type': 'ineq', 'fun': overlap_constraint}\n    constraint2 = {'type': 'ineq', 'fun': boundary_constraint}\n    constraints = [constraint1, constraint2]\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    center_bounds = [(0.01, 0.99) for _ in range(2*n)]\n    radii_bounds = [(0.03, 0.2) for _ in range(n)]\n    bounds = center_bounds + radii_bounds\n    \n    # Optimize\n    result = minimize(\n        objective,\n        x0,\n        method='SLSQP',\n        bounds=bounds,\n        constraints=constraints,\n        options={'maxiter': iterations, 'ftol': ftol, 'disp': False}\n    )\n    \n    # Extract results\n    optimized_centers = result.x[:2*n].reshape((n, 2))\n    optimized_radii = result.x[2*n:]\n    \n    return optimized_centers, optimized_radii\n\ndef refine_radii(centers, radii):\n    \"\"\"\n    Precisely calculate the maximum possible radius for each circle while keeping centers fixed.\n    \n    Args:\n        centers: Fixed positions of circle centers\n        radii: Current radii (used as initial values)\n        \n    Returns:\n        Refined radii that maximize the sum while maintaining validity\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all pairs of circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            distances[i, j] = distances[j, i] = np.linalg.norm(centers[i] - centers[j])\n    \n    # Calculate distances to boundaries\n    boundary_distances = np.zeros((n, 4))\n    for i in range(n):\n        boundary_distances[i, 0] = centers[i, 0]  # Distance to left boundary\n        boundary_distances[i, 1] = 1 - centers[i, 0]  # Distance to right boundary\n        boundary_distances[i, 2] = centers[i, 1]  # Distance to bottom boundary\n        boundary_distances[i, 3] = 1 - centers[i, 1]  # Distance to top boundary\n    \n    # Iteratively refine radii for better convergence\n    refined_radii = radii.copy()\n    \n    for _ in range(3):  # Multiple iterations for better convergence\n        for i in range(n):\n            # Maximum radius based on other circles\n            max_radius_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    max_radius_circles = min(max_radius_circles, distances[i, j] - refined_radii[j])\n            \n            # Maximum radius based on boundaries\n            max_radius_boundary = np.min(boundary_distances[i])\n            \n            # Set radius to the minimum of the two constraints\n            refined_radii[i] = min(max_radius_circles, max_radius_boundary)\n    \n    return refined_radii\n\ndef local_search_improvement(centers, radii, iterations=50):\n    \"\"\"\n    Apply local search to improve the solution by making small perturbations\n    to circle positions and then re-optimizing radii.\n    \n    Args:\n        centers: Current best centers\n        radii: Current best radii\n        iterations: Number of local search iterations\n        \n    Returns:\n        Improved centers and radii if found, otherwise original\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for _ in range(iterations):\n        # Make a small random perturbation to centers\n        perturbed_centers = best_centers.copy()\n        \n        # Select a random subset of circles to perturb\n        indices = np.random.choice(n, size=min(5, n), replace=False)\n        \n        for idx in indices:\n            # Apply small random perturbation\n            perturbed_centers[idx] += np.random.uniform(-0.01, 0.01, size=2)\n            \n            # Ensure centers remain in bounds\n            perturbed_centers[idx] = np.clip(perturbed_centers[idx], 0.01, 0.99)\n        \n        # Refine radii with fixed perturbed centers\n        try:\n            perturbed_radii = refine_radii(perturbed_centers, best_radii.copy())\n            sum_radii = np.sum(perturbed_radii)\n            \n            # Check if this is an improvement\n            if sum_radii > best_sum:\n                best_centers = perturbed_centers.copy()\n                best_radii = perturbed_radii.copy()\n                best_sum = sum_radii\n                \n                # Try to further optimize this promising solution\n                try:\n                    optimized_centers, optimized_radii = optimize_packing(\n                        best_centers, best_radii, iterations=100, ftol=1e-7\n                    )\n                    optimized_sum = np.sum(optimized_radii)\n                    \n                    if optimized_sum > best_sum:\n                        best_centers = optimized_centers\n                        best_radii = optimized_radii\n                        best_sum = optimized_sum\n                except:\n                    pass  # If optimization fails, keep the current best\n        except:\n            continue  # If refinement fails, skip this iteration\n    \n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using a refined multi-stage optimization approach with specialized geometric patterns and adaptive radius scaling to maximize the sum of radii toward the target value of 2.645. This implementation leverages mathematical insights from circle packing theory and incorporates a physics-based simulation for initial placement refinement.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message.s')\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Use a diverse set of specialized patterns\n    patterns = [\n        initialize_pattern_variable_sized,\n        initialize_pattern_hybrid_with_large_center,\n        initialize_pattern_edge_optimized,\n        initialize_pattern_corner_specialized,\n        initialize_pattern_triangular_grid\n    ]\n    \n    # Two-stage optimization approach\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func()\n        \n        # Ensure we have exactly 26 circles\n        assert centers.shape[0] == n, f\"Pattern function {pattern_func.__name__} returned {centers.shape[0]} circles instead of {n}\"\n\n        # Physics-based simulation for initial refinement\n        try:\n            centers, radii = physics_simulation(centers, radii, iterations=50)\n        except Exception as e:\n            print(f\"Physics simulation failed for {pattern_func.__name__}: {e}\")\n            continue\n        \n        # First optimization stage - coarse optimization\n        try:\n            centers, radii = optimize_packing(centers, radii, iterations=100, ftol=1e-5)\n            \n            # Second optimization stage - fine-tuning\n            centers, radii = optimize_packing(centers, radii, iterations=75, ftol=1e-7)\n            \n            # Adaptive radius scaling\n            radii = adaptive_radius_scaling(centers, radii)\n\n            # Final refinement of radii\n            radii = refine_radii(centers, radii)\n            \n            # Keep the best result\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n        except Exception as e:\n            print(f\"Optimization failed for {pattern_func.__name__}: {e}\")\n            continue\n\n    # Try a final post-processing step on the best solution\n    if best_centers is not None:\n        try:\n            # Apply local perturbations to try to improve the solution\n            improved_centers, improved_radii = local_search_improvement(best_centers, best_radii, iterations=30)\n            improved_sum = np.sum(improved_radii)\n            \n            if improved_sum > best_sum:\n                best_centers = improved_centers\n                best_radii = improved_radii\n                best_sum = improved_sum\n        except Exception as e:\n            print(f\"Post-processing optimization failed: {e}\")\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_variable_sized():\n    \"\"\"\n    Initialize with a pattern using variable-sized circles optimized for n=26.\n    This pattern uses circles of 3-4 different sizes, with larger circles in strategic positions.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.123\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.107\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.132\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.103\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius + 0.002\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 9 circles in outer ring\n    outer_radius = 0.078\n    for i in range(9):\n        angle = 2 * np.pi * i / 9 + np.pi/9\n        dist = 0.41\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_with_large_center():\n    \"\"\"\n    Initialize with a hybrid pattern featuring a large central circle surrounded by\n    concentric rings of smaller circles, with specialized corner and edge placement.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.135\n\n    # Inner ring (6 circles)\n    inner_radius = 0.108\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.001\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.098\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius + 0.002\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.118\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.094\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.078\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\ndef initialize_pattern_edge_optimized():\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal edge utilization with variable-sized circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.125\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 per edge)\n    edge_radius = 0.105\n    edge_positions = [0.33, 0.67]\n    \n    count = 4\n    for pos in edge_positions:\n        # Bottom edge\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Top edge\n        centers[count] = [pos, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Left edge\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n        \n        # Right edge\n        centers[count] = [1 - edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n\n    # Center circle\n    center_radius = 0.129\n    centers[count] = [0.5, 0.5]\n    radii[count] = center_radius\n    count += 1\n\n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Fill remaining spaces with smaller circles\n    small_radius = 0.076\n    remaining_positions = [\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, (x, y) in enumerate(remaining_positions):\n        if count < n:\n            centers[count] = [x, y]\n            radii[count] = small_radius\n            count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_specialized():\n    \"\"\"\n    Initialize with a pattern that uses specialized corner arrangements\n    with a mix of large and small circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.127\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.102\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 8 smaller edge circles\n    small_edge_radius = 0.087\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Center circle (larger)\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.124\n\n    # Inner grid (9 circles)\n    inner_radius = 0.083\n    grid_positions = [\n        (0.3, 0.3), (0.5, 0.3), (0.7, 0.3),\n        (0.3, 0.5), (0.7, 0.5),\n        (0.3, 0.7), (0.5, 0.7), (0.7, 0.7),\n        (0.4, 0.6)\n    ]\n    \n    for i, (x, y) in enumerate(grid_positions[:n-17]):\n        centers[17 + i] = [x, y]\n        radii[17 + i] = inner_radius\n\n    return centers, radii\n\ndef initialize_pattern_triangular_grid():\n    \"\"\"\n    Initialize with a triangular grid pattern which can be more efficient for circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with a base radius\n    base_radius = 0.095\n    \n    # Create a triangular grid\n    row_height = base_radius * np.sqrt(3)\n    \n    # Place circles in a triangular grid pattern\n    count = 0\n    \n    # First row (5 circles)\n    y = base_radius\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Second row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Third row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fourth row (4 circles, offset)\n    y += row_height\n    for i in range(4):\n        x = 2 * base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # Fifth row (5 circles)\n    y += row_height\n    for i in range(5):\n        x = base_radius + i * 2 * base_radius\n        if x <= 1 - base_radius and count < n:\n            centers[count] = [x, y]\n            radii[count] = base_radius\n            count += 1\n    \n    # If we don't have enough circles, add more at strategic positions\n    if count < n:\n        # Place 4 larger circles in corners\n        corner_radius = 0.12\n        corner_positions = [\n            [corner_radius, corner_radius],\n            [1 - corner_radius, corner_radius],\n            [corner_radius, 1 - corner_radius],\n            [1 - corner_radius, 1 - corner_radius]\n        ]\n        \n        for pos in corner_positions:\n            if count < n:\n                centers[count] = pos\n                radii[count] = corner_radius\n                count += 1\n    \n    # If we still don't have enough, add a center circle\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.13\n        count += 1\n    \n    # Fill remaining positions if needed\n    remaining_positions = [\n        [0.25, 0.5], [0.75, 0.5],\n        [0.5, 0.25], [0.5, 0.75]\n    ]\n    \n    for pos in remaining_positions:\n        if count < n:\n            centers[count] = pos\n            radii[count] = 0.09\n            count += 1\n    \n    # Ensure we have exactly n circles\n    assert count == n, f\"Generated {count} circles instead of {n}\"\n    \n    return centers, radii\n\ndef physics_simulation(centers, radii, iterations=50, force_strength=0.001):\n    \"\"\"\n    Simulate a physics-based system where circles repel each other to improve initial placement.\n    \"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        forces = np.zeros((n, 2))\n        \n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                \n                # If circles are overlapping, apply a repulsive force\n                if dist < radii[i] + radii[j]:\n                    overlap = radii[i] + radii[j] - dist\n                    direction = dist_vec / dist if dist > 0 else np.array([1, 0])  # Avoid division by zero\n                    force = force_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force  # Newton's third law\n        \n        # Update circle positions based on forces\n        for i in range(n):\n            centers[i] += forces[i]\n            \n            # Keep circles within the unit square\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n            \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=200, ftol=1e-6):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize with SLSQP method.\n    \n    Args:\n        centers: Initial centers of circles\n        radii: Initial radii of circles\n        iterations: Maximum number of iterations\n        ftol: Tolerance for convergence\n        \n    Returns:\n        Tuple of (optimized_centers, optimized_radii)\n    \"\"\"\n    n = len(centers)\n    \n    # Function to minimize (negative sum of radii)\n    def objective(x):\n        current_radii = x[2*n:]\n        return -np.sum(current_radii)\n    \n    # Constraint: no overlapping circles\n    def overlap_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j] - 1e-9) # Add small constant\n        \n        return np.array(constraints)\n    \n    # Constraint: circles within the unit square\n    def boundary_constraint(x):\n        current_centers = x[:2*n].reshape((n, 2))\n        current_radii = x[2*n:]\n        constraints = []\n        \n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i] - 1e-9)  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i] - 1e-9)  # x <= 1-r\n            constraints.append(current_centers[i, 1] - current_radii[i] - 1e-9)  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i] - 1e-9)  # y <= 1-r\n        \n        return np.array(constraints)\n    \n    # Combine all constraints\n    constraint1 = {'type': 'ineq', 'fun': overlap_constraint}\n    constraint2 = {'type': 'ineq', 'fun': boundary_constraint}\n    constraints = [constraint1, constraint2]\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    center_bounds = [(0.01, 0.99) for _ in range(2*n)]\n    radii_bounds = [(0.03, 0.2) for _ in range(n)]\n    bounds = center_bounds + radii_bounds\n    \n    # Optimize\n    result = minimize(\n        objective,\n        x0,\n        method='SLSQP',\n        bounds=bounds,\n        constraints=constraints,\n        options={'maxiter': iterations, 'ftol': ftol, 'disp': False}\n    )\n    \n    # Extract results\n    optimized_centers = result.x[:2*n].reshape((n, 2))\n    optimized_radii = result.x[2*n:]\n    \n    return optimized_centers, optimized_radii\n\ndef adaptive_radius_scaling(centers, radii):\n    \"\"\"\n    Scale radii based on local density to improve packing efficiency.\n    Circles in sparser areas get slightly larger, while those in dense areas get smaller.\n    \"\"\"\n    n = len(centers)\n    scaled_radii = radii.copy()\n    \n    for i in range(n):\n        # Calculate distance to other circles\n        distances = [np.linalg.norm(centers[i] - centers[j]) for j in range(n) if i != j]\n        \n        # Calculate average distance to nearest neighbors\n        avg_distance = np.mean(sorted(distances)[:5])  # Average distance to 5 nearest neighbors\n        \n        # Adjust radius based on average distance\n        if avg_distance > 2.5 * radii[i]:  # Sparsely packed\n            scaled_radii[i] *= 1.02  # Increase radius slightly\n        elif avg_distance < 2.1 * radii[i]:  # Densely packed\n            scaled_radii[i] *= 0.98  # Decrease radius slightly\n        \n        # Ensure radii stay within bounds\n        scaled_radii[i] = np.clip(scaled_radii[i], 0.03, 0.2)\n        \n    return scaled_radii\n\ndef refine_radii(centers, radii):\n    \"\"\"\n    Precisely calculate the maximum possible radius for each circle while keeping centers fixed.\n    \n    Args:\n        centers: Fixed positions of circle centers\n        radii: Current radii (used as initial values)\n        \n    Returns:\n        Refined radii that maximize the sum while maintaining validity\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all pairs of circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            distances[i, j] = distances[j, i] = np.linalg.norm(centers[i] - centers[j])\n    \n    # Calculate distances to boundaries\n    boundary_distances = np.zeros((n, 4))\n    for i in range(n):\n        boundary_distances[i, 0] = centers[i, 0]  # Distance to left boundary\n        boundary_distances[i, 1] = 1 - centers[i, 0]  # Distance to right boundary\n        boundary_distances[i, 2] = centers[i, 1]  # Distance to bottom boundary\n        boundary_distances[i, 3] = 1 - centers[i, 1]  # Distance to top boundary\n    \n    # Iteratively refine radii for better convergence\n    refined_radii = radii.copy()\n    \n    for _ in range(3):  # Multiple iterations for better convergence\n        for i in range(n):\n            # Maximum radius based on other circles\n            max_radius_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    max_radius_circles = min(max_radius_circles, (distances[i, j] - refined_radii[j]))\n            \n            # Maximum radius based on boundaries\n            max_radius_boundary = np.min(boundary_distances[i])\n            \n            # Set radius to the minimum of the two constraints\n            refined_radii[i] = min(max_radius_circles, max_radius_boundary)\n    \n    return refined_radii\n\ndef local_search_improvement(centers, radii, iterations=50):\n    \"\"\"\n    Apply local search to improve the solution by making small perturbations\n    to circle positions and then re-optimizing radii.\n    \n    Args:\n        centers: Current best centers\n        radii: Current best radii\n        iterations: Number of local search iterations\n        \n    Returns:\n        Improved centers and radii if found, otherwise original\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    for _ in range(iterations):\n        # Make a small random perturbation to centers\n        perturbed_centers = best_centers.copy()\n        \n        # Select a random subset of circles to perturb\n        indices = np.random.choice(n, size=min(5, n), replace=False)\n        \n        for idx in indices:\n            # Apply small random perturbation\n            perturbed_centers[idx] += np.random.uniform(-0.008, 0.008, size=2) #Reduce perturbation size\n            \n            # Ensure centers remain in bounds\n            perturbed_centers[idx] = np.clip(perturbed_centers[idx], 0.01, 0.99)\n        \n        # Refine radii with fixed perturbed centers\n        try:\n            perturbed_radii = refine_radii(perturbed_centers, best_radii.copy())\n            sum_radii = np.sum(perturbed_radii)\n            \n            # Check if this is an improvement\n            if sum_radii > best_sum:\n                best_centers = perturbed_centers.copy()\n                best_radii = perturbed_radii.copy()\n                best_sum = sum_radii\n                \n                # Try to further optimize this promising solution\n                try:\n                    optimized_centers, optimized_radii = optimize_packing(\n                        best_centers, best_radii, iterations=75, ftol=1e-7 #Reduced iterations\n                    )\n                    optimized_sum = np.sum(optimized_radii)\n                    \n                    if optimized_sum > best_sum:\n                        best_centers = optimized_centers\n                        best_radii = optimized_radii\n                        best_sum = optimized_sum\n                except:\n                    pass  # If optimization fails, keep the current best\n        except:\n            continue  # If refinement fails, skip this iteration\n    \n    return best_centers, best_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}