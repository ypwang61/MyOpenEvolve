{"id": "92d27afd-55b2-4569-9cf3-70c509e0aee0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization with gradient-based refinement\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(7):  # Increased strategies, focusing on promising ones\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_modified_hexagonal(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 3:\n            centers, radii = initialize_pattern_triangular(n)\n        elif strategy == 4:\n            centers, radii = initialize_pattern_radial(n)\n        elif strategy == 5:\n            centers, radii = initialize_pattern_hexagonal(n) # More hexagonal optimization\n        else:\n            centers, radii = initialize_pattern_quasicrystalline(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage2(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage3(centers, radii, iterations=600)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes and optimized ratios\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.120  # Optimized center circle size\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095  # Optimized ring radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.06  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085  # Optimized ring radius\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.06 + ring_radius * 1.06  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.090  # Optimized corner radius\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - reduced to 3 from 4\n    edge_radius = 0.080  # Optimized edge radius\n    if count < n:\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [0.5, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [edge_radius, 0.5]\n        radii[count] = edge_radius\n        count += 1\n    return centers, radii\n\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a slightly modified hexagonal pattern for better packing.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.122  # Slightly larger central circle\n\n    # First ring (6 circles)\n    count = 1\n    ring_radius = 0.090  # Adjusted ring radius\n    ring_dist = radii[0] + ring_radius * 1.07  # Slightly increased distance\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second ring (12 circles)\n    ring_radius = 0.080  # Adjusted ring radius\n    ring_dist = radii[0] + 2 * 0.090 * 1.07 + ring_radius * 1.07  # Adjusted spacing\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Remaining circles (corners/edges - adjusted)\n    remaining = n - count\n    corner_radius = 0.084  # Optimized corner radius\n    edge_radius = 0.074  # Optimized edge radius\n\n    if remaining >= 4:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n\n    if remaining > 0 and remaining < 4:\n        edge_radius = 0.070  # Optimized edge radius\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        if remaining > 1:\n            centers[count] = [0.5, 1 - edge_radius]\n            radii[count] = edge_radius\n            count += 1\n        if remaining > 2:\n            centers[count] = [edge_radius, 0.5]\n            radii[count] = edge_radius\n            count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.105 * (1 - dist_to_center**2)  # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.05\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Slightly larger central circle\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.100  # Adjusted inner radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.03  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.090  # Adjusted middle radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.03 + middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.080  # Adjusted outer radius\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.03 + 2 * middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.088  # Adjusted corner radius\n    if count < n:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners and optimized values\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.110  # Increased corner radius\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.080  # Optimized grid circle radius\n                count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2)\n    radii = np.random.rand(n) * 0.07 + 0.045  # Radii between 0.045 and 0.115\n    return centers, radii\n\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern, denser packing and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    radius = 0.080  # Initial radius, will be adjusted.\n    x_start = radius\n    y_start = radius\n    x_spacing = 2 * radius\n    y_spacing = np.sqrt(3) * radius\n    count = 0\n\n    x = x_start\n    y = y_start\n\n    while count < n:\n        centers[count] = [x, y]\n        radii[count] = radius\n        count += 1\n\n        x += x_spacing\n        if x > 1 - radius:\n            x = x_start + (x_spacing / 2 if int(y / y_spacing) % 2 == 0 else 0)  # Stagger rows\n            y += y_spacing\n            if y > 1 - radius:\n                radius *= 0.93  # Reduce radius slightly if too many are needed.\n                x_start = radius\n                y_start = radius\n                x_spacing = 2 * radius\n                y_spacing = np.sqrt(3) * radius\n                x = x_start\n                y = y_start\n                count = 0  # Restart packing with smaller circles\n\n    return centers[:n], radii[:n]\n\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger center, smaller outwards and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    center_x, center_y = 0.5, 0.5\n    radii[0] = 0.115  # Adjusted center radius\n    centers[0] = [center_x, center_y]\n    count = 1\n    num_rings = 4\n    max_circles_per_ring = 6\n    ring_radius_increase = 0.1\n    base_radius = 0.085  # Adjusted base radius\n\n    for ring in range(1, num_rings + 1):\n        num_circles = min(max_circles_per_ring * ring, n - count)\n        ring_radius = base_radius - ring * 0.006  # Adjusted ring radius decrease\n        for i in range(num_circles):\n            angle = 2 * np.pi * i / num_circles\n            distance_from_center = ring * ring_radius_increase\n            x = center_x + distance_from_center * np.cos(angle)\n            y = center_y + distance_from_center * np.sin(angle)\n            centers[count] = [x, y]\n            radii[count] = ring_radius\n            count += 1\n            if count >= n:\n                break\n        if count >= n:\n            break\n    return centers, radii\n\ndef initialize_pattern_quasicrystalline(n):\n    \"\"\"Initialize with a quasi-crystalline pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    golden_ratio = (1 + np.sqrt(5)) / 2\n    initial_radius = 0.075  # Adjusted initial radius\n    angle_increment = 2 * np.pi / (n - 1) if n > 1 else 0\n    center_x, center_y = 0.5, 0.5\n    radii[0] = 0.12  # Center Circle\n    centers[0] = [center_x, center_y]\n    count = 1\n\n    for i in range(1, n):\n        angle = i * angle_increment * golden_ratio\n        distance = (i * 0.04)  # Adjusted distance increment\n        x = center_x + distance * np.cos(angle)\n        y = center_y + distance * np.sin(angle)\n        centers[count] = [x, y]\n        radii[count] = initial_radius * (1 - distance/2) # Adjusted radius scaling\n        count += 1\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure, optimized parameters\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 40.0  # Increased\n    wall_repulsion = 40.0  # Increased\n    dt = 0.01\n    dampening = 0.92  # Adjusted dampening\n    gravity = 0.0005  # Add a weak gravity towards the center, reduced\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.0035 * temperature, centers.shape)  # Reduced magnitude\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, optimized parameters\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.00070  # Reduced growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.55)  # Adjusted growth factor\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes, optimized parameters\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.002, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0007)  # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:  # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space, optimized parameters\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space  # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ab40dac5-f93c-4e0f-8459-dad6d98bab16", "generation": 8, "timestamp": 1750806056.4432793, "iteration_found": 198, "metrics": {"validity": 1.0, "sum_radii": 2.397280458184659, "target_ratio": 0.9097838550985424, "combined_score": 0.9097838550985424, "eval_time": 20.21177840232849}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.4134089166002886, "target_ratio": 0.9159047121822728, "combined_score": 0.9159047121822728, "eval_time": 16.947665452957153}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4134\n- target_ratio: 0.9159\n- combined_score: 0.9159\n- eval_time: 16.9477\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5839, target_ratio: 0.9806, combined_score: 0.9806, eval_time: 99.5983\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 6.5107)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization with gradient-based refinement\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (26.9167)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 21.0287)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using advanced mathematical patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5839), Performs well on target_ratio (0.9806), Performs well on combined_score (0.9806), Performs well on eval_time (99.5983)\n\n\n### Program 4 (Score: 7.2243)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-phase optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4746), Performs well on target_ratio (0.9391), Performs well on combined_score (0.9391), Performs well on eval_time (30.7688)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 7.1443)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization with gradient-based refinement\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(6):  # Reduced strategies, focusing on promising ones\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_modified_hexagonal(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 3:\n            centers, radii = initialize_pattern_triangular(n)\n        elif strategy == 4:\n            centers, radii = initialize_pattern_radial(n)\n        else:\n            centers, radii = initialize_pattern_hexagonal(n) # More hexagonal optimization\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage2(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage3(centers, radii, iterations=600)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes and optimized ratios\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.120  # Optimized center circle size\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095  # Optimized ring radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.06  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085  # Optimized ring radius\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.06 + ring_radius * 1.06  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.090  # Optimized corner radius\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - reduced to 3 from 4\n    edge_radius = 0.080  # Optimized edge radius\n    if count < n:\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [0.5, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [edge_radius, 0.5]\n        radii[count] = edge_radius\n        count += 1\n    return centers, radii\n\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a slightly modified hexagonal pattern for better packing.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.122  # Slightly larger central circle\n\n    # First ring (6 circles)\n    count = 1\n    ring_radius = 0.090  # Adjusted ring radius\n    ring_dist = radii[0] + ring_radius * 1.07  # Slightly increased distance\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second ring (12 circles)\n    ring_radius = 0.080  # Adjusted ring radius\n    ring_dist = radii[0] + 2 * 0.090 * 1.07 + ring_radius * 1.07  # Adjusted spacing\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Remaining circles (corners/edges - adjusted)\n    remaining = n - count\n    corner_radius = 0.084  # Optimized corner radius\n    edge_radius = 0.074  # Optimized edge radius\n\n    if remaining >= 4:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n\n    if remaining > 0 and remaining < 4:\n        edge_radius = 0.070  # Optimized edge radius\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        if remaining > 1:\n            centers[count] = [0.5, 1 - edge_radius]\n            radii[count] = edge_radius\n            count += 1\n        if remaining > 2:\n            centers[count] = [edge_radius, 0.5]\n            radii[count] = edge_radius\n            count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.105 * (1 - dist_to_center**2)  # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.05\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Slightly larger central circle\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.100  # Adjusted inner radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.03  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.090  # Adjusted middle radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.03 + middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.080  # Adjusted outer radius\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.03 + 2 * middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.088  # Adjusted corner radius\n    if count < n:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners and optimized values\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.110  # Increased corner radius\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.080  # Optimized grid circle radius\n                count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2)\n    radii = np.random.rand(n) * 0.07 + 0.045  # Radii between 0.045 and 0.115\n    return centers, radii\n\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern, denser packing and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    radius = 0.080  # Initial radius, will be adjusted.\n    x_start = radius\n    y_start = radius\n    x_spacing = 2 * radius\n    y_spacing = np.sqrt(3) * radius\n    count = 0\n\n    x = x_start\n    y = y_start\n\n    while count < n:\n        centers[count] = [x, y]\n        radii[count] = radius\n        count += 1\n\n        x += x_spacing\n        if x > 1 - radius:\n            x = x_start + (x_spacing / 2 if int(y / y_spacing) % 2 == 0 else 0)  # Stagger rows\n            y += y_spacing\n            if y > 1 - radius:\n                radius *= 0.93  # Reduce radius slightly if too many are needed.\n                x_start = radius\n                y_start = radius\n                x_spacing = 2 * radius\n                y_spacing = np.sqrt(3) * radius\n                x = x_start\n                y = y_start\n                count = 0  # Restart packing with smaller circles\n\n    return centers[:n], radii[:n]\n\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger center, smaller outwards and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    center_x, center_y = 0.5, 0.5\n    radii[0] = 0.115  # Adjusted center radius\n    centers[0] = [center_x, center_y]\n    count = 1\n    num_rings = 4\n    max_circles_per_ring = 6\n    ring_radius_increase = 0.1\n    base_radius = 0.085  # Adjusted base radius\n\n    for ring in range(1, num_rings + 1):\n        num_circles = min(max_circles_per_ring * ring, n - count)\n        ring_radius = base_radius - ring * 0.006  # Adjusted ring radius decrease\n        for i in range(num_circles):\n            angle = 2 * np.pi * i / num_circles\n            distance_from_center = ring * ring_radius_increase\n            x = center_x + distance_from_center * np.cos(angle)\n            y = center_y + distance_from_center * np.sin(angle)\n            centers[count] = [x, y]\n            radii[count] = ring_radius\n            count += 1\n            if count >= n:\n                break\n        if count >= n:\n            break\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure, optimized parameters\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 35.0  # Increased\n    wall_repulsion = 35.0  # Increased\n    dt = 0.01\n    dampening = 0.92  # Adjusted dampening\n    gravity = 0.0007  # Add a weak gravity towards the center, reduced\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.0035 * temperature, centers.shape)  # Reduced magnitude\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, optimized parameters\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.00070  # Reduced growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.55)  # Adjusted growth factor\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes, optimized parameters\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.002, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0007)  # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:  # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space, optimized parameters\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space  # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization with gradient-based refinement\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(7):  # Increased strategies, focusing on promising ones\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_modified_hexagonal(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 3:\n            centers, radii = initialize_pattern_triangular(n)\n        elif strategy == 4:\n            centers, radii = initialize_pattern_radial(n)\n        elif strategy == 5:\n            centers, radii = initialize_pattern_hexagonal(n) # More hexagonal optimization\n        else:\n            centers, radii = initialize_pattern_quasicrystalline(n)\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage2(centers, radii, iterations=400)  # Increased iterations\n        centers, radii = optimize_stage3(centers, radii, iterations=600)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes and optimized ratios\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.120  # Optimized center circle size\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095  # Optimized ring radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.06  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085  # Optimized ring radius\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.06 + ring_radius * 1.06  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.090  # Optimized corner radius\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - reduced to 3 from 4\n    edge_radius = 0.080  # Optimized edge radius\n    if count < n:\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [0.5, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    if count < n:\n        centers[count] = [edge_radius, 0.5]\n        radii[count] = edge_radius\n        count += 1\n    return centers, radii\n\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a slightly modified hexagonal pattern for better packing.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.122  # Slightly larger central circle\n\n    # First ring (6 circles)\n    count = 1\n    ring_radius = 0.090  # Adjusted ring radius\n    ring_dist = radii[0] + ring_radius * 1.07  # Slightly increased distance\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second ring (12 circles)\n    ring_radius = 0.080  # Adjusted ring radius\n    ring_dist = radii[0] + 2 * 0.090 * 1.07 + ring_radius * 1.07  # Adjusted spacing\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[count] = [0.5 + ring_dist * np.cos(angle), 0.5 + ring_dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Remaining circles (corners/edges - adjusted)\n    remaining = n - count\n    corner_radius = 0.084  # Optimized corner radius\n    edge_radius = 0.074  # Optimized edge radius\n\n    if remaining >= 4:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n\n    if remaining > 0 and remaining < 4:\n        edge_radius = 0.070  # Optimized edge radius\n        centers[count] = [0.5, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        if remaining > 1:\n            centers[count] = [0.5, 1 - edge_radius]\n            radii[count] = edge_radius\n            count += 1\n        if remaining > 2:\n            centers[count] = [edge_radius, 0.5]\n            radii[count] = edge_radius\n            count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.105 * (1 - dist_to_center**2)  # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.05\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Slightly larger central circle\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.100  # Adjusted inner radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.03  # Adjusted distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.090  # Adjusted middle radius\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.03 + middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.080  # Adjusted outer radius\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.03 + 2 * middle_radius * 1.03  # Adjusted spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.088  # Adjusted corner radius\n    if count < n:\n        centers[count] = [corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n        count += 1\n    if count < n:\n        centers[count] = [1 - corner_radius, 1 - corner_radius]\n        radii[count] = corner_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners and optimized values\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.110  # Increased corner radius\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.080  # Optimized grid circle radius\n                count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2)\n    radii = np.random.rand(n) * 0.07 + 0.045  # Radii between 0.045 and 0.115\n    return centers, radii\n\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern, denser packing and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    radius = 0.080  # Initial radius, will be adjusted.\n    x_start = radius\n    y_start = radius\n    x_spacing = 2 * radius\n    y_spacing = np.sqrt(3) * radius\n    count = 0\n\n    x = x_start\n    y = y_start\n\n    while count < n:\n        centers[count] = [x, y]\n        radii[count] = radius\n        count += 1\n\n        x += x_spacing\n        if x > 1 - radius:\n            x = x_start + (x_spacing / 2 if int(y / y_spacing) % 2 == 0 else 0)  # Stagger rows\n            y += y_spacing\n            if y > 1 - radius:\n                radius *= 0.93  # Reduce radius slightly if too many are needed.\n                x_start = radius\n                y_start = radius\n                x_spacing = 2 * radius\n                y_spacing = np.sqrt(3) * radius\n                x = x_start\n                y = y_start\n                count = 0  # Restart packing with smaller circles\n\n    return centers[:n], radii[:n]\n\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize with a radial pattern, larger center, smaller outwards and optimized values.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    center_x, center_y = 0.5, 0.5\n    radii[0] = 0.115  # Adjusted center radius\n    centers[0] = [center_x, center_y]\n    count = 1\n    num_rings = 4\n    max_circles_per_ring = 6\n    ring_radius_increase = 0.1\n    base_radius = 0.085  # Adjusted base radius\n\n    for ring in range(1, num_rings + 1):\n        num_circles = min(max_circles_per_ring * ring, n - count)\n        ring_radius = base_radius - ring * 0.006  # Adjusted ring radius decrease\n        for i in range(num_circles):\n            angle = 2 * np.pi * i / num_circles\n            distance_from_center = ring * ring_radius_increase\n            x = center_x + distance_from_center * np.cos(angle)\n            y = center_y + distance_from_center * np.sin(angle)\n            centers[count] = [x, y]\n            radii[count] = ring_radius\n            count += 1\n            if count >= n:\n                break\n        if count >= n:\n            break\n    return centers, radii\n\ndef initialize_pattern_quasicrystalline(n):\n    \"\"\"Initialize with a quasi-crystalline pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    golden_ratio = (1 + np.sqrt(5)) / 2\n    initial_radius = 0.075  # Adjusted initial radius\n    angle_increment = 2 * np.pi / (n - 1) if n > 1 else 0\n    center_x, center_y = 0.5, 0.5\n    radii[0] = 0.12  # Center Circle\n    centers[0] = [center_x, center_y]\n    count = 1\n\n    for i in range(1, n):\n        angle = i * angle_increment * golden_ratio\n        distance = (i * 0.04)  # Adjusted distance increment\n        x = center_x + distance * np.cos(angle)\n        y = center_y + distance * np.sin(angle)\n        centers[count] = [x, y]\n        radii[count] = initial_radius * (1 - distance/2) # Adjusted radius scaling\n        count += 1\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure, optimized parameters\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 40.0  # Increased\n    wall_repulsion = 40.0  # Increased\n    dt = 0.01\n    dampening = 0.92  # Adjusted dampening\n    gravity = 0.0005  # Add a weak gravity towards the center, reduced\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.0035 * temperature, centers.shape)  # Reduced magnitude\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing, optimized parameters\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.00070  # Reduced growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.55)  # Adjusted growth factor\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes, optimized parameters\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.002, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0007)  # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist:  # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space, optimized parameters\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space  # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}