{"id": "7d9081e1-4313-445a-ab2a-bf68ca48a559", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with adaptive radii and gradient descent.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a known good pattern\n    centers, radii = initialize_advanced_pattern()\n\n    # Apply multi-stage optimization with gradient descent\n    centers, radii = optimize_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_advanced_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Slightly larger central circle\n\n    # Inner ring - 6 circles in hexagonal arrangement\n    inner_radius_pos = 0.35\n    inner_radius_size = 0.085\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + inner_radius_pos * np.cos(angle),\n                            0.5 + inner_radius_pos * np.sin(angle)]\n        radii[i + 1] = inner_radius_size\n\n    # Middle ring - 12 circles\n    middle_radius_pos = 0.60\n    middle_radius_size = 0.065\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger with inner ring\n        centers[i + 7] = [0.5 + middle_radius_pos * np.cos(angle),\n                            0.5 + middle_radius_pos * np.sin(angle)]\n        radii[i + 7] = middle_radius_size\n\n    # Corner circles - 4 circles\n    corner_offset = 0.06\n    corner_size = 0.055\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = corner_size\n\n    # Edge circles - 3 circles\n    edge_offset = 0.05\n    edge_size = 0.05\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [edge_offset, 0.5]\n    centers[25] = [1 - edge_offset, 0.5]\n    radii[23:26] = edge_size\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii using gradient descent.\n    \"\"\"\n    n = centers.shape[0]\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for circles outside the unit square\n        penalty = 0.0\n        for i in range(n):\n            penalty += max(0, current_radii[i] - current_centers[i, 0])**2\n            penalty += max(0, current_radii[i] - current_centers[i, 1])**2\n            penalty += max(0, current_radii[i] - (1 - current_centers[i, 0]))**2\n            penalty += max(0, current_radii[i] - (1 - current_centers[i, 1]))**2\n\n        # Penalty for overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((current_centers[i] - current_centers[j]) ** 2))\n                overlap = current_radii[i] + current_radii[j] - dist\n                penalty += max(0, overlap)**2  # Quadratic penalty\n\n        return -np.sum(current_radii) + 100 * penalty  # Minimize negative sum, add penalty\n\n    # Initial guess for optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the optimization\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.3)] * n  # Radius bounds\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective, x0, method='L-BFGS-B', bounds=bounds, options={'maxiter': 200})\n\n    # Extract optimized centers and radii\n    optimized_centers = result.x[:2 * n].reshape(n, 2)\n    optimized_radii = result.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "6952e645-27a8-43b5-ad2c-8de819435cc7", "generation": 3, "timestamp": 1750753037.5278614, "iteration_found": 81, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.6580641379883696, "target_ratio": 0.6292463521777494, "combined_score": 0.6292463521777494, "eval_time": 3.629544496536255}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.6581\n- target_ratio: 0.6292\n- combined_score: 0.6292\n- eval_time: 3.6295\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 2.8966)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach with improved initialization and physics-based optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a known good pattern\n    centers, radii = initialize_advanced_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_advanced_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.18\n\n    # Inner ring - 6 circles in hexagonal arrangement\n    inner_radius_pos = 0.32\n    inner_radius_size = 0.08\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + inner_radius_pos * np.cos(angle),\n                            0.5 + inner_radius_pos * np.sin(angle)]\n        radii[i + 1] = inner_radius_size\n\n    # Middle ring - 12 circles\n    middle_radius_pos = 0.55\n    middle_radius_size = 0.06\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger with inner ring\n        centers[i + 7] = [0.5 + middle_radius_pos * np.cos(angle),\n                            0.5 + middle_radius_pos * np.sin(angle)]\n        radii[i + 7] = middle_radius_size\n\n    # Corner circles - 4 circles\n    corner_offset = 0.07\n    corner_size = 0.05\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = corner_size\n\n    # Edge circles - 3 circles\n    edge_offset = 0.04\n    edge_size = 0.045\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [edge_offset, 0.5]\n    centers[25] = [1 - edge_offset, 0.5]\n    radii[23:26] = edge_size\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based optimization\n    for _ in range(100):\n        # Calculate forces between circles\n        forces = np.zeros_like(centers)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Repulsive force proportional to overlap\n                        direction = (centers[i] - centers[j]) / dist\n                        forces[i] += direction * overlap * 0.5\n        # Move circles based on forces\n        centers += forces * 0.01\n\n        # Keep circles within the unit square\n        centers = np.clip(centers, radii.reshape(-1, 1), 1 - radii.reshape(-1, 1))\n\n    # Stage 2: Radius optimization (iterative)\n    for _ in range(50):\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(20):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]))\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with adaptive radii and gradient descent.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a known good pattern\n    centers, radii = initialize_advanced_pattern()\n\n    # Apply multi-stage optimization with gradient descent\n    centers, radii = optimize_packing(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_advanced_pattern():\n    \"\"\"\n    Initialize with a carefully designed pattern based on mathematical principles\n    for efficient circle packing.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.20  # Slightly larger central circle\n\n    # Inner ring - 6 circles in hexagonal arrangement\n    inner_radius_pos = 0.35\n    inner_radius_size = 0.085\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + inner_radius_pos * np.cos(angle),\n                            0.5 + inner_radius_pos * np.sin(angle)]\n        radii[i + 1] = inner_radius_size\n\n    # Middle ring - 12 circles\n    middle_radius_pos = 0.60\n    middle_radius_size = 0.065\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12  # Offset to stagger with inner ring\n        centers[i + 7] = [0.5 + middle_radius_pos * np.cos(angle),\n                            0.5 + middle_radius_pos * np.sin(angle)]\n        radii[i + 7] = middle_radius_size\n\n    # Corner circles - 4 circles\n    corner_offset = 0.06\n    corner_size = 0.055\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = corner_size\n\n    # Edge circles - 3 circles\n    edge_offset = 0.05\n    edge_size = 0.05\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [edge_offset, 0.5]\n    centers[25] = [1 - edge_offset, 0.5]\n    radii[23:26] = edge_size\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii using gradient descent.\n    \"\"\"\n    n = centers.shape[0]\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape(n, 2)\n        current_radii = x[2 * n:]\n\n        # Penalty for circles outside the unit square\n        penalty = 0.0\n        for i in range(n):\n            penalty += max(0, current_radii[i] - current_centers[i, 0])**2\n            penalty += max(0, current_radii[i] - current_centers[i, 1])**2\n            penalty += max(0, current_radii[i] - (1 - current_centers[i, 0]))**2\n            penalty += max(0, current_radii[i] - (1 - current_centers[i, 1]))**2\n\n        # Penalty for overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((current_centers[i] - current_centers[j]) ** 2))\n                overlap = current_radii[i] + current_radii[j] - dist\n                penalty += max(0, overlap)**2  # Quadratic penalty\n\n        return -np.sum(current_radii) + 100 * penalty  # Minimize negative sum, add penalty\n\n    # Initial guess for optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the optimization\n    bounds = [(0, 1)] * (2 * n) + [(0.01, 0.3)] * n  # Radius bounds\n\n    # Optimization using L-BFGS-B\n    result = minimize(objective, x0, method='L-BFGS-B', bounds=bounds, options={'maxiter': 200})\n\n    # Extract optimized centers and radii\n    optimized_centers = result.x[:2 * n].reshape(n, 2)\n    optimized_radii = result.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}