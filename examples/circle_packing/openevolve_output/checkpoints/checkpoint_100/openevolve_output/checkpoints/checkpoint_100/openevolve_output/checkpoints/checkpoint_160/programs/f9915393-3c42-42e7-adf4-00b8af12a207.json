{"id": "f9915393-3c42-42e7-adf4-00b8af12a207", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and hierarchical optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Use fewer but more effective initialization strategies\n    strategies = [\n        initialize_pattern_specialized_26,  # Specialized for n=26\n        initialize_pattern_hexagonal,       # Hexagonal pattern\n        initialize_pattern_hybrid,          # Hybrid pattern\n        initialize_pattern_corner_optimized # Corner-optimized pattern\n    ]\n    \n    for init_func in strategies:\n        # Initialize with current strategy\n        centers, radii = init_func(n)\n        \n        # Apply hierarchical optimization\n        centers, radii = hierarchical_optimization(centers, radii)\n        \n        # Calculate sum of radii\n        sum_radii = np.sum(radii)\n        \n        # Keep the best result\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    # Final refinement on the best result\n    best_centers, best_radii = final_refinement(best_centers, best_radii)\n    best_sum = np.sum(best_radii)\n    \n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_specialized_26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on mathematical research.\n    This pattern is inspired by known optimal packings for similar numbers.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place one large circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Larger center circle\n    \n    # First ring: 6 circles in hexagonal arrangement\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        r = 0.11  # Radius for first ring\n        dist = radii[0] + r + 0.001  # Small gap to avoid exact contact\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = r\n    \n    # Second ring: 12 circles\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle\n        r = 0.095  # Radius for second ring\n        dist = radii[0] + 2*0.11 + r + 0.002  # Position based on first ring\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = r\n    \n    # Corner circles: 4 circles in corners\n    r_corner = 0.09  # Radius for corner circles\n    corner_positions = [\n        [r_corner, r_corner],\n        [1-r_corner, r_corner],\n        [r_corner, 1-r_corner],\n        [1-r_corner, 1-r_corner]\n    ]\n    \n    for i in range(4):\n        centers[i+19] = corner_positions[i]\n        radii[i+19] = r_corner\n    \n    # Three additional circles to fill gaps\n    centers[23] = [0.5, 0.5 - 2*radii[0] - 0.07]\n    radii[23] = 0.07\n    centers[24] = [0.5 - 2*radii[0] - 0.07, 0.5]\n    radii[24] = 0.07\n    centers[25] = [0.5 + 2*radii[0] + 0.07, 0.5]\n    radii[25] = 0.07\n    \n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with an optimized hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # First hexagonal ring (6 circles)\n    ring_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring_radius\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle\n        dist = radii[0] + 2*0.105 + ring_radius + 0.002\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring_radius\n\n    # Remaining circles in corners and edges\n    remaining = n - 19\n    corner_radius = 0.09\n    \n    # Place in corners\n    corners = [[corner_radius, corner_radius], \n               [1-corner_radius, corner_radius], \n               [corner_radius, 1-corner_radius], \n               [1-corner_radius, 1-corner_radius]]\n    \n    for i in range(min(remaining, 4)):\n        centers[i+19] = corners[i]\n        radii[i+19] = corner_radius\n    \n    # Any additional circles\n    for i in range(4, remaining):\n        centers[i+19] = [0.2 + 0.6*np.random.random(), 0.2 + 0.6*np.random.random()]\n        radii[i+19] = 0.07\n\n    return centers, radii\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (8 circles)\n    inner_radius = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + inner_radius + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = inner_radius\n\n    # Outer ring (12 circles)\n    outer_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2*inner_radius + outer_radius + 0.002\n        centers[i+9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+9] = outer_radius\n\n    # Corner circles (4)\n    corner_radius = 0.09\n    corners = [\n        [corner_radius, corner_radius],\n        [1-corner_radius, corner_radius],\n        [corner_radius, 1-corner_radius],\n        [1-corner_radius, 1-corner_radius]\n    ]\n    \n    for i in range(4):\n        centers[i+21] = corners[i]\n        radii[i+21] = corner_radius\n    \n    # Add final circle to fill a gap\n    centers[25] = [0.5, 0.5 - 2*radii[0] - 0.07]\n    radii[25] = 0.07\n\n    return centers, radii\n\ndef initialize_pattern_corner_optimized(n):\n    \"\"\"Initialize with larger circles in corners and optimized interior packing\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Four large circles in corners\n    corner_radius = 0.1\n    corners = [\n        [corner_radius, corner_radius],\n        [1-corner_radius, corner_radius],\n        [corner_radius, 1-corner_radius],\n        [1-corner_radius, 1-corner_radius]\n    ]\n    \n    for i in range(4):\n        centers[i] = corners[i]\n        radii[i] = corner_radius\n\n    # Central circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.115\n\n    # Inner ring (8 circles)\n    inner_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[4] + inner_radius + 0.001\n        centers[i+5] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+5] = inner_radius\n\n    # Middle circles along edges\n    edge_radius = 0.085\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1-edge_radius],\n        [edge_radius, 0.5],\n        [1-edge_radius, 0.5]\n    ]\n    \n    for i in range(4):\n        centers[i+13] = edge_positions[i]\n        radii[i+13] = edge_radius\n\n    # Remaining circles in a structured pattern\n    remaining_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9 + np.pi/9\n        dist = radii[4] + 2*inner_radius + remaining_radius + 0.002\n        centers[i+17] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+17] = remaining_radius\n\n    return centers, radii\n\ndef hierarchical_optimization(centers, radii):\n    \"\"\"\n    Multi-level optimization approach that progressively refines the packing\n    \"\"\"\n    n = len(centers)\n    \n    # Stage 1: Resolve overlaps with physics-based simulation\n    centers, radii = physics_optimization(centers, radii, iterations=200)\n    \n    # Stage 2: Maximize radii while maintaining valid packing\n    centers, radii = maximize_radii(centers, radii, iterations=150)\n    \n    # Stage 3: Local search optimization\n    centers, radii = local_search_optimization(centers, radii, iterations=300)\n    \n    return centers, radii\n\ndef physics_optimization(centers, radii, iterations):\n    \"\"\"Physics-based optimization to resolve overlaps and establish structure\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update velocities and positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef maximize_radii(centers, radii, iterations):\n    \"\"\"Maximize all radii while maintaining a valid packing\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        for i in range(n):\n            # Calculate maximum possible radius without overlaps\n            max_radius = float('inf')\n            \n            # Check distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    max_radius = min(max_radius, dist - radii[j])\n            \n            # Check distance to walls\n            x, y = centers[i]\n            max_radius = min(max_radius, x, y, 1-x, 1-y)\n            \n            # Update radius (with a small safety margin)\n            radii[i] = max_radius * 0.999\n    \n    return centers, radii\n\ndef local_search_optimization(centers, radii, iterations):\n    \"\"\"Fine-tune positions and radii using local search\"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01\n    cooling_rate = 0.995\n    \n    for iter in range(iterations):\n        # Select a random circle to modify\n        i = np.random.randint(0, n)\n        \n        # Create a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Perturb position\n        if np.random.random() < 0.7:  # 70% chance to move position\n            new_centers[i] += np.random.normal(0, 0.002, 2)\n            new_centers[i] = np.clip(new_centers[i], new_radii[i], 1 - new_radii[i])\n        \n        # Check for validity and maximize radius\n        valid = True\n        max_radius = float('inf')\n        \n        # Check distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(new_centers[i] - new_centers[j])\n                max_radius = min(max_radius, dist - new_radii[j])\n        \n        # Check distance to walls\n        x, y = new_centers[i]\n        max_radius = min(max_radius, x, y, 1-x, 1-y)\n        \n        if max_radius < 0.01:  # Too small, invalid configuration\n            valid = False\n        else:\n            new_radii[i] = max_radius * 0.999  # Apply safety margin\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta = new_sum - np.sum(radii)\n            \n            if delta > 0 or np.random.random() < np.exp(delta / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 30 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            \n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    for _ in range(3):\n        for i in range(n):\n            # Calculate maximum possible radius\n            max_radius = float('inf')\n            \n            # Check distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    max_radius = min(max_radius, dist - radii[j])\n            \n            # Check distance to walls\n            x, y = centers[i]\n            max_radius = min(max_radius, x, y, 1-x, 1-y)\n            \n            # Update radius with safety margin\n            radii[i] = max_radius * 0.999\n    \n    return centers, radii\n\ndef final_refinement(centers, radii):\n    \"\"\"Final refinement stage using gradient-based optimization\"\"\"\n    n = len(centers)\n    \n    # Define the objective function to maximize sum of radii\n    def objective(params):\n        # Extract positions and radii from flattened parameters\n        positions = params[:2*n].reshape(n, 2)\n        circle_radii = params[2*n:]\n        \n        # Penalty for overlaps\n        penalty = 0\n        \n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(positions[i] - positions[j])\n                min_dist = circle_radii[i] + circle_radii[j]\n                if dist < min_dist:\n                    penalty += 1000 * (min_dist - dist)**2\n        \n        # Wall constraints\n        for i in range(n):\n            x, y = positions[i]\n            r = circle_radii[i]\n            \n            if x < r:\n                penalty += 1000 * (r - x)**2\n            if x > 1 - r:\n                penalty += 1000 * (x - (1 - r))**2\n            if y < r:\n                penalty += 1000 * (r - y)**2\n            if y > 1 - r:\n                penalty += 1000 * (y - (1 - r))**2\n        \n        # Objective: maximize sum of radii\n        return -np.sum(circle_radii) + penalty\n    \n    # Flatten parameters for optimization\n    initial_params = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds for parameters\n    bounds = []\n    for i in range(n):\n        bounds.append((0, 1))  # x bounds\n        bounds.append((0, 1))  # y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.2))  # radius bounds\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        initial_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 100, 'ftol': 1e-6}\n    )\n    \n    # Extract optimized parameters\n    optimized_params = result.x\n    optimized_centers = optimized_params[:2*n].reshape(n, 2)\n    optimized_radii = optimized_params[2*n:]\n    \n    # Ensure no overlaps in final solution\n    optimized_centers, optimized_radii = physics_optimization(optimized_centers, optimized_radii, iterations=50)\n    optimized_centers, optimized_radii = optimize_all_radii(optimized_centers, optimized_radii)\n    \n    return optimized_centers, optimized_radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "013762e2-107b-4fd4-ad26-752d5bf8108c", "generation": 7, "timestamp": 1750795044.049264, "iteration_found": 81, "metrics": {"validity": 1.0, "sum_radii": 2.53636830765205, "target_ratio": 0.9625686177047629, "combined_score": 0.9625686177047629, "eval_time": 20.961430072784424}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.484309719246843, "target_ratio": 0.9428120376648361, "combined_score": 0.9428120376648361, "eval_time": 20.270181894302368}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4843\n- target_ratio: 0.9428\n- combined_score: 0.9428\n- eval_time: 20.2702\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6241, target_ratio: 0.9959, combined_score: 0.9959, eval_time: 35.2108\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6280, target_ratio: 0.9973, combined_score: 0.9973, eval_time: 37.1418\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6267, target_ratio: 0.9968, combined_score: 0.9968, eval_time: 42.1538\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 6.7041)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6280), Performs well on target_ratio (0.9973), Performs well on combined_score (0.9973), Performs well on eval_time (27.8981)\n\n\n### Program 2 (Score: 9.5548)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6267), Performs well on target_ratio (0.9968), Performs well on combined_score (0.9968), Performs well on eval_time (42.1538)\n\n\n### Program 3 (Score: 0.0000)\n```python\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: invalid syntax (tmppxmdqyhi.py, line 1))\n\n\n### Program 4 (Score: 0.0000)\n```python\nI'll create an improved circle packing algorithm that aims to reach the target of 2.637 for the sum of radii. Based on the mathematical literature and computational geometry principles, I'll implement a more effective approach focusing on specialized patterns and optimization techniques.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: invalid syntax (tmpm4de5_2g.py, line 1))\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.1497)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(8):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        elif strategy == 5:\n            centers, radii = initialize_pattern_triangular(n)\n        elif strategy == 6:\n            centers, radii = initialize_pattern_quasi_random(n)  # New strategy\n        else:\n            centers, radii = initialize_pattern_radial(n)  # New strategy\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 + ring_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Remaining circles positioned randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1 # Ensure within bounds\n        radii[count] = 0.07  # Smaller radius for remaining circles\n        count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.11 * (1 - dist_to_center**2) # Quadratic falloff\n                count += 1\n\n    # One extra circle in the center with variable size\n    if count < n:\n        centers[count] = [0.5, 0.5]\n        radii[count] = 0.05\n        count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.09\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius + 2 * middle_radius\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n    \n    while count < n: # Fill any remaining spots\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = 0.07\n        count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.10\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.07\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2)\n    radii = np.random.rand(n) * 0.08 + 0.04  # Radii between 0.04 and 0.12\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern, denser packing.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    radius = 0.08  # Initial radius, will be adjusted.\n    x_start = radius\n    y_start = radius\n    x_spacing = 2 * radius\n    y_spacing = np.sqrt(3) * radius\n    count = 0\n\n    x = x_start\n    y = y_start\n\n    while count < n:\n        centers[count] = [x, y]\n        radii[count] = radius\n        count += 1\n\n        x += x_spacing\n        if x > 1 - radius:\n            x = x_start + (x_spacing / 2 if int(y / y_spacing) % 2 == 0 else 0) # Stagger rows\n            y += y_spacing\n            if y > 1 - radius:\n                radius *= 0.9 # Reduce radius slightly if too many are needed.\n                x_start = radius\n                y_start = radius\n                x_spacing = 2 * radius\n                y_spacing = np.sqrt(3) * radius\n                x = x_start\n                y = y_start\n                count = 0 #Restart packing with smaller circles\n\n    return centers[:n], radii[:n]\n\ndef initialize_pattern_quasi_random(n):\n    \"\"\"Initialize with a quasi-random (Halton sequence) pattern.\"\"\"\n    def halton(index, base):\n        result = 0\n        fraction = 1 / base\n        i = index\n        while i > 0:\n            result += fraction * (i % base)\n            i //= base\n            fraction /= base\n        return result\n\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    for i in range(n):\n        centers[i] = [halton(i + 1, 2), halton(i + 1, 3)]  # Use different bases for x and y\n        radii[i] = np.random.rand() * 0.06 + 0.05  # Smaller radii for tighter packing\n\n    return centers, radii\n\ndef initialize_pattern_radial(n):\n    \"\"\"Initialize circles in a radial arrangement.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    num_rings = int(np.ceil(np.sqrt(n)))\n    count = 0\n    \n    for ring in range(num_rings):\n        num_circles_in_ring = max(1, 6 * ring)  # Number of circles in each ring\n        radius_offset = 0.1 + 0.05 * ring # Distance from center\n        \n        for i in range(num_circles_in_ring):\n            if count < n:\n                angle = 2 * np.pi * i / num_circles_in_ring\n                x = 0.5 + radius_offset * np.cos(angle)\n                y = 0.5 + radius_offset * np.sin(angle)\n                centers[count] = [x, y]\n                radii[count] = 0.06 + 0.01*np.random.rand() # Variable radius\n                count += 1\n            else:\n                break\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0  # Increased\n    wall_repulsion = 25.0  # Increased\n    dt = 0.01\n    dampening = 0.95\n    gravity = 0.0015  # Add a weak gravity towards the center, reduced\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape) # Reduced magnitude\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0008 # Reduced growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.5)\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.1)\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n    position_perturbation = 0.0025 # Reduced perturbation even more\n    radius_perturbation = 0.0008 # Reduced perturbation even more\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, position_perturbation, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, radius_perturbation) # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist: # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.9 * radii[i] + 0.1 * available_space # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll rewrite the program to improve its performance, focusing on reaching the target sum of radii of 2.637. I'll implement a more effective approach based on mathematical principles of circle packing.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and hierarchical optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Use fewer but more effective initialization strategies\n    strategies = [\n        initialize_pattern_specialized_26,  # Specialized for n=26\n        initialize_pattern_hexagonal,       # Hexagonal pattern\n        initialize_pattern_hybrid,          # Hybrid pattern\n        initialize_pattern_corner_optimized # Corner-optimized pattern\n    ]\n    \n    for init_func in strategies:\n        # Initialize with current strategy\n        centers, radii = init_func(n)\n        \n        # Apply hierarchical optimization\n        centers, radii = hierarchical_optimization(centers, radii)\n        \n        # Calculate sum of radii\n        sum_radii = np.sum(radii)\n        \n        # Keep the best result\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    # Final refinement on the best result\n    best_centers, best_radii = final_refinement(best_centers, best_radii)\n    best_sum = np.sum(best_radii)\n    \n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_specialized_26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on mathematical research.\n    This pattern is inspired by known optimal packings for similar numbers.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place one large circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Larger center circle\n    \n    # First ring: 6 circles in hexagonal arrangement\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        r = 0.11  # Radius for first ring\n        dist = radii[0] + r + 0.001  # Small gap to avoid exact contact\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = r\n    \n    # Second ring: 12 circles\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle\n        r = 0.095  # Radius for second ring\n        dist = radii[0] + 2*0.11 + r + 0.002  # Position based on first ring\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = r\n    \n    # Corner circles: 4 circles in corners\n    r_corner = 0.09  # Radius for corner circles\n    corner_positions = [\n        [r_corner, r_corner],\n        [1-r_corner, r_corner],\n        [r_corner, 1-r_corner],\n        [1-r_corner, 1-r_corner]\n    ]\n    \n    for i in range(4):\n        centers[i+19] = corner_positions[i]\n        radii[i+19] = r_corner\n    \n    # Three additional circles to fill gaps\n    centers[23] = [0.5, 0.5 - 2*radii[0] - 0.07]\n    radii[23] = 0.07\n    centers[24] = [0.5 - 2*radii[0] - 0.07, 0.5]\n    radii[24] = 0.07\n    centers[25] = [0.5 + 2*radii[0] + 0.07, 0.5]\n    radii[25] = 0.07\n    \n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with an optimized hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # First hexagonal ring (6 circles)\n    ring_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring_radius\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle\n        dist = radii[0] + 2*0.105 + ring_radius + 0.002\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring_radius\n\n    # Remaining circles in corners and edges\n    remaining = n - 19\n    corner_radius = 0.09\n    \n    # Place in corners\n    corners = [[corner_radius, corner_radius], \n               [1-corner_radius, corner_radius], \n               [corner_radius, 1-corner_radius], \n               [1-corner_radius, 1-corner_radius]]\n    \n    for i in range(min(remaining, 4)):\n        centers[i+19] = corners[i]\n        radii[i+19] = corner_radius\n    \n    # Any additional circles\n    for i in range(4, remaining):\n        centers[i+19] = [0.2 + 0.6*np.random.random(), 0.2 + 0.6*np.random.random()]\n        radii[i+19] = 0.07\n\n    return centers, radii\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (8 circles)\n    inner_radius = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + inner_radius + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = inner_radius\n\n    # Outer ring (12 circles)\n    outer_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2*inner_radius + outer_radius + 0.002\n        centers[i+9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+9] = outer_radius\n\n    # Corner circles (4)\n    corner_radius = 0.09\n    corners = [\n        [corner_radius, corner_radius],\n        [1-corner_radius, corner_radius],\n        [corner_radius, 1-corner_radius],\n        [1-corner_radius, 1-corner_radius]\n    ]\n    \n    for i in range(4):\n        centers[i+21] = corners[i]\n        radii[i+21] = corner_radius\n    \n    # Add final circle to fill a gap\n    centers[25] = [0.5, 0.5 - 2*radii[0] - 0.07]\n    radii[25] = 0.07\n\n    return centers, radii\n\ndef initialize_pattern_corner_optimized(n):\n    \"\"\"Initialize with larger circles in corners and optimized interior packing\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Four large circles in corners\n    corner_radius = 0.1\n    corners = [\n        [corner_radius, corner_radius],\n        [1-corner_radius, corner_radius],\n        [corner_radius, 1-corner_radius],\n        [1-corner_radius, 1-corner_radius]\n    ]\n    \n    for i in range(4):\n        centers[i] = corners[i]\n        radii[i] = corner_radius\n\n    # Central circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.115\n\n    # Inner ring (8 circles)\n    inner_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[4] + inner_radius + 0.001\n        centers[i+5] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+5] = inner_radius\n\n    # Middle circles along edges\n    edge_radius = 0.085\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1-edge_radius],\n        [edge_radius, 0.5],\n        [1-edge_radius, 0.5]\n    ]\n    \n    for i in range(4):\n        centers[i+13] = edge_positions[i]\n        radii[i+13] = edge_radius\n\n    # Remaining circles in a structured pattern\n    remaining_radius = 0.08\n    for i in range(9):\n        angle = 2 * np.pi * i / 9 + np.pi/9\n        dist = radii[4] + 2*inner_radius + remaining_radius + 0.002\n        centers[i+17] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+17] = remaining_radius\n\n    return centers, radii\n\ndef hierarchical_optimization(centers, radii):\n    \"\"\"\n    Multi-level optimization approach that progressively refines the packing\n    \"\"\"\n    n = len(centers)\n    \n    # Stage 1: Resolve overlaps with physics-based simulation\n    centers, radii = physics_optimization(centers, radii, iterations=200)\n    \n    # Stage 2: Maximize radii while maintaining valid packing\n    centers, radii = maximize_radii(centers, radii, iterations=150)\n    \n    # Stage 3: Local search optimization\n    centers, radii = local_search_optimization(centers, radii, iterations=300)\n    \n    return centers, radii\n\ndef physics_optimization(centers, radii, iterations):\n    \"\"\"Physics-based optimization to resolve overlaps and establish structure\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Calculate repulsive forces between circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion forces\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update velocities and positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef maximize_radii(centers, radii, iterations):\n    \"\"\"Maximize all radii while maintaining a valid packing\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        for i in range(n):\n            # Calculate maximum possible radius without overlaps\n            max_radius = float('inf')\n            \n            # Check distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    max_radius = min(max_radius, dist - radii[j])\n            \n            # Check distance to walls\n            x, y = centers[i]\n            max_radius = min(max_radius, x, y, 1-x, 1-y)\n            \n            # Update radius (with a small safety margin)\n            radii[i] = max_radius * 0.999\n    \n    return centers, radii\n\ndef local_search_optimization(centers, radii, iterations):\n    \"\"\"Fine-tune positions and radii using local search\"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01\n    cooling_rate = 0.995\n    \n    for iter in range(iterations):\n        # Select a random circle to modify\n        i = np.random.randint(0, n)\n        \n        # Create a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Perturb position\n        if np.random.random() < 0.7:  # 70% chance to move position\n            new_centers[i] += np.random.normal(0, 0.002, 2)\n            new_centers[i] = np.clip(new_centers[i], new_radii[i], 1 - new_radii[i])\n        \n        # Check for validity and maximize radius\n        valid = True\n        max_radius = float('inf')\n        \n        # Check distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(new_centers[i] - new_centers[j])\n                max_radius = min(max_radius, dist - new_radii[j])\n        \n        # Check distance to walls\n        x, y = new_centers[i]\n        max_radius = min(max_radius, x, y, 1-x, 1-y)\n        \n        if max_radius < 0.01:  # Too small, invalid configuration\n            valid = False\n        else:\n            new_radii[i] = max_radius * 0.999  # Apply safety margin\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta = new_sum - np.sum(radii)\n            \n            if delta > 0 or np.random.random() < np.exp(delta / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 30 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            \n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    for _ in range(3):\n        for i in range(n):\n            # Calculate maximum possible radius\n            max_radius = float('inf')\n            \n            # Check distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    max_radius = min(max_radius, dist - radii[j])\n            \n            # Check distance to walls\n            x, y = centers[i]\n            max_radius = min(max_radius, x, y, 1-x, 1-y)\n            \n            # Update radius with safety margin\n            radii[i] = max_radius * 0.999\n    \n    return centers, radii\n\ndef final_refinement(centers, radii):\n    \"\"\"Final refinement stage using gradient-based optimization\"\"\"\n    n = len(centers)\n    \n    # Define the objective function to maximize sum of radii\n    def objective(params):\n        # Extract positions and radii from flattened parameters\n        positions = params[:2*n].reshape(n, 2)\n        circle_radii = params[2*n:]\n        \n        # Penalty for overlaps\n        penalty = 0\n        \n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(positions[i] - positions[j])\n                min_dist = circle_radii[i] + circle_radii[j]\n                if dist < min_dist:\n                    penalty += 1000 * (min_dist - dist)**2\n        \n        # Wall constraints\n        for i in range(n):\n            x, y = positions[i]\n            r = circle_radii[i]\n            \n            if x < r:\n                penalty += 1000 * (r - x)**2\n            if x > 1 - r:\n                penalty += 1000 * (x - (1 - r))**2\n            if y < r:\n                penalty += 1000 * (r - y)**2\n            if y > 1 - r:\n                penalty += 1000 * (y - (1 - r))**2\n        \n        # Objective: maximize sum of radii\n        return -np.sum(circle_radii) + penalty\n    \n    # Flatten parameters for optimization\n    initial_params = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds for parameters\n    bounds = []\n    for i in range(n):\n        bounds.append((0, 1))  # x bounds\n        bounds.append((0, 1))  # y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.2))  # radius bounds\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        initial_params,\n        method='L-BFGS-B',\n        bounds=bounds,\n        options={'maxiter': 100, 'ftol': 1e-6}\n    )\n    \n    # Extract optimized parameters\n    optimized_params = result.x\n    optimized_centers = optimized_params[:2*n].reshape(n, 2)\n    optimized_radii = optimized_params[2*n:]\n    \n    # Ensure no overlaps in final solution\n    optimized_centers, optimized_radii = physics_optimization(optimized_centers, optimized_radii, iterations=50)\n    optimized_centers, optimized_radii = optimize_all_radii(optimized_centers, optimized_radii)\n    \n    return optimized_centers, optimized_radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}