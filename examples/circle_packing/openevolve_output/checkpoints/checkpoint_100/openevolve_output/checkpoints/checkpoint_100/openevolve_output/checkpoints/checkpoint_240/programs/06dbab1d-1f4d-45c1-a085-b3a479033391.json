{"id": "06dbab1d-1f4d-45c1-a085-b3a479033391", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation. Introduces a 'soft' overlap resolution and gradient-based optimization for radius adjustments.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_hexagonal,\n        initialize_pattern_grid,\n        initialize_pattern_hybrid,\n        initialize_pattern_corner_biased,\n        initialize_pattern_edge_biased,  # New pattern\n        initialize_special_26,  # Specialized pattern for n=26\n    ]\n\n    for initialize_pattern in patterns:\n        # Initialize with current pattern\n        centers, radii = initialize_pattern(n)\n\n        # Apply multi-stage optimization\n        centers, radii = optimize_packing(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.9  # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 0.105 * 1.9 + ring_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Fill remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = 0.08\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.11 * (1 - dist_to_center) + 0.04 # Adjusted radius scaling\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.06\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.09\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.9  # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Edge circles\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    radii[4] = edge_radius\n    centers[5] = [0.5, 1 - edge_radius]\n    radii[5] = edge_radius\n    centers[6] = [edge_radius, 0.5]\n    radii[6] = edge_radius\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[7] = edge_radius\n\n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n\n    # Remaining circles in a grid-like pattern\n    count = 9\n    remaining = n - count\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = 0.8 / (grid_size + 1)\n\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.1 + (i + 1) * spacing\n                y = 0.1 + (j + 1) * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.09\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_edge_biased(n):\n    \"\"\"Initialize with circles along the edges of the square\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Center circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.13\n\n    # Edge circles\n    count = 5\n    edge_radius = 0.1\n\n    # Bottom edge\n    num_edge = 4\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n\n    # Top edge\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n\n    # Left edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n\n    # Right edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [1 - edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n\n    # Fill remaining with circles in a grid pattern\n    while count < n:\n        grid_size = int(np.sqrt(n - count)) + 1\n        spacing = 0.6 / (grid_size + 1)\n\n        for i in range(grid_size):\n            for j in range(grid_size):\n                if count < n:\n                    x = 0.2 + (i + 1) * spacing\n                    y = 0.2 + (j + 1) * spacing\n                    centers[count] = [x, y]\n                    radii[count] = 0.08\n                    count += 1\n\n    return centers, radii\n\ndef initialize_special_26(n):\n    \"\"\"\n    Initialize with a specialized pattern for n=26 based on known good arrangements\n    from mathematical literature on circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on research for n=26 circle packing in a square\n    # Central structure\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # First ring - 6 circles\n    count = 1\n    ring1_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring1_radius\n        count += 1\n\n    # Second ring - 12 circles\n    ring2_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # offset angle\n        dist = radii[0] + 2 * ring1_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring2_radius\n        count += 1\n\n    # Corner circles - 4 circles\n    corner_radius = 0.102\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Middle of edges - 3 circles\n    edge_radius = 0.095\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [1 - edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n\n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization of the circle packing\n    \"\"\"\n    # First resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n\n    # Then grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n\n    # Finally, use direct optimization to fine-tune\n    centers, radii = direct_optimize(centers, radii)\n\n    return centers, radii\n\ndef resolve_overlaps(centers, radii):\n    \"\"\"Resolve overlaps between circles and with boundaries using a 'soft' approach\"\"\"\n    n = len(centers)\n    overlap_penalty_strength = 100.0  # Increased strength\n    wall_penalty_strength = 100.0 # Increased strength\n    dt = 0.01\n    dampening = 0.9\n\n    for _ in range(100): # Reduced iterations\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-10)\n                    force = overlap_penalty_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_penalty_strength * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_penalty_strength * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_penalty_strength * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_penalty_strength * (y - (1 - r))\n\n        # Update positions with dampening\n        forces -= dampening * centers # Damping force\n        centers += forces * dt\n\n        # Keep circles within bounds, but allow slight violations during the loop.\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], 0.001, 0.999)\n            centers[i, 1] = np.clip(centers[i, 1], 0.001, 0.999)\n\n    # Hard Clipping to resolve any remaining minor issues\n    for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef grow_radii(centers, radii):\n    \"\"\"Grow circle radii while maintaining valid packing using gradient-based method\"\"\"\n    n = len(centers)\n    growth_rate = 0.0005 # Reduced growth rate\n    repulsion_strength = 50 # Strength of repulsion used in the radius growth simulation.\n\n    for _ in range(200): # Reduced iterations\n        radius_updates = np.zeros(n)\n\n        # Calculate the gradient of available space for each circle\n        for i in range(n):\n            available_space = float('inf')\n\n            # Distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    available_space = min(available_space, dist)\n\n            # Distance to walls\n            available_space = min(available_space, centers[i][0] - 0, centers[i][1] - 0, 1 - centers[i][0], 1 - centers[i][1])\n            radius_updates[i] = available_space - radii[i] # Update is the difference\n\n        # Apply updates, but limit growth\n        for i in range(n):\n            radii[i] += min(growth_rate, radius_updates[i] * 0.1) # Limit growth based on remaining update.\n            radii[i] = max(0.01, radii[i]) # Enforce a minimum radius.\n\n        # Repulsion Step - move circles away from each other to accomodate growth\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-10)\n                    centers[i] += repulsion_strength * overlap * direction * growth_rate\n                    centers[j] -= repulsion_strength * overlap * direction * growth_rate\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef direct_optimize(centers, radii):\n    \"\"\"Use direct optimization to maximize the sum of radii with adjusted constraints\"\"\"\n    n = len(centers)\n\n    # Pack all parameters into a single vector for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n\n    # Unpack parameters from a single vector\n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n\n    # Objective function to maximize (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n\n    # Constraints: no overlaps between circles or with boundaries\n    def constraints():\n        cons = []\n\n        # No overlaps between circles (soft constraint)\n        for i in range(n):\n            for j in range(i+1, n):\n                def circle_constraint(params, i=i, j=j):\n                    centers, radii = unpack_params(params)\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    return dist - (radii[i] + radii[j]) + 0.001 # Allow slight overlap\n                cons.append({'type': 'ineq', 'fun': circle_constraint})\n\n        # Circles within boundaries (soft constraint)\n        for i in range(n):\n            def left_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 0] - radii[i] + 0.001 # Allow slight violation\n\n            def right_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 0] - radii[i] + 0.001 # Allow slight violation\n\n            def bottom_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 1] - radii[i] + 0.001 # Allow slight violation\n\n            def top_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 1] - radii[i] + 0.001 # Allow slight violation\n\n            cons.append({'type': 'ineq', 'fun': left_wall})\n            cons.append({'type': 'ineq', 'fun': right_wall})\n            cons.append({'type': 'ineq', 'fun': bottom_wall})\n            cons.append({'type': 'ineq', 'fun': top_wall})\n\n            # Minimum radius constraint\n            def min_radius(params, i=i):\n                _, radii = unpack_params(params)\n                return radii[i] - 0.01\n\n            cons.append({'type': 'ineq', 'fun': min_radius})\n\n        return cons\n\n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n\n    # Run optimization with SLSQP method\n    try:\n        result = minimize(\n            objective,\n            initial_params,\n            method='SLSQP',\n            constraints=constraints(),\n            options={'maxiter': 75, 'ftol': 1e-6, 'disp': False} # Reduced iterations\n        )\n\n        if result.success:\n            centers, radii = unpack_params(result.x)\n    except:\n        # If optimization fails, keep the original centers and radii\n        pass\n\n    # Final adjustment to ensure no overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    centers, radii = grow_radii(centers, radii)\n\n    return centers, radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d4717d76-0850-4b37-829c-78eb45d9f76b", "generation": 7, "timestamp": 1750811010.2409232, "iteration_found": 238, "metrics": {"validity": 1.0, "sum_radii": 2.27746112220679, "target_ratio": 0.8643116213308503, "combined_score": 0.8643116213308503, "eval_time": 41.45800280570984}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6305882989689358, "target_ratio": 0.998325730158989, "combined_score": 0.998325730158989, "eval_time": 47.83348512649536}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6306\n- target_ratio: 0.9983\n- combined_score: 0.9983\n- eval_time: 47.8335\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6086, target_ratio: 0.9900, combined_score: 0.9900, eval_time: 188.9534\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6182, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 198.3766\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 10.8197)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (48.4616)\n\n\n### Program 2 (Score: 40.7964)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6182), Performs well on target_ratio (0.9936), Performs well on combined_score (0.9936), Performs well on eval_time (198.3766)\n\n\n### Program 3 (Score: 10.9962)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and gradient-based radius adjustment\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4462), Performs well on target_ratio (0.9283), Performs well on combined_score (0.9283), Performs well on eval_time (49.6780)\n\n\n### Program 4 (Score: 13.9936)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6353), Performs well on target_ratio (1.0001), Performs well on combined_score (1.0001), Performs well on eval_time (64.3324)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 9.2236)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_hexagonal,\n        initialize_pattern_grid,\n        initialize_pattern_hybrid,\n        initialize_pattern_corner_biased,\n        initialize_pattern_edge_biased,  # New pattern\n        initialize_special_26,  # Specialized pattern for n=26\n    ]\n\n    for initialize_pattern in patterns:\n        # Initialize with current pattern\n        centers, radii = initialize_pattern(n)\n        \n        # Apply multi-stage optimization\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 0.105 * 2 + ring_radius + 0.004\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Fill remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = 0.08\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n                \n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.12 * (1 - dist_to_center)\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.06\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius + middle_radius + 0.004\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.09\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius + 2 * middle_radius + 0.006\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Edge circles\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    radii[4] = edge_radius\n    centers[5] = [0.5, 1 - edge_radius]\n    radii[5] = edge_radius\n    centers[6] = [edge_radius, 0.5]\n    radii[6] = edge_radius\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[7] = edge_radius\n\n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n\n    # Remaining circles in a grid-like pattern\n    count = 9\n    remaining = n - count\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = 0.8 / (grid_size + 1)\n    \n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.1 + (i + 1) * spacing\n                y = 0.1 + (j + 1) * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.09\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_edge_biased(n):\n    \"\"\"Initialize with circles along the edges of the square\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n    \n    # Center circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.13\n    \n    # Edge circles\n    count = 5\n    edge_radius = 0.1\n    \n    # Bottom edge\n    num_edge = 4\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n    # Top edge\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n        \n    # Left edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n        \n    # Right edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [1 - edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Fill remaining with circles in a grid pattern\n    while count < n:\n        grid_size = int(np.sqrt(n - count)) + 1\n        spacing = 0.6 / (grid_size + 1)\n        \n        for i in range(grid_size):\n            for j in range(grid_size):\n                if count < n:\n                    x = 0.2 + (i + 1) * spacing\n                    y = 0.2 + (j + 1) * spacing\n                    centers[count] = [x, y]\n                    radii[count] = 0.08\n                    count += 1\n\n    return centers, radii\n\ndef initialize_special_26(n):\n    \"\"\"\n    Initialize with a specialized pattern for n=26 based on known good arrangements\n    from mathematical literature on circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on research for n=26 circle packing in a square\n    # Central structure\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n    \n    # First ring - 6 circles\n    count = 1\n    ring1_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.001\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring1_radius\n        count += 1\n    \n    # Second ring - 12 circles\n    ring2_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # offset angle\n        dist = radii[0] + 2 * ring1_radius + 0.002\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring2_radius\n        count += 1\n    \n    # Corner circles - 4 circles\n    corner_radius = 0.102\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    \n    # Middle of edges - 3 circles\n    edge_radius = 0.095\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [1 - edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization of the circle packing\n    \"\"\"\n    # First resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Then grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Finally, use direct optimization to fine-tune\n    centers, radii = direct_optimize(centers, radii)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii):\n    \"\"\"Resolve overlaps between circles and with boundaries\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.8\n    \n    for _ in range(200):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-10)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef grow_radii(centers, radii):\n    \"\"\"Grow circle radii while maintaining valid packing\"\"\"\n    n = len(centers)\n    growth_rate = 0.001\n    \n    for _ in range(300):\n        # Calculate available space for each circle\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Available space is the minimum of distance to other circles and walls\n            available_space = min(min_dist_to_others, space_to_walls)\n            \n            # Grow radius if there's available space\n            if available_space > radii[i]:\n                radii[i] = min(radii[i] + growth_rate, radii[i] + (available_space - radii[i]) * 0.5)\n    \n    return centers, radii\n\ndef direct_optimize(centers, radii):\n    \"\"\"Use direct optimization to maximize the sum of radii\"\"\"\n    n = len(centers)\n    \n    # Pack all parameters into a single vector for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n    \n    # Unpack parameters from a single vector\n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n    \n    # Objective function to maximize (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n    \n    # Constraints: no overlaps between circles or with boundaries\n    def constraints():\n        cons = []\n        \n        # No overlaps between circles\n        for i in range(n):\n            for j in range(i+1, n):\n                def circle_constraint(params, i=i, j=j):\n                    centers, radii = unpack_params(params)\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    return dist - (radii[i] + radii[j])\n                cons.append({'type': 'ineq', 'fun': circle_constraint})\n        \n        # Circles within boundaries\n        for i in range(n):\n            def left_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 0] - radii[i]\n            \n            def right_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 0] - radii[i]\n            \n            def bottom_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 1] - radii[i]\n            \n            def top_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 1] - radii[i]\n            \n            cons.append({'type': 'ineq', 'fun': left_wall})\n            cons.append({'type': 'ineq', 'fun': right_wall})\n            cons.append({'type': 'ineq', 'fun': bottom_wall})\n            cons.append({'type': 'ineq', 'fun': top_wall})\n            \n            # Minimum radius constraint\n            def min_radius(params, i=i):\n                _, radii = unpack_params(params)\n                return radii[i] - 0.01\n            \n            cons.append({'type': 'ineq', 'fun': min_radius})\n        \n        return cons\n    \n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n    \n    # Run optimization with SLSQP method\n    try:\n        result = minimize(\n            objective,\n            initial_params,\n            method='SLSQP',\n            constraints=constraints(),\n            options={'maxiter': 100, 'ftol': 1e-6, 'disp': False}\n        )\n        \n        if result.success:\n            centers, radii = unpack_params(result.x)\n    except:\n        # If optimization fails, keep the original centers and radii\n        pass\n    \n    # Final adjustment to ensure no overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    centers, radii = grow_radii(centers, radii)\n    \n    return centers, radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation. Introduces a 'soft' overlap resolution and gradient-based optimization for radius adjustments.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_hexagonal,\n        initialize_pattern_grid,\n        initialize_pattern_hybrid,\n        initialize_pattern_corner_biased,\n        initialize_pattern_edge_biased,  # New pattern\n        initialize_special_26,  # Specialized pattern for n=26\n    ]\n\n    for initialize_pattern in patterns:\n        # Initialize with current pattern\n        centers, radii = initialize_pattern(n)\n\n        # Apply multi-stage optimization\n        centers, radii = optimize_packing(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.9  # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 0.105 * 1.9 + ring_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Fill remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = 0.08\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.11 * (1 - dist_to_center) + 0.04 # Adjusted radius scaling\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.06\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.09\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.9  # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.1\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    return centers, radii\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Edge circles\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    radii[4] = edge_radius\n    centers[5] = [0.5, 1 - edge_radius]\n    radii[5] = edge_radius\n    centers[6] = [edge_radius, 0.5]\n    radii[6] = edge_radius\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[7] = edge_radius\n\n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n\n    # Remaining circles in a grid-like pattern\n    count = 9\n    remaining = n - count\n    grid_size = int(np.sqrt(remaining)) + 1\n    spacing = 0.8 / (grid_size + 1)\n\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.1 + (i + 1) * spacing\n                y = 0.1 + (j + 1) * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.09\n                count += 1\n\n    return centers, radii\n\ndef initialize_pattern_edge_biased(n):\n    \"\"\"Initialize with circles along the edges of the square\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Center circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.13\n\n    # Edge circles\n    count = 5\n    edge_radius = 0.1\n\n    # Bottom edge\n    num_edge = 4\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n\n    # Top edge\n    for i in range(num_edge):\n        x = (i + 1) / (num_edge + 1)\n        centers[count] = [x, 1 - edge_radius]\n        radii[count] = edge_radius\n        count += 1\n\n    # Left edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n\n    # Right edge\n    for i in range(num_edge):\n        y = (i + 1) / (num_edge + 1)\n        centers[count] = [1 - edge_radius, y]\n        radii[count] = edge_radius\n        count += 1\n\n    # Fill remaining with circles in a grid pattern\n    while count < n:\n        grid_size = int(np.sqrt(n - count)) + 1\n        spacing = 0.6 / (grid_size + 1)\n\n        for i in range(grid_size):\n            for j in range(grid_size):\n                if count < n:\n                    x = 0.2 + (i + 1) * spacing\n                    y = 0.2 + (j + 1) * spacing\n                    centers[count] = [x, y]\n                    radii[count] = 0.08\n                    count += 1\n\n    return centers, radii\n\ndef initialize_special_26(n):\n    \"\"\"\n    Initialize with a specialized pattern for n=26 based on known good arrangements\n    from mathematical literature on circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on research for n=26 circle packing in a square\n    # Central structure\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # First ring - 6 circles\n    count = 1\n    ring1_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring1_radius\n        count += 1\n\n    # Second ring - 12 circles\n    ring2_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # offset angle\n        dist = radii[0] + 2 * ring1_radius * 1.9 # Reduced spacing\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring2_radius\n        count += 1\n\n    # Corner circles - 4 circles\n    corner_radius = 0.102\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Middle of edges - 3 circles\n    edge_radius = 0.095\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n    centers[count] = [1 - edge_radius, 0.5]\n    radii[count] = edge_radius\n    count += 1\n\n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization of the circle packing\n    \"\"\"\n    # First resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n\n    # Then grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n\n    # Finally, use direct optimization to fine-tune\n    centers, radii = direct_optimize(centers, radii)\n\n    return centers, radii\n\ndef resolve_overlaps(centers, radii):\n    \"\"\"Resolve overlaps between circles and with boundaries using a 'soft' approach\"\"\"\n    n = len(centers)\n    overlap_penalty_strength = 100.0  # Increased strength\n    wall_penalty_strength = 100.0 # Increased strength\n    dt = 0.01\n    dampening = 0.9\n\n    for _ in range(100): # Reduced iterations\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-10)\n                    force = overlap_penalty_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_penalty_strength * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_penalty_strength * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_penalty_strength * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_penalty_strength * (y - (1 - r))\n\n        # Update positions with dampening\n        forces -= dampening * centers # Damping force\n        centers += forces * dt\n\n        # Keep circles within bounds, but allow slight violations during the loop.\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], 0.001, 0.999)\n            centers[i, 1] = np.clip(centers[i, 1], 0.001, 0.999)\n\n    # Hard Clipping to resolve any remaining minor issues\n    for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef grow_radii(centers, radii):\n    \"\"\"Grow circle radii while maintaining valid packing using gradient-based method\"\"\"\n    n = len(centers)\n    growth_rate = 0.0005 # Reduced growth rate\n    repulsion_strength = 50 # Strength of repulsion used in the radius growth simulation.\n\n    for _ in range(200): # Reduced iterations\n        radius_updates = np.zeros(n)\n\n        # Calculate the gradient of available space for each circle\n        for i in range(n):\n            available_space = float('inf')\n\n            # Distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    available_space = min(available_space, dist)\n\n            # Distance to walls\n            available_space = min(available_space, centers[i][0] - 0, centers[i][1] - 0, 1 - centers[i][0], 1 - centers[i][1])\n            radius_updates[i] = available_space - radii[i] # Update is the difference\n\n        # Apply updates, but limit growth\n        for i in range(n):\n            radii[i] += min(growth_rate, radius_updates[i] * 0.1) # Limit growth based on remaining update.\n            radii[i] = max(0.01, radii[i]) # Enforce a minimum radius.\n\n        # Repulsion Step - move circles away from each other to accomodate growth\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-10)\n                    centers[i] += repulsion_strength * overlap * direction * growth_rate\n                    centers[j] -= repulsion_strength * overlap * direction * growth_rate\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef direct_optimize(centers, radii):\n    \"\"\"Use direct optimization to maximize the sum of radii with adjusted constraints\"\"\"\n    n = len(centers)\n\n    # Pack all parameters into a single vector for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n\n    # Unpack parameters from a single vector\n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n\n    # Objective function to maximize (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n\n    # Constraints: no overlaps between circles or with boundaries\n    def constraints():\n        cons = []\n\n        # No overlaps between circles (soft constraint)\n        for i in range(n):\n            for j in range(i+1, n):\n                def circle_constraint(params, i=i, j=j):\n                    centers, radii = unpack_params(params)\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    return dist - (radii[i] + radii[j]) + 0.001 # Allow slight overlap\n                cons.append({'type': 'ineq', 'fun': circle_constraint})\n\n        # Circles within boundaries (soft constraint)\n        for i in range(n):\n            def left_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 0] - radii[i] + 0.001 # Allow slight violation\n\n            def right_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 0] - radii[i] + 0.001 # Allow slight violation\n\n            def bottom_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return centers[i, 1] - radii[i] + 0.001 # Allow slight violation\n\n            def top_wall(params, i=i):\n                centers, radii = unpack_params(params)\n                return 1 - centers[i, 1] - radii[i] + 0.001 # Allow slight violation\n\n            cons.append({'type': 'ineq', 'fun': left_wall})\n            cons.append({'type': 'ineq', 'fun': right_wall})\n            cons.append({'type': 'ineq', 'fun': bottom_wall})\n            cons.append({'type': 'ineq', 'fun': top_wall})\n\n            # Minimum radius constraint\n            def min_radius(params, i=i):\n                _, radii = unpack_params(params)\n                return radii[i] - 0.01\n\n            cons.append({'type': 'ineq', 'fun': min_radius})\n\n        return cons\n\n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n\n    # Run optimization with SLSQP method\n    try:\n        result = minimize(\n            objective,\n            initial_params,\n            method='SLSQP',\n            constraints=constraints(),\n            options={'maxiter': 75, 'ftol': 1e-6, 'disp': False} # Reduced iterations\n        )\n\n        if result.success:\n            centers, radii = unpack_params(result.x)\n    except:\n        # If optimization fails, keep the original centers and radii\n        pass\n\n    # Final adjustment to ensure no overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    centers, radii = grow_radii(centers, radii)\n\n    return centers, radii\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}