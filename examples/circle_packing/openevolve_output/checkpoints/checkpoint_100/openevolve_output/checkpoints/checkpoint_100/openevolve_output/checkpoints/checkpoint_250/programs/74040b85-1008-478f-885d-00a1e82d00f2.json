{"id": "74040b85-1008-478f-885d-00a1e82d00f2", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a refined penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation. Includes improved physics sim and radius optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Known optimal patterns for 26 circles\n    patterns = [\n        initialize_specialized_pattern1,\n        initialize_specialized_pattern2,\n        initialize_specialized_pattern3,\n        initialize_corner_edge_pattern,\n        initialize_hybrid_pattern,\n        initialize_pattern_hexagonal\n    ]\n    \n    for pattern_func in patterns:\n        # Initialize with specialized pattern\n        centers, radii = pattern_func(n)\n        \n        # Multi-stage optimization\n        centers, radii = physics_based_optimization(centers, radii, iterations=300)  # Increased iterations for speed\n        centers, radii = gradient_based_optimization(centers, radii, maxiter=75) # Reduced iterations for speed\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_specialized_pattern1(n):\n    \"\"\"Initialize with a specialized pattern based on literature for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.085\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n    \n    return centers, radii\n\ndef initialize_specialized_pattern2(n):\n    \"\"\"Initialize with a specialized pattern with emphasis on edge utilization\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Four edge circles on each side\n    edge_radius = 0.1\n    edge_count = 0\n    for i in range(3):\n        pos = 0.25 + 0.25*i\n        centers[4+edge_count] = [pos, edge_radius]\n        centers[5+edge_count] = [pos, 1-edge_radius]\n        centers[6+edge_count] = [edge_radius, pos]\n        centers[7+edge_count] = [1-edge_radius, pos]\n        edge_count += 4\n    \n    # Center circle\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.12\n    \n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[16] + inner_radius\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17+i] = inner_radius\n    \n    # Fill remaining circles\n    for i in range(4, 16):\n        radii[i] = edge_radius\n    \n    # Adjust radii to be variable\n    radii[4:16] = np.linspace(0.09, 0.1, 12)\n    radii[17:23] = np.linspace(0.09, 0.095, 6)\n    \n    return centers, radii\n\ndef initialize_specialized_pattern3(n):\n    \"\"\"Initialize with a pattern optimized for equal circles\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on mathematical optimization for equal circles\n    radius = 0.102  # Starting with equal circles\n    \n    # Create a 5x5 grid with some adjustments\n    count = 0\n    for i in range(5):\n        for j in range(5):\n            if count < n-1:\n                x = 0.1 + 0.2*i\n                y = 0.1 + 0.2*j\n                \n                # Add some variation to break symmetry\n                x += np.random.uniform(-0.01, 0.01)\n                y += np.random.uniform(-0.01, 0.01)\n                \n                centers[count] = [x, y]\n                radii[count] = radius\n                count += 1\n    \n    # Add one more circle in a good position\n    centers[n-1] = [0.5, 0.5]\n    radii[n-1] = radius\n    \n    return centers, radii\n\ndef initialize_corner_edge_pattern(n):\n    \"\"\"Initialize with emphasis on corners and edges\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles\n    edge_radius = 0.095\n    edge_positions = [0.25, 0.5, 0.75]\n    count = 4\n    \n    # Bottom edge\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Top edge\n    for pos in edge_positions:\n        centers[count] = [pos, 1-edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Left edge\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Right edge\n    for pos in edge_positions:\n        centers[count] = [1-edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Interior circles in a grid\n    interior_radius = 0.085\n    interior_positions = [0.33, 0.5, 0.67]\n    for x in interior_positions:\n        for y in interior_positions:\n            if count < n:\n                centers[count] = [x, y]\n                radii[count] = interior_radius\n                count += 1\n    \n    return centers, radii\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"Initialize with a hybrid pattern combining multiple approaches\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (8 circles)\n    ring1_radius = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.11\n    centers[9] = [corner_radius, corner_radius]\n    centers[10] = [1-corner_radius, corner_radius]\n    centers[11] = [corner_radius, 1-corner_radius]\n    centers[12] = [1-corner_radius, 1-corner_radius]\n    radii[9:13] = corner_radius\n    \n    # Edge circles (8 circles)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n    count = 13\n    \n    # Bottom and top edges\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        centers[count+1] = [pos, 1-edge_radius]\n        count += 2\n    \n    # Left and right edges\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        centers[count+1] = [1-edge_radius, pos]\n        count += 2\n    \n    # Fill remaining circles with a triangular pattern\n    remaining = n - count\n    if remaining > 0:\n        # Second ring (remaining circles)\n        ring2_radius = 0.085\n        for i in range(remaining):\n            angle = 2 * np.pi * i / remaining + np.pi/8  # Offset\n            dist = radii[0] + 2*ring1_radius + ring2_radius\n            centers[count+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[count+i] = ring2_radius\n    \n    # Set edge circles\n    for i in range(13, 21):\n        radii[i] = edge_radius\n    \n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Larger center circle\n\n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n\n    # Second hexagonal ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n\n    # Edge circles (3 circles)\n    edge_radius = 0.085\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n\n    return centers, radii\n\ndef physics_based_optimization(centers, radii, iterations=300):\n    \"\"\"Optimize circle positions using physics-based approach\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            dist_vec = centers[i] - centers\n            dist_vec[i] = 0  # Avoid self-interaction\n            dist = np.linalg.norm(dist_vec, axis=1)\n            mask = (dist > 0) & (dist < radii[i] + radii)\n            \n            if np.any(mask):\n                directions = dist_vec[mask] / dist[mask, np.newaxis]\n                overlaps = (radii[i] + radii[mask] - dist[mask])\n                force_magnitudes = repulsion_strength * overlaps\n                forces[i] += np.sum(directions * force_magnitudes[:, np.newaxis], axis=0)\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n        \n        # Optimize radii periodically\n        if iter % 50 == 0:\n            centers, radii = optimize_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    # Calculate available space for each circle\n    for _ in range(3):\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            distances = np.linalg.norm(centers - centers[i], axis=1)\n            distances[i] = float('inf')  # Exclude self\n            min_dist_to_others = np.min(distances - radii)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = min(radii[i] * 1.05, 0.95 * available_space)  # Conservative growth, limit to 1.05x original\n    \n    return centers, radii\n\ndef gradient_based_optimization(centers, radii, maxiter=100):\n    \"\"\"Fine-tune the packing using gradient-based optimization\"\"\"\n    n = len(centers)\n    \n    # Define the objective function (negative sum of radii to maximize)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        return -np.sum(r)\n    \n    # Define constraints\n    constraints = []\n    \n    # No overlap constraint\n    for i in range(n):\n        for j in range(i+1, n):\n            def no_overlap(x, i=i, j=j):\n                c = x[:2*n].reshape(n, 2)\n                r = x[2*n:]\n                dist = np.linalg.norm(c[i] - c[j])\n                return dist - (r[i] + r[j])\n            \n            constraints.append({'type': 'ineq', 'fun': no_overlap})\n    \n    # Boundary constraints\n    for i in range(n):\n        def left_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 0] - r[i]\n        \n        def right_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 0] - r[i]\n        \n        def bottom_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 1] - r[i]\n        \n        def top_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 1] - r[i]\n        \n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n    \n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(x, i=i):\n            r = x[2*n:]\n            return r[i] - 0.01  # Minimum radius\n        \n        constraints.append({'type': 'ineq', 'fun': min_radius})\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    bounds = []\n    for i in range(n):\n        bounds.extend([(0, 1), (0, 1)])  # x, y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.2))  # radius bounds\n    \n    # Run optimization\n    try:\n        result = minimize(\n            objective,\n            x0,\n            method='SLSQP',\n            bounds=bounds,\n            constraints=constraints,\n            options={'maxiter': maxiter, 'disp': False}\n        )\n        \n        # Extract results\n        optimized_centers = result.x[:2*n].reshape(n, 2)\n        optimized_radii = result.x[2*n:]\n        \n        # Ensure no overlaps and bounds are respected\n        optimized_centers, optimized_radii = fix_violations(optimized_centers, optimized_radii)\n        \n        return optimized_centers, optimized_radii\n    except:\n        # If optimization fails, return original\n        return centers, radii\n\ndef fix_violations(centers, radii):\n    \"\"\"Fix any constraint violations\"\"\"\n    n = len(centers)\n    \n    # Fix boundary violations\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Fix overlaps by iteratively shrinking radii\n    for _ in range(5):  # Reduced iterations for speed\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    # Shrink both radii proportionally\n                    radii[i] = max(0.01, radii[i] - overlap * 0.5 * radii[i] / min_dist)\n                    radii[j] = max(0.01, radii[j] - overlap * 0.5 * radii[j] / min_dist)\n                    overlap_found = True\n        \n        if not overlap_found:\n            break\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1fc3fd9f-789f-4449-ba72-d728088cc4d6", "generation": 9, "timestamp": 1750810473.2482562, "iteration_found": 233, "metrics": {"validity": 1.0, "sum_radii": 2.6308312403482437, "target_ratio": 0.998417928025899, "combined_score": 0.998417928025899, "eval_time": 33.75142765045166}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6275651451007245, "target_ratio": 0.9971784231881308, "combined_score": 0.9971784231881308, "eval_time": 51.00486207008362}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6276\n- target_ratio: 0.9972\n- combined_score: 0.9972\n- eval_time: 51.0049\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: sum_radii, target_ratio, combined_score. Consider continuing with similar changes.\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6086, target_ratio: 0.9900, combined_score: 0.9900, eval_time: 188.9534\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6182, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 198.3766\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 10.8197)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (48.4616)\n\n\n### Program 2 (Score: 40.7964)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6182), Performs well on target_ratio (0.9936), Performs well on combined_score (0.9936), Performs well on eval_time (198.3766)\n\n\n### Program 3 (Score: 5.8715)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using gradient-based optimization, adaptive learning rates, and a refined penalty function. This version incorporates a more efficient overlap resolution and a smarter initialization strategy focused on placing larger circles in the center.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.5692), Performs well on target_ratio (0.2160), Performs well on combined_score (0.2160), Performs well on eval_time (27.3565)\n\n\n### Program 4 (Score: 5.3708)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.5799), Performs well on target_ratio (0.2201), Performs well on combined_score (0.2201), Performs well on eval_time (24.8340)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 5.3515)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a refined penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Known optimal patterns for 26 circles\n    patterns = [\n        initialize_specialized_pattern1,\n        initialize_specialized_pattern2,\n        initialize_specialized_pattern3,\n        initialize_corner_edge_pattern,\n        initialize_hybrid_pattern,\n        initialize_pattern_hexagonal\n    ]\n    \n    for pattern_func in patterns:\n        # Initialize with specialized pattern\n        centers, radii = pattern_func(n)\n        \n        # Multi-stage optimization\n        centers, radii = physics_based_optimization(centers, radii, iterations=200)  # Reduced iterations for speed\n        centers, radii = gradient_based_optimization(centers, radii, maxiter=50) # Reduced iterations for speed\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_specialized_pattern1(n):\n    \"\"\"Initialize with a specialized pattern based on literature for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.085\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n    \n    return centers, radii\n\ndef initialize_specialized_pattern2(n):\n    \"\"\"Initialize with a specialized pattern with emphasis on edge utilization\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Four edge circles on each side\n    edge_radius = 0.1\n    edge_count = 0\n    for i in range(3):\n        pos = 0.25 + 0.25*i\n        centers[4+edge_count] = [pos, edge_radius]\n        centers[5+edge_count] = [pos, 1-edge_radius]\n        centers[6+edge_count] = [edge_radius, pos]\n        centers[7+edge_count] = [1-edge_radius, pos]\n        edge_count += 4\n    \n    # Center circle\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.12\n    \n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[16] + inner_radius\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17+i] = inner_radius\n    \n    # Fill remaining circles\n    for i in range(4, 16):\n        radii[i] = edge_radius\n    \n    # Adjust radii to be variable\n    radii[4:16] = np.linspace(0.09, 0.1, 12)\n    radii[17:23] = np.linspace(0.09, 0.095, 6)\n    \n    return centers, radii\n\ndef initialize_specialized_pattern3(n):\n    \"\"\"Initialize with a pattern optimized for equal circles\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on mathematical optimization for equal circles\n    radius = 0.102  # Starting with equal circles\n    \n    # Create a 5x5 grid with some adjustments\n    count = 0\n    for i in range(5):\n        for j in range(5):\n            if count < n-1:\n                x = 0.1 + 0.2*i\n                y = 0.1 + 0.2*j\n                \n                # Add some variation to break symmetry\n                x += np.random.uniform(-0.01, 0.01)\n                y += np.random.uniform(-0.01, 0.01)\n                \n                centers[count] = [x, y]\n                radii[count] = radius\n                count += 1\n    \n    # Add one more circle in a good position\n    centers[n-1] = [0.5, 0.5]\n    radii[n-1] = radius\n    \n    return centers, radii\n\ndef initialize_corner_edge_pattern(n):\n    \"\"\"Initialize with emphasis on corners and edges\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles\n    edge_radius = 0.095\n    edge_positions = [0.25, 0.5, 0.75]\n    count = 4\n    \n    # Bottom edge\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Top edge\n    for pos in edge_positions:\n        centers[count] = [pos, 1-edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Left edge\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Right edge\n    for pos in edge_positions:\n        centers[count] = [1-edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Interior circles in a grid\n    interior_radius = 0.085\n    interior_positions = [0.33, 0.5, 0.67]\n    for x in interior_positions:\n        for y in interior_positions:\n            if count < n:\n                centers[count] = [x, y]\n                radii[count] = interior_radius\n                count += 1\n    \n    return centers, radii\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"Initialize with a hybrid pattern combining multiple approaches\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (8 circles)\n    ring1_radius = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.11\n    centers[9] = [corner_radius, corner_radius]\n    centers[10] = [1-corner_radius, corner_radius]\n    centers[11] = [corner_radius, 1-corner_radius]\n    centers[12] = [1-corner_radius, 1-corner_radius]\n    radii[9:13] = corner_radius\n    \n    # Edge circles (8 circles)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n    count = 13\n    \n    # Bottom and top edges\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        centers[count+1] = [pos, 1-edge_radius]\n        count += 2\n    \n    # Left and right edges\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        centers[count+1] = [1-edge_radius, pos]\n        count += 2\n    \n    # Fill remaining circles with a triangular pattern\n    remaining = n - count\n    if remaining > 0:\n        # Second ring (remaining circles)\n        ring2_radius = 0.085\n        for i in range(remaining):\n            angle = 2 * np.pi * i / remaining + np.pi/8  # Offset\n            dist = radii[0] + 2*ring1_radius + ring2_radius\n            centers[count+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[count+i] = ring2_radius\n    \n    # Set edge circles\n    for i in range(13, 21):\n        radii[i] = edge_radius\n    \n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Larger center circle\n\n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n\n    # Second hexagonal ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n\n    # Edge circles (3 circles)\n    edge_radius = 0.085\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n\n    return centers, radii\n\ndef physics_based_optimization(centers, radii, iterations=300):\n    \"\"\"Optimize circle positions using physics-based approach\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            dist_vec = centers[i] - centers\n            dist_vec[i] = 0  # Avoid self-interaction\n            dist = np.linalg.norm(dist_vec, axis=1)\n            mask = (dist > 0) & (dist < radii[i] + radii)\n            \n            if np.any(mask):\n                directions = dist_vec[mask] / dist[mask, np.newaxis]\n                overlaps = (radii[i] + radii[mask] - dist[mask])\n                force_magnitudes = repulsion_strength * overlaps\n                forces[i] += np.sum(directions * force_magnitudes[:, np.newaxis], axis=0)\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n        \n        # Optimize radii periodically\n        if iter % 50 == 0:\n            centers, radii = optimize_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    # Calculate available space for each circle\n    for _ in range(3):\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            distances = np.linalg.norm(centers - centers[i], axis=1)\n            distances[i] = float('inf')  # Exclude self\n            min_dist_to_others = np.min(distances - radii)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.95 * available_space  # Conservative growth\n    \n    return centers, radii\n\ndef gradient_based_optimization(centers, radii, maxiter=100):\n    \"\"\"Fine-tune the packing using gradient-based optimization\"\"\"\n    n = len(centers)\n    \n    # Define the objective function (negative sum of radii to maximize)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        return -np.sum(r)\n    \n    # Define constraints\n    constraints = []\n    \n    # No overlap constraint\n    for i in range(n):\n        for j in range(i+1, n):\n            def no_overlap(x, i=i, j=j):\n                c = x[:2*n].reshape(n, 2)\n                r = x[2*n:]\n                dist = np.linalg.norm(c[i] - c[j])\n                return dist - (r[i] + r[j])\n            \n            constraints.append({'type': 'ineq', 'fun': no_overlap})\n    \n    # Boundary constraints\n    for i in range(n):\n        def left_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 0] - r[i]\n        \n        def right_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 0] - r[i]\n        \n        def bottom_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 1] - r[i]\n        \n        def top_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 1] - r[i]\n        \n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n    \n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(x, i=i):\n            r = x[2*n:]\n            return r[i] - 0.01  # Minimum radius\n        \n        constraints.append({'type': 'ineq', 'fun': min_radius})\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    bounds = []\n    for i in range(n):\n        bounds.extend([(0, 1), (0, 1)])  # x, y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.2))  # radius bounds\n    \n    # Run optimization\n    try:\n        result = minimize(\n            objective,\n            x0,\n            method='SLSQP',\n            bounds=bounds,\n            constraints=constraints,\n            options={'maxiter': maxiter, 'disp': False}\n        )\n        \n        # Extract results\n        optimized_centers = result.x[:2*n].reshape(n, 2)\n        optimized_radii = result.x[2*n:]\n        \n        # Ensure no overlaps and bounds are respected\n        optimized_centers, optimized_radii = fix_violations(optimized_centers, optimized_radii)\n        \n        return optimized_centers, optimized_radii\n    except:\n        # If optimization fails, return original\n        return centers, radii\n\ndef fix_violations(centers, radii):\n    \"\"\"Fix any constraint violations\"\"\"\n    n = len(centers)\n    \n    # Fix boundary violations\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Fix overlaps by iteratively shrinking radii\n    for _ in range(5):  # Reduced iterations for speed\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    # Shrink both radii proportionally\n                    radii[i] = max(0.01, radii[i] - overlap * 0.5 * radii[i] / min_dist)\n                    radii[j] = max(0.01, radii[j] - overlap * 0.5 * radii[j] / min_dist)\n                    overlap_found = True\n        \n        if not overlap_found:\n            break\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a refined penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy. Includes optimized initial configurations and a more efficient penalty calculation. Includes improved physics sim and radius optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Known optimal patterns for 26 circles\n    patterns = [\n        initialize_specialized_pattern1,\n        initialize_specialized_pattern2,\n        initialize_specialized_pattern3,\n        initialize_corner_edge_pattern,\n        initialize_hybrid_pattern,\n        initialize_pattern_hexagonal\n    ]\n    \n    for pattern_func in patterns:\n        # Initialize with specialized pattern\n        centers, radii = pattern_func(n)\n        \n        # Multi-stage optimization\n        centers, radii = physics_based_optimization(centers, radii, iterations=300)  # Increased iterations for speed\n        centers, radii = gradient_based_optimization(centers, radii, maxiter=75) # Reduced iterations for speed\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_specialized_pattern1(n):\n    \"\"\"Initialize with a specialized pattern based on literature for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.085\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.08\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n    \n    return centers, radii\n\ndef initialize_specialized_pattern2(n):\n    \"\"\"Initialize with a specialized pattern with emphasis on edge utilization\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Four edge circles on each side\n    edge_radius = 0.1\n    edge_count = 0\n    for i in range(3):\n        pos = 0.25 + 0.25*i\n        centers[4+edge_count] = [pos, edge_radius]\n        centers[5+edge_count] = [pos, 1-edge_radius]\n        centers[6+edge_count] = [edge_radius, pos]\n        centers[7+edge_count] = [1-edge_radius, pos]\n        edge_count += 4\n    \n    # Center circle\n    centers[16] = [0.5, 0.5]\n    radii[16] = 0.12\n    \n    # Inner ring (6 circles)\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[16] + inner_radius\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17+i] = inner_radius\n    \n    # Fill remaining circles\n    for i in range(4, 16):\n        radii[i] = edge_radius\n    \n    # Adjust radii to be variable\n    radii[4:16] = np.linspace(0.09, 0.1, 12)\n    radii[17:23] = np.linspace(0.09, 0.095, 6)\n    \n    return centers, radii\n\ndef initialize_specialized_pattern3(n):\n    \"\"\"Initialize with a pattern optimized for equal circles\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on mathematical optimization for equal circles\n    radius = 0.102  # Starting with equal circles\n    \n    # Create a 5x5 grid with some adjustments\n    count = 0\n    for i in range(5):\n        for j in range(5):\n            if count < n-1:\n                x = 0.1 + 0.2*i\n                y = 0.1 + 0.2*j\n                \n                # Add some variation to break symmetry\n                x += np.random.uniform(-0.01, 0.01)\n                y += np.random.uniform(-0.01, 0.01)\n                \n                centers[count] = [x, y]\n                radii[count] = radius\n                count += 1\n    \n    # Add one more circle in a good position\n    centers[n-1] = [0.5, 0.5]\n    radii[n-1] = radius\n    \n    return centers, radii\n\ndef initialize_corner_edge_pattern(n):\n    \"\"\"Initialize with emphasis on corners and edges\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Four corner circles\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1-corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1-corner_radius]\n    centers[3] = [1-corner_radius, 1-corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles\n    edge_radius = 0.095\n    edge_positions = [0.25, 0.5, 0.75]\n    count = 4\n    \n    # Bottom edge\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Top edge\n    for pos in edge_positions:\n        centers[count] = [pos, 1-edge_radius]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Left edge\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Right edge\n    for pos in edge_positions:\n        centers[count] = [1-edge_radius, pos]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Interior circles in a grid\n    interior_radius = 0.085\n    interior_positions = [0.33, 0.5, 0.67]\n    for x in interior_positions:\n        for y in interior_positions:\n            if count < n:\n                centers[count] = [x, y]\n                radii[count] = interior_radius\n                count += 1\n    \n    return centers, radii\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"Initialize with a hybrid pattern combining multiple approaches\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # First ring (8 circles)\n    ring1_radius = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.11\n    centers[9] = [corner_radius, corner_radius]\n    centers[10] = [1-corner_radius, corner_radius]\n    centers[11] = [corner_radius, 1-corner_radius]\n    centers[12] = [1-corner_radius, 1-corner_radius]\n    radii[9:13] = corner_radius\n    \n    # Edge circles (8 circles)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n    count = 13\n    \n    # Bottom and top edges\n    for pos in edge_positions:\n        centers[count] = [pos, edge_radius]\n        centers[count+1] = [pos, 1-edge_radius]\n        count += 2\n    \n    # Left and right edges\n    for pos in edge_positions:\n        centers[count] = [edge_radius, pos]\n        centers[count+1] = [1-edge_radius, pos]\n        count += 2\n    \n    # Fill remaining circles with a triangular pattern\n    remaining = n - count\n    if remaining > 0:\n        # Second ring (remaining circles)\n        ring2_radius = 0.085\n        for i in range(remaining):\n            angle = 2 * np.pi * i / remaining + np.pi/8  # Offset\n            dist = radii[0] + 2*ring1_radius + ring2_radius\n            centers[count+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[count+i] = ring2_radius\n    \n    # Set edge circles\n    for i in range(13, 21):\n        radii[i] = edge_radius\n    \n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125  # Larger center circle\n\n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n\n    # Second hexagonal ring (12 circles)\n    ring2_radius = 0.09\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset to stagger\n        dist = radii[0] + 2*ring1_radius + ring2_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[19] = [corner_radius, corner_radius]\n    centers[20] = [1-corner_radius, corner_radius]\n    centers[21] = [corner_radius, 1-corner_radius]\n    centers[22] = [1-corner_radius, 1-corner_radius]\n    radii[19:23] = corner_radius\n\n    # Edge circles (3 circles)\n    edge_radius = 0.085\n    centers[23] = [0.5, edge_radius]\n    centers[24] = [edge_radius, 0.5]\n    centers[25] = [0.5, 1-edge_radius]\n    radii[23:26] = edge_radius\n\n    return centers, radii\n\ndef physics_based_optimization(centers, radii, iterations=300):\n    \"\"\"Optimize circle positions using physics-based approach\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.9\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion (vectorized for speed)\n        for i in range(n):\n            dist_vec = centers[i] - centers\n            dist_vec[i] = 0  # Avoid self-interaction\n            dist = np.linalg.norm(dist_vec, axis=1)\n            mask = (dist > 0) & (dist < radii[i] + radii)\n            \n            if np.any(mask):\n                directions = dist_vec[mask] / dist[mask, np.newaxis]\n                overlaps = (radii[i] + radii[mask] - dist[mask])\n                force_magnitudes = repulsion_strength * overlaps\n                forces[i] += np.sum(directions * force_magnitudes[:, np.newaxis], axis=0)\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n        \n        # Optimize radii periodically\n        if iter % 50 == 0:\n            centers, radii = optimize_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n    \n    # Calculate available space for each circle\n    for _ in range(3):\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            distances = np.linalg.norm(centers - centers[i], axis=1)\n            distances[i] = float('inf')  # Exclude self\n            min_dist_to_others = np.min(distances - radii)\n            \n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = min(radii[i] * 1.05, 0.95 * available_space)  # Conservative growth, limit to 1.05x original\n    \n    return centers, radii\n\ndef gradient_based_optimization(centers, radii, maxiter=100):\n    \"\"\"Fine-tune the packing using gradient-based optimization\"\"\"\n    n = len(centers)\n    \n    # Define the objective function (negative sum of radii to maximize)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        return -np.sum(r)\n    \n    # Define constraints\n    constraints = []\n    \n    # No overlap constraint\n    for i in range(n):\n        for j in range(i+1, n):\n            def no_overlap(x, i=i, j=j):\n                c = x[:2*n].reshape(n, 2)\n                r = x[2*n:]\n                dist = np.linalg.norm(c[i] - c[j])\n                return dist - (r[i] + r[j])\n            \n            constraints.append({'type': 'ineq', 'fun': no_overlap})\n    \n    # Boundary constraints\n    for i in range(n):\n        def left_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 0] - r[i]\n        \n        def right_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 0] - r[i]\n        \n        def bottom_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return c[i, 1] - r[i]\n        \n        def top_bound(x, i=i):\n            c = x[:2*n].reshape(n, 2)\n            r = x[2*n:]\n            return 1 - c[i, 1] - r[i]\n        \n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n    \n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(x, i=i):\n            r = x[2*n:]\n            return r[i] - 0.01  # Minimum radius\n        \n        constraints.append({'type': 'ineq', 'fun': min_radius})\n    \n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n    \n    # Bounds\n    bounds = []\n    for i in range(n):\n        bounds.extend([(0, 1), (0, 1)])  # x, y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.2))  # radius bounds\n    \n    # Run optimization\n    try:\n        result = minimize(\n            objective,\n            x0,\n            method='SLSQP',\n            bounds=bounds,\n            constraints=constraints,\n            options={'maxiter': maxiter, 'disp': False}\n        )\n        \n        # Extract results\n        optimized_centers = result.x[:2*n].reshape(n, 2)\n        optimized_radii = result.x[2*n:]\n        \n        # Ensure no overlaps and bounds are respected\n        optimized_centers, optimized_radii = fix_violations(optimized_centers, optimized_radii)\n        \n        return optimized_centers, optimized_radii\n    except:\n        # If optimization fails, return original\n        return centers, radii\n\ndef fix_violations(centers, radii):\n    \"\"\"Fix any constraint violations\"\"\"\n    n = len(centers)\n    \n    # Fix boundary violations\n    for i in range(n):\n        centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n        centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Fix overlaps by iteratively shrinking radii\n    for _ in range(5):  # Reduced iterations for speed\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    # Shrink both radii proportionally\n                    radii[i] = max(0.01, radii[i] - overlap * 0.5 * radii[i] / min_dist)\n                    radii[j] = max(0.01, radii[j] - overlap * 0.5 * radii[j] / min_dist)\n                    overlap_found = True\n        \n        if not overlap_found:\n            break\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}