{"id": "5818407d-c7ea-4c72-8005-76b01818d447", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using mathematical insights and specialized optimization techniques to maximize the sum of radii toward the target of 2.645.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Start with known promising patterns - ordered by expected performance\n    patterns = [\n        initialize_specialized_pattern,\n        initialize_asymmetric_pattern,\n        initialize_hybrid_pattern,\n        initialize_hexagonal_pattern\n    ]\n    \n    start_time = time.time()\n    max_time = 170  # Maximum time in seconds (reduced to ensure completion)\n\n    for pattern_idx, pattern_func in enumerate(patterns):\n        if time.time() - start_time > max_time:\n            break\n            \n        # Initialize with pattern\n        centers, radii = pattern_func(n)\n        \n        # Different optimization strategies based on pattern\n        penalty_factors = [800, 1200] if pattern_idx < 2 else [500, 1000]\n        max_iters_list = [150, 250] if pattern_idx < 2 else [100, 200]\n        \n        for penalty_factor in penalty_factors:\n            for max_iters in max_iters_list:\n                if time.time() - start_time > max_time:\n                    break\n                    \n                try:\n                    # First stage - position optimization with fixed radii\n                    centers_opt = optimize_positions(\n                        centers.copy(), radii.copy(),\n                        penalty_factor=penalty_factor,\n                        max_iterations=max_iters\n                    )\n                    \n                    # Second stage - full optimization of positions and radii\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers_opt, radii.copy(), \n                        penalty_factor=penalty_factor,\n                        max_iterations=max_iters\n                    )\n                    \n                    # Third stage - fine-tuning with higher precision\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers_opt, radii_opt,\n                        penalty_factor=penalty_factor*1.5,\n                        max_iterations=max_iters//2,\n                        ftol=1e-8\n                    )\n                    \n                    # Apply post-processing to ensure validity and maximize radii\n                    centers_opt, radii_opt = post_process(centers_opt, radii_opt)\n                    \n                    # Final radii maximization\n                    radii_opt = maximize_radii(centers_opt, radii_opt)\n                    \n                    sum_radii = np.sum(radii_opt)\n                    if sum_radii > best_sum:\n                        best_sum = sum_radii\n                        best_centers = centers_opt.copy()\n                        best_radii = radii_opt.copy()\n                except Exception:\n                    continue\n\n    # If we found a valid solution\n    if best_centers is not None:\n        return best_centers, best_radii, best_sum\n    \n    # Fallback to a simple pattern if all optimizations failed\n    centers, radii = initialize_hexagonal_pattern(n)\n    return centers, radii, np.sum(radii)\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be efficient for circle packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be optimized later\n    r = 0.09\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n    \n    # First hexagonal ring (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + r + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = r\n    \n    # Second ring (12 circles)\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2*r + r + 0.002\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = r\n    \n    # Corner circles (4 circles)\n    corner_r = 0.11\n    centers[19] = [corner_r, corner_r]\n    centers[20] = [1-corner_r, corner_r]\n    centers[21] = [corner_r, 1-corner_r]\n    centers[22] = [1-corner_r, 1-corner_r]\n    radii[19:23] = corner_r\n    \n    # Edge circles (3 circles)\n    edge_r = 0.095\n    centers[23] = [0.5, edge_r]\n    centers[24] = [edge_r, 0.5]\n    centers[25] = [1-edge_r, 0.5]\n    radii[23:26] = edge_r\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern that combines corner optimization with inner rings.\n    This pattern is inspired by the best known arrangements for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4 larger circles)\n    corner_r = 0.12\n    centers[0] = [corner_r, corner_r]\n    centers[1] = [1-corner_r, corner_r]\n    centers[2] = [corner_r, 1-corner_r]\n    centers[3] = [1-corner_r, 1-corner_r]\n    radii[0:4] = corner_r\n    \n    # Edge circles (4 medium circles)\n    edge_r = 0.105\n    centers[4] = [0.5, edge_r]\n    centers[5] = [0.5, 1-edge_r]\n    centers[6] = [edge_r, 0.5]\n    centers[7] = [1-edge_r, 0.5]\n    radii[4:8] = edge_r\n    \n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.13\n    \n    # Inner ring (8 circles)\n    inner_r = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Additional circles in between\n    mid_r = 0.08\n    centers[17] = [0.25, 0.25]\n    centers[18] = [0.75, 0.25]\n    centers[19] = [0.25, 0.75]\n    centers[20] = [0.75, 0.75]\n    \n    centers[21] = [0.25, 0.5]\n    centers[22] = [0.75, 0.5]\n    centers[23] = [0.5, 0.25]\n    centers[24] = [0.5, 0.75]\n    \n    # One more in a strategic position\n    centers[25] = [0.35, 0.35]\n    \n    radii[17:26] = mid_r\n    \n    return centers, radii\n\n\ndef initialize_specialized_pattern(n):\n    \"\"\"\n    Initialize with a specialized pattern based on mathematical research for n=26.\n    This pattern uses variable-sized circles with strategic placement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with 5 key circles - one in center and 4 near corners\n    centers[0] = [0.5, 0.5]  # Center\n    radii[0] = 0.138\n    \n    # Near-corner circles (slightly inset from corners)\n    corner_r = 0.127\n    offset = 0.135\n    centers[1] = [offset, offset]\n    centers[2] = [1-offset, offset]\n    centers[3] = [offset, 1-offset]\n    centers[4] = [1-offset, 1-offset]\n    radii[1:5] = corner_r\n    \n    # Edge circles\n    edge_r = 0.112\n    centers[5] = [0.5, edge_r]\n    centers[6] = [0.5, 1-edge_r]\n    centers[7] = [edge_r, 0.5]\n    centers[8] = [1-edge_r, 0.5]\n    radii[5:9] = edge_r\n    \n    # Inner ring (8 circles)\n    inner_r = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Outer circles to fill gaps\n    outer_r = 0.075\n    \n    # Strategic positions based on gaps\n    angles = [np.pi/4, 3*np.pi/4, 5*np.pi/4, 7*np.pi/4]\n    dist = 0.38\n    for i, angle in enumerate(angles):\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Additional gap-filling circles\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.35, 0.65]\n    \n    radii[17:26] = outer_r\n    \n    return centers, radii\n\n\ndef initialize_asymmetric_pattern(n):\n    \"\"\"\n    Initialize with an asymmetric pattern that breaks symmetry to potentially find better packings.\n    Research suggests that optimal packings for some n values are not symmetric.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Larger circles in key positions\n    # Center circle slightly offset\n    centers[0] = [0.52, 0.48]\n    radii[0] = 0.14\n    \n    # Near-corner circles with variable sizes\n    corner_rs = [0.128, 0.126, 0.127, 0.125]\n    offsets = [0.136, 0.134, 0.135, 0.133]\n    \n    centers[1] = [offsets[0], offsets[0]]\n    centers[2] = [1-offsets[1], offsets[1]]\n    centers[3] = [offsets[2], 1-offsets[2]]\n    centers[4] = [1-offsets[3], 1-offsets[3]]\n    \n    for i in range(4):\n        radii[i+1] = corner_rs[i]\n    \n    # Edge circles with variable sizes\n    edge_rs = [0.113, 0.111, 0.112, 0.110]\n    edge_offsets = [0.112, 0.111, 0.113, 0.110]\n    \n    centers[5] = [0.5, edge_offsets[0]]\n    centers[6] = [0.5, 1-edge_offsets[1]]\n    centers[7] = [edge_offsets[2], 0.5]\n    centers[8] = [1-edge_offsets[3], 0.5]\n    \n    for i in range(4):\n        radii[i+5] = edge_rs[i]\n    \n    # Inner ring (8 circles) with variable sizes\n    inner_rs = [0.097, 0.095, 0.096, 0.094, 0.097, 0.095, 0.096, 0.094]\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + 0.05  # Slight rotation\n        dist = radii[0] + inner_rs[i] + 0.001\n        centers[9+i] = [centers[0][0] + dist * np.cos(angle), centers[0][1] + dist * np.sin(angle)]\n        radii[9+i] = inner_rs[i]\n    \n    # Outer circles to fill gaps with variable sizes\n    outer_rs = [0.078, 0.076, 0.077, 0.075, 0.078, 0.076, 0.077, 0.075, 0.076]\n    \n    # Strategic positions based on gaps\n    angles = [np.pi/4 - 0.03, 3*np.pi/4 + 0.02, 5*np.pi/4 - 0.01, 7*np.pi/4 + 0.03]\n    dists = [0.39, 0.38, 0.39, 0.38]\n    for i, (angle, dist) in enumerate(zip(angles, dists)):\n        centers[17+i] = [centers[0][0] + dist * np.cos(angle), centers[0][1] + dist * np.sin(angle)]\n        radii[17+i] = outer_rs[i]\n    \n    # Additional gap-filling circles\n    centers[21] = [0.26, 0.24]\n    centers[22] = [0.74, 0.26]\n    centers[23] = [0.24, 0.76]\n    centers[24] = [0.76, 0.74]\n    centers[25] = [0.36, 0.64]\n    \n    for i in range(5):\n        radii[21+i] = outer_rs[i+4]\n    \n    return centers, radii\n\n\ndef optimize_positions(centers, radii, penalty_factor=1000, max_iterations=200, ftol=1e-7):\n    \"\"\"\n    Optimize only circle positions while keeping radii fixed.\n    This can help with initial placement before full optimization.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Fixed circle radii\n        penalty_factor: Weight for constraint penalties\n        max_iterations: Maximum optimization iterations\n        ftol: Convergence tolerance\n        \n    Returns:\n        Optimized centers\n    \"\"\"\n    n = len(centers)\n    \n    # Define bounds for optimization (only positions)\n    bounds = []\n    for i in range(n):\n        # x-coordinate bounds\n        bounds.append((radii[i], 1.0 - radii[i]))\n        # y-coordinate bounds\n        bounds.append((radii[i], 1.0 - radii[i]))\n    \n    # Flatten the initial guess (only positions)\n    initial_guess = centers.flatten()\n    \n    # Define the objective function with penalty for overlaps\n    def objective(x):\n        c = x.reshape(n, 2)\n        \n        # Calculate penalties\n        penalty = 0.0\n        \n        # Penalty for overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((c[i,0]-c[j,0])**2 + (c[i,1]-c[j,1])**2)\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    penalty += overlap**2\n        \n        # Return penalty (we're not optimizing radii here)\n        return penalty_factor * penalty\n    \n    # Run the optimization\n    result = minimize(\n        objective, \n        initial_guess, \n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iterations,\n            'ftol': ftol\n        }\n    )\n    \n    # Extract the results\n    centers_opt = result.x.reshape(n, 2)\n    \n    return centers_opt\n\n\ndef optimize_pattern(centers, radii, penalty_factor=1000, max_iterations=300, ftol=1e-7):\n    \"\"\"\n    Optimize circle positions and radii to maximize the sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        penalty_factor: Weight for constraint penalties\n        max_iterations: Maximum optimization iterations\n        ftol: Convergence tolerance\n        \n    Returns:\n        Optimized centers and radii\n    \"\"\"\n    n = len(centers)\n    \n    # Define bounds for optimization\n    bounds = []\n    for i in range(n):\n        # x-coordinate bounds (tighter bounds based on radii)\n        bounds.append((max(0.001, radii[i] - 0.01), min(0.999, 1.0 - radii[i] + 0.01)))\n        # y-coordinate bounds\n        bounds.append((max(0.001, radii[i] - 0.01), min(0.999, 1.0 - radii[i] + 0.01)))\n    \n    # Radius bounds - allow a wide range but prevent tiny circles\n    for i in range(n):\n        bounds.append((0.04, 0.15))\n    \n    # Flatten the initial guess\n    initial_guess = np.concatenate([centers.flatten(), radii])\n    \n    # Define the objective function (negative sum of radii + penalty)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        \n        # Calculate the sum of radii (to be maximized)\n        sum_r = np.sum(r)\n        \n        # Calculate penalties\n        penalty = 0.0\n        \n        # Penalty for circles outside the unit square\n        for i in range(n):\n            if c[i,0] - r[i] < 0:\n                penalty += (c[i,0] - r[i])**2 * 1.2  # Slightly higher weight\n            if c[i,0] + r[i] > 1:\n                penalty += (c[i,0] + r[i] - 1)**2 * 1.2\n            if c[i,1] - r[i] < 0:\n                penalty += (c[i,1] - r[i])**2 * 1.2\n            if c[i,1] + r[i] > 1:\n                penalty += (c[i,1] + r[i] - 1)**2 * 1.2\n        \n        # Penalty for overlapping circles - quadratic with additional cubic term for severe overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((c[i,0]-c[j,0])**2 + (c[i,1]-c[j,1])**2)\n                overlap = r[i] + r[j] - dist\n                if overlap > 0:\n                    penalty += overlap**2 + (overlap > 0.01) * overlap**3\n        \n        # Return negative sum (for minimization) plus penalty\n        return -sum_r + penalty_factor * penalty\n    \n    # Run the optimization\n    result = minimize(\n        objective, \n        initial_guess, \n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iterations,\n            'ftol': ftol\n        }\n    )\n    \n    # Extract the results\n    optimized = result.x\n    centers_opt = optimized[:2*n].reshape(n, 2)\n    radii_opt = optimized[2*n:]\n    \n    return centers_opt, radii_opt\n\n\ndef post_process(centers, radii):\n    \"\"\"\n    Post-process the optimization results to ensure validity and maximize radii.\n    \n    This function:\n    1. Ensures all circles are within bounds\n    2. Resolves any remaining overlaps\n    3. Tries to expand circles where possible\n    \"\"\"\n    n = len(centers)\n    \n    # Ensure circles are within bounds\n    for i in range(n):\n        # Left boundary\n        if centers[i,0] - radii[i] < 0:\n            centers[i,0] = radii[i]\n        # Right boundary\n        if centers[i,0] + radii[i] > 1:\n            centers[i,0] = 1 - radii[i]\n        # Bottom boundary\n        if centers[i,1] - radii[i] < 0:\n            centers[i,1] = radii[i]\n        # Top boundary\n        if centers[i,1] + radii[i] > 1:\n            centers[i,1] = 1 - radii[i]\n    \n    # Resolve overlaps (iteratively shrink overlapping circles)\n    max_iterations = 15\n    for _ in range(max_iterations):\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 1e-6:  # Small tolerance\n                    overlap_found = True\n                    # Shrink both circles proportionally\n                    shrink_i = overlap * radii[i] / (radii[i] + radii[j])\n                    shrink_j = overlap * radii[j] / (radii[i] + radii[j])\n                    radii[i] -= shrink_i * 0.55  # Slightly more to ensure resolution\n                    radii[j] -= shrink_j * 0.55\n        \n        if not overlap_found:\n            break\n    \n    return centers, radii\n\n\ndef maximize_radii(centers, radii):\n    \"\"\"\n    Maximize the radii of each circle individually while maintaining validity.\n    This is a greedy approach that can help fine-tune the final result.\n    \"\"\"\n    n = len(centers)\n    improved_radii = radii.copy()\n    \n    # Try to expand each circle individually\n    for i in range(n):\n        # Calculate current minimum distance to any boundary\n        boundary_dist = min(\n            centers[i,0],                # Distance to left boundary\n            1 - centers[i,0],            # Distance to right boundary\n            centers[i,1],                # Distance to bottom boundary\n            1 - centers[i,1]             # Distance to top boundary\n        )\n        \n        # Calculate current minimum distance to any other circle\n        min_circle_dist = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                circle_dist = dist - improved_radii[j]\n                min_circle_dist = min(min_circle_dist, circle_dist)\n        \n        # Maximum possible radius is the minimum of these two constraints\n        max_possible_radius = min(boundary_dist, min_circle_dist)\n        \n        # Update radius if we can improve it\n        if max_possible_radius > improved_radii[i]:\n            # Add a small safety margin to avoid numerical issues\n            improved_radii[i] = max_possible_radius - 1e-8\n    \n    return improved_radii\n\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "388bae93-d46b-4162-bdb7-658138bc17e7", "generation": 9, "timestamp": 1750946518.4706085, "iteration_found": 151, "metrics": {"validity": 1.0, "sum_radii": 2.609281854965729, "target_ratio": 0.9902397931558745, "combined_score": 0.9902397931558745, "eval_time": 190.72066617012024}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.5845780540725354, "target_ratio": 0.9808645366499187, "combined_score": 0.9808645366499187, "eval_time": 183.1378300189972}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.645 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.636, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.5846\n- target_ratio: 0.9809\n- combined_score: 0.9809\n- eval_time: 183.1378\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: eval_time. Consider continuing with similar changes.\n- Metrics showing regression: sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6073, target_ratio: 0.9895, combined_score: 0.9895, eval_time: 132.5911\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6295, target_ratio: 0.9979, combined_score: 0.9979, eval_time: 174.5711\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5846, target_ratio: 0.9809, combined_score: 0.9809, eval_time: 183.1378\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 9.7633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (43.1799)\n\n\n### Program 2 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using multi-stage optimization with specialized patterns and mathematical insights to maximize the sum of radii toward the theoretical optimal value of 2.645. This version introduces a more efficient optimization strategy, refined penalty function, and adaptive radius adjustment. Focus on simulated annealing and gradient descent hybrid.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize, basinhopping\nimport time\nimport logging\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n### Program 3 (Score: 4.6250)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This implementation uses a hybrid approach with variable-sized circles, targeted perturbation strategies, and a multi-stage optimization process to maximize the sum of radii toward the theoretical target of 2.645. This version refines the mathematical optimization and introduces adaptive radius scaling.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5907), Performs well on target_ratio (0.9832), Performs well on combined_score (0.9832), Performs well on eval_time (17.5678)\n\n\n### Program 4 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques. This version incorporates a more robust penalty function, adaptive radius adjustments during optimization, and a refined initial pattern selection strategy.  It uses a combination of L-BFGS-B and a custom step function with basin hopping to escape local minima more effectively. Includes dynamic radius adjustment during optimization based on overlap.  This version introduces a temperature-based simulated annealing within the basin hopping and refines the penalty function to better guide the optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize, basinhopping\nimport logging\nimport random\n\n# Configure logging (optional, but helpful for debugging)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on stage1_passed (0.0000), Performs well on error (0.0000), Performs well on timeout (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using multi-stage optimization with variable-sized circles, specialized mathematical patterns, and adaptive optimization techniques to maximize the sum of radii toward the theoretical optimal value of 2.645. This version focuses on enhanced penalty functions, refined initialization strategies, and more aggressive optimization techniques to break through the 2.636 plateau. This version introduces a new penalty function based on the Lennard-Jones potential, a more sophisticated initialization using a combination of hexagonal and random placements, and a refined optimization strategy that alternates between position and radius optimization. It also reduces the number of iterations in each stage to avoid timeouts and incorporates simulated annealing in the initial position optimization.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize, basinhopping\nimport time\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles in a unit square using a multi-stage approach with mathematically-informed patterns to maximize the sum of radii toward the target of 2.645.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Start with known promising patterns\n    patterns = [\n        initialize_hexagonal_pattern,\n        initialize_hybrid_pattern,\n        initialize_specialized_pattern\n    ]\n    \n    start_time = time.time()\n    max_time = 180  # Maximum time in seconds\n\n    for pattern_func in patterns:\n        if time.time() - start_time > max_time:\n            break\n            \n        # Initialize with pattern\n        centers, radii = pattern_func(n)\n        \n        # Optimize with different parameter sets\n        for penalty_factor in [500, 1000]:\n            for max_iters in [200, 300]:\n                if time.time() - start_time > max_time:\n                    break\n                    \n                try:\n                    # First stage optimization - focus on rough positioning\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers.copy(), radii.copy(), \n                        penalty_factor=penalty_factor,\n                        max_iterations=max_iters\n                    )\n                    \n                    # Second stage - fine-tuning with higher precision\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers_opt, radii_opt,\n                        penalty_factor=penalty_factor*2,\n                        max_iterations=max_iters,\n                        ftol=1e-8\n                    )\n                    \n                    # Apply post-processing to ensure validity and maximize radii\n                    centers_opt, radii_opt = post_process(centers_opt, radii_opt)\n                    \n                    sum_radii = np.sum(radii_opt)\n                    if sum_radii > best_sum:\n                        best_sum = sum_radii\n                        best_centers = centers_opt.copy()\n                        best_radii = radii_opt.copy()\n                except Exception:\n                    continue\n\n    # If we found a valid solution\n    if best_centers is not None:\n        return best_centers, best_radii, best_sum\n    \n    # Fallback to a simple pattern if all optimizations failed\n    centers, radii = initialize_hexagonal_pattern(n)\n    return centers, radii, np.sum(radii)\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be efficient for circle packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be optimized later\n    r = 0.09\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # First hexagonal ring (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + r + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = r\n    \n    # Second ring (12 circles)\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2*r + r + 0.002\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = r\n    \n    # Corner circles (4 circles)\n    corner_r = 0.11\n    centers[19] = [corner_r, corner_r]\n    centers[20] = [1-corner_r, corner_r]\n    centers[21] = [corner_r, 1-corner_r]\n    centers[22] = [1-corner_r, 1-corner_r]\n    radii[19:23] = corner_r\n    \n    # Edge circles (3 circles)\n    edge_r = 0.095\n    centers[23] = [0.5, edge_r]\n    centers[24] = [edge_r, 0.5]\n    centers[25] = [1-edge_r, 0.5]\n    radii[23:26] = edge_r\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern that combines corner optimization with inner rings.\n    This pattern is inspired by the best known arrangements for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4 larger circles)\n    corner_r = 0.12\n    centers[0] = [corner_r, corner_r]\n    centers[1] = [1-corner_r, corner_r]\n    centers[2] = [corner_r, 1-corner_r]\n    centers[3] = [1-corner_r, 1-corner_r]\n    radii[0:4] = corner_r\n    \n    # Edge circles (4 medium circles)\n    edge_r = 0.105\n    centers[4] = [0.5, edge_r]\n    centers[5] = [0.5, 1-edge_r]\n    centers[6] = [edge_r, 0.5]\n    centers[7] = [1-edge_r, 0.5]\n    radii[4:8] = edge_r\n    \n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.13\n    \n    # Inner ring (8 circles)\n    inner_r = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Additional circles in between\n    mid_r = 0.08\n    centers[17] = [0.25, 0.25]\n    centers[18] = [0.75, 0.25]\n    centers[19] = [0.25, 0.75]\n    centers[20] = [0.75, 0.75]\n    \n    centers[21] = [0.25, 0.5]\n    centers[22] = [0.75, 0.5]\n    centers[23] = [0.5, 0.25]\n    centers[24] = [0.5, 0.75]\n    \n    # One more in a strategic position\n    centers[25] = [0.35, 0.35]\n    \n    radii[17:26] = mid_r\n    \n    return centers, radii\n\n\ndef initialize_specialized_pattern(n):\n    \"\"\"\n    Initialize with a specialized pattern based on mathematical research for n=26.\n    This pattern uses variable-sized circles with strategic placement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with 5 key circles - one in center and 4 near corners\n    centers[0] = [0.5, 0.5]  # Center\n    radii[0] = 0.135\n    \n    # Near-corner circles (slightly inset from corners)\n    corner_r = 0.125\n    offset = 0.13\n    centers[1] = [offset, offset]\n    centers[2] = [1-offset, offset]\n    centers[3] = [offset, 1-offset]\n    centers[4] = [1-offset, 1-offset]\n    radii[1:5] = corner_r\n    \n    # Edge circles\n    edge_r = 0.11\n    centers[5] = [0.5, edge_r]\n    centers[6] = [0.5, 1-edge_r]\n    centers[7] = [edge_r, 0.5]\n    centers[8] = [1-edge_r, 0.5]\n    radii[5:9] = edge_r\n    \n    # Inner ring (8 circles)\n    inner_r = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Outer circles to fill gaps\n    outer_r = 0.075\n    \n    # Strategic positions based on gaps\n    angles = [np.pi/4, 3*np.pi/4, 5*np.pi/4, 7*np.pi/4]\n    dist = 0.38\n    for i, angle in enumerate(angles):\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Additional gap-filling circles\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.35, 0.65]\n    \n    radii[17:26] = outer_r\n    \n    return centers, radii\n\n\ndef optimize_pattern(centers, radii, penalty_factor=1000, max_iterations=300, ftol=1e-7):\n    \"\"\"\n    Optimize circle positions and radii to maximize the sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        penalty_factor: Weight for constraint penalties\n        max_iterations: Maximum optimization iterations\n        ftol: Convergence tolerance\n        \n    Returns:\n        Optimized centers and radii\n    \"\"\"\n    n = len(centers)\n    \n    # Define bounds for optimization\n    bounds = []\n    for i in range(n):\n        # x-coordinate bounds\n        bounds.append((0.0, 1.0))\n        # y-coordinate bounds\n        bounds.append((0.0, 1.0))\n    \n    # Radius bounds - allow a wide range but prevent tiny circles\n    for i in range(n):\n        bounds.append((0.03, 0.15))\n    \n    # Flatten the initial guess\n    initial_guess = np.concatenate([centers.flatten(), radii])\n    \n    # Define the objective function (negative sum of radii + penalty)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        \n        # Calculate the sum of radii (to be maximized)\n        sum_r = np.sum(r)\n        \n        # Calculate penalties\n        penalty = 0.0\n        \n        # Penalty for circles outside the unit square\n        for i in range(n):\n            if c[i,0] - r[i] < 0:\n                penalty += (c[i,0] - r[i])**2\n            if c[i,0] + r[i] > 1:\n                penalty += (c[i,0] + r[i] - 1)**2\n            if c[i,1] - r[i] < 0:\n                penalty += (c[i,1] - r[i])**2\n            if c[i,1] + r[i] > 1:\n                penalty += (c[i,1] + r[i] - 1)**2\n        \n        # Penalty for overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((c[i,0]-c[j,0])**2 + (c[i,1]-c[j,1])**2)\n                overlap = r[i] + r[j] - dist\n                if overlap > 0:\n                    penalty += overlap**2\n        \n        # Return negative sum (for minimization) plus penalty\n        return -sum_r + penalty_factor * penalty\n    \n    # Run the optimization\n    result = minimize(\n        objective, \n        initial_guess, \n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iterations,\n            'ftol': ftol\n        }\n    )\n    \n    # Extract the results\n    optimized = result.x\n    centers_opt = optimized[:2*n].reshape(n, 2)\n    radii_opt = optimized[2*n:]\n    \n    return centers_opt, radii_opt\n\n\ndef post_process(centers, radii):\n    \"\"\"\n    Post-process the optimization results to ensure validity and maximize radii.\n    \n    This function:\n    1. Ensures all circles are within bounds\n    2. Resolves any remaining overlaps\n    3. Tries to expand circles where possible\n    \"\"\"\n    n = len(centers)\n    \n    # Ensure circles are within bounds\n    for i in range(n):\n        # Left boundary\n        if centers[i,0] - radii[i] < 0:\n            centers[i,0] = radii[i]\n        # Right boundary\n        if centers[i,0] + radii[i] > 1:\n            centers[i,0] = 1 - radii[i]\n        # Bottom boundary\n        if centers[i,1] - radii[i] < 0:\n            centers[i,1] = radii[i]\n        # Top boundary\n        if centers[i,1] + radii[i] > 1:\n            centers[i,1] = 1 - radii[i]\n    \n    # Resolve overlaps (iteratively shrink overlapping circles)\n    max_iterations = 10\n    for _ in range(max_iterations):\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 1e-6:  # Small tolerance\n                    overlap_found = True\n                    # Shrink both circles proportionally\n                    shrink_i = overlap * radii[i] / (radii[i] + radii[j])\n                    shrink_j = overlap * radii[j] / (radii[i] + radii[j])\n                    radii[i] -= shrink_i * 0.55  # Slightly more to ensure resolution\n                    radii[j] -= shrink_j * 0.55\n        \n        if not overlap_found:\n            break\n    \n    # Try to expand circles where possible\n    expansion_factor = 1.001  # Small expansion per step\n    max_expansions = 20\n    \n    for _ in range(max_expansions):\n        for i in range(n):\n            # Temporarily expand this circle\n            original_radius = radii[i]\n            radii[i] *= expansion_factor\n            \n            # Check if still valid\n            valid = True\n            \n            # Check boundaries\n            if (centers[i,0] - radii[i] < 0 or centers[i,0] + radii[i] > 1 or\n                centers[i,1] - radii[i] < 0 or centers[i,1] + radii[i] > 1):\n                valid = False\n            \n            # Check overlaps\n            if valid:\n                for j in range(n):\n                    if i != j:\n                        dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                        if dist < radii[i] + radii[j]:\n                            valid = False\n                            break\n            \n            # Revert if not valid\n            if not valid:\n                radii[i] = original_radius\n    \n    return centers, radii\n\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll analyze the current program and develop a significantly improved version to break through the 2.636 plateau and approach the target of 2.645 for the sum of radii.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles in a unit square using mathematical insights and specialized optimization techniques to maximize the sum of radii toward the target of 2.645.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Start with known promising patterns - ordered by expected performance\n    patterns = [\n        initialize_specialized_pattern,\n        initialize_asymmetric_pattern,\n        initialize_hybrid_pattern,\n        initialize_hexagonal_pattern\n    ]\n    \n    start_time = time.time()\n    max_time = 170  # Maximum time in seconds (reduced to ensure completion)\n\n    for pattern_idx, pattern_func in enumerate(patterns):\n        if time.time() - start_time > max_time:\n            break\n            \n        # Initialize with pattern\n        centers, radii = pattern_func(n)\n        \n        # Different optimization strategies based on pattern\n        penalty_factors = [800, 1200] if pattern_idx < 2 else [500, 1000]\n        max_iters_list = [150, 250] if pattern_idx < 2 else [100, 200]\n        \n        for penalty_factor in penalty_factors:\n            for max_iters in max_iters_list:\n                if time.time() - start_time > max_time:\n                    break\n                    \n                try:\n                    # First stage - position optimization with fixed radii\n                    centers_opt = optimize_positions(\n                        centers.copy(), radii.copy(),\n                        penalty_factor=penalty_factor,\n                        max_iterations=max_iters\n                    )\n                    \n                    # Second stage - full optimization of positions and radii\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers_opt, radii.copy(), \n                        penalty_factor=penalty_factor,\n                        max_iterations=max_iters\n                    )\n                    \n                    # Third stage - fine-tuning with higher precision\n                    centers_opt, radii_opt = optimize_pattern(\n                        centers_opt, radii_opt,\n                        penalty_factor=penalty_factor*1.5,\n                        max_iterations=max_iters//2,\n                        ftol=1e-8\n                    )\n                    \n                    # Apply post-processing to ensure validity and maximize radii\n                    centers_opt, radii_opt = post_process(centers_opt, radii_opt)\n                    \n                    # Final radii maximization\n                    radii_opt = maximize_radii(centers_opt, radii_opt)\n                    \n                    sum_radii = np.sum(radii_opt)\n                    if sum_radii > best_sum:\n                        best_sum = sum_radii\n                        best_centers = centers_opt.copy()\n                        best_radii = radii_opt.copy()\n                except Exception:\n                    continue\n\n    # If we found a valid solution\n    if best_centers is not None:\n        return best_centers, best_radii, best_sum\n    \n    # Fallback to a simple pattern if all optimizations failed\n    centers, radii = initialize_hexagonal_pattern(n)\n    return centers, radii, np.sum(radii)\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be efficient for circle packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be optimized later\n    r = 0.09\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n    \n    # First hexagonal ring (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + r + 0.001\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = r\n    \n    # Second ring (12 circles)\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2*r + r + 0.002\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = r\n    \n    # Corner circles (4 circles)\n    corner_r = 0.11\n    centers[19] = [corner_r, corner_r]\n    centers[20] = [1-corner_r, corner_r]\n    centers[21] = [corner_r, 1-corner_r]\n    centers[22] = [1-corner_r, 1-corner_r]\n    radii[19:23] = corner_r\n    \n    # Edge circles (3 circles)\n    edge_r = 0.095\n    centers[23] = [0.5, edge_r]\n    centers[24] = [edge_r, 0.5]\n    centers[25] = [1-edge_r, 0.5]\n    radii[23:26] = edge_r\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern that combines corner optimization with inner rings.\n    This pattern is inspired by the best known arrangements for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4 larger circles)\n    corner_r = 0.12\n    centers[0] = [corner_r, corner_r]\n    centers[1] = [1-corner_r, corner_r]\n    centers[2] = [corner_r, 1-corner_r]\n    centers[3] = [1-corner_r, 1-corner_r]\n    radii[0:4] = corner_r\n    \n    # Edge circles (4 medium circles)\n    edge_r = 0.105\n    centers[4] = [0.5, edge_r]\n    centers[5] = [0.5, 1-edge_r]\n    centers[6] = [edge_r, 0.5]\n    centers[7] = [1-edge_r, 0.5]\n    radii[4:8] = edge_r\n    \n    # Center circle\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.13\n    \n    # Inner ring (8 circles)\n    inner_r = 0.1\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Additional circles in between\n    mid_r = 0.08\n    centers[17] = [0.25, 0.25]\n    centers[18] = [0.75, 0.25]\n    centers[19] = [0.25, 0.75]\n    centers[20] = [0.75, 0.75]\n    \n    centers[21] = [0.25, 0.5]\n    centers[22] = [0.75, 0.5]\n    centers[23] = [0.5, 0.25]\n    centers[24] = [0.5, 0.75]\n    \n    # One more in a strategic position\n    centers[25] = [0.35, 0.35]\n    \n    radii[17:26] = mid_r\n    \n    return centers, radii\n\n\ndef initialize_specialized_pattern(n):\n    \"\"\"\n    Initialize with a specialized pattern based on mathematical research for n=26.\n    This pattern uses variable-sized circles with strategic placement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Start with 5 key circles - one in center and 4 near corners\n    centers[0] = [0.5, 0.5]  # Center\n    radii[0] = 0.138\n    \n    # Near-corner circles (slightly inset from corners)\n    corner_r = 0.127\n    offset = 0.135\n    centers[1] = [offset, offset]\n    centers[2] = [1-offset, offset]\n    centers[3] = [offset, 1-offset]\n    centers[4] = [1-offset, 1-offset]\n    radii[1:5] = corner_r\n    \n    # Edge circles\n    edge_r = 0.112\n    centers[5] = [0.5, edge_r]\n    centers[6] = [0.5, 1-edge_r]\n    centers[7] = [edge_r, 0.5]\n    centers[8] = [1-edge_r, 0.5]\n    radii[5:9] = edge_r\n    \n    # Inner ring (8 circles)\n    inner_r = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + inner_r + 0.001\n        centers[9+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9+i] = inner_r\n    \n    # Outer circles to fill gaps\n    outer_r = 0.075\n    \n    # Strategic positions based on gaps\n    angles = [np.pi/4, 3*np.pi/4, 5*np.pi/4, 7*np.pi/4]\n    dist = 0.38\n    for i, angle in enumerate(angles):\n        centers[17+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Additional gap-filling circles\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.35, 0.65]\n    \n    radii[17:26] = outer_r\n    \n    return centers, radii\n\n\ndef initialize_asymmetric_pattern(n):\n    \"\"\"\n    Initialize with an asymmetric pattern that breaks symmetry to potentially find better packings.\n    Research suggests that optimal packings for some n values are not symmetric.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Larger circles in key positions\n    # Center circle slightly offset\n    centers[0] = [0.52, 0.48]\n    radii[0] = 0.14\n    \n    # Near-corner circles with variable sizes\n    corner_rs = [0.128, 0.126, 0.127, 0.125]\n    offsets = [0.136, 0.134, 0.135, 0.133]\n    \n    centers[1] = [offsets[0], offsets[0]]\n    centers[2] = [1-offsets[1], offsets[1]]\n    centers[3] = [offsets[2], 1-offsets[2]]\n    centers[4] = [1-offsets[3], 1-offsets[3]]\n    \n    for i in range(4):\n        radii[i+1] = corner_rs[i]\n    \n    # Edge circles with variable sizes\n    edge_rs = [0.113, 0.111, 0.112, 0.110]\n    edge_offsets = [0.112, 0.111, 0.113, 0.110]\n    \n    centers[5] = [0.5, edge_offsets[0]]\n    centers[6] = [0.5, 1-edge_offsets[1]]\n    centers[7] = [edge_offsets[2], 0.5]\n    centers[8] = [1-edge_offsets[3], 0.5]\n    \n    for i in range(4):\n        radii[i+5] = edge_rs[i]\n    \n    # Inner ring (8 circles) with variable sizes\n    inner_rs = [0.097, 0.095, 0.096, 0.094, 0.097, 0.095, 0.096, 0.094]\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + 0.05  # Slight rotation\n        dist = radii[0] + inner_rs[i] + 0.001\n        centers[9+i] = [centers[0][0] + dist * np.cos(angle), centers[0][1] + dist * np.sin(angle)]\n        radii[9+i] = inner_rs[i]\n    \n    # Outer circles to fill gaps with variable sizes\n    outer_rs = [0.078, 0.076, 0.077, 0.075, 0.078, 0.076, 0.077, 0.075, 0.076]\n    \n    # Strategic positions based on gaps\n    angles = [np.pi/4 - 0.03, 3*np.pi/4 + 0.02, 5*np.pi/4 - 0.01, 7*np.pi/4 + 0.03]\n    dists = [0.39, 0.38, 0.39, 0.38]\n    for i, (angle, dist) in enumerate(zip(angles, dists)):\n        centers[17+i] = [centers[0][0] + dist * np.cos(angle), centers[0][1] + dist * np.sin(angle)]\n        radii[17+i] = outer_rs[i]\n    \n    # Additional gap-filling circles\n    centers[21] = [0.26, 0.24]\n    centers[22] = [0.74, 0.26]\n    centers[23] = [0.24, 0.76]\n    centers[24] = [0.76, 0.74]\n    centers[25] = [0.36, 0.64]\n    \n    for i in range(5):\n        radii[21+i] = outer_rs[i+4]\n    \n    return centers, radii\n\n\ndef optimize_positions(centers, radii, penalty_factor=1000, max_iterations=200, ftol=1e-7):\n    \"\"\"\n    Optimize only circle positions while keeping radii fixed.\n    This can help with initial placement before full optimization.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Fixed circle radii\n        penalty_factor: Weight for constraint penalties\n        max_iterations: Maximum optimization iterations\n        ftol: Convergence tolerance\n        \n    Returns:\n        Optimized centers\n    \"\"\"\n    n = len(centers)\n    \n    # Define bounds for optimization (only positions)\n    bounds = []\n    for i in range(n):\n        # x-coordinate bounds\n        bounds.append((radii[i], 1.0 - radii[i]))\n        # y-coordinate bounds\n        bounds.append((radii[i], 1.0 - radii[i]))\n    \n    # Flatten the initial guess (only positions)\n    initial_guess = centers.flatten()\n    \n    # Define the objective function with penalty for overlaps\n    def objective(x):\n        c = x.reshape(n, 2)\n        \n        # Calculate penalties\n        penalty = 0.0\n        \n        # Penalty for overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((c[i,0]-c[j,0])**2 + (c[i,1]-c[j,1])**2)\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    penalty += overlap**2\n        \n        # Return penalty (we're not optimizing radii here)\n        return penalty_factor * penalty\n    \n    # Run the optimization\n    result = minimize(\n        objective, \n        initial_guess, \n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iterations,\n            'ftol': ftol\n        }\n    )\n    \n    # Extract the results\n    centers_opt = result.x.reshape(n, 2)\n    \n    return centers_opt\n\n\ndef optimize_pattern(centers, radii, penalty_factor=1000, max_iterations=300, ftol=1e-7):\n    \"\"\"\n    Optimize circle positions and radii to maximize the sum of radii.\n    \n    Args:\n        centers: Initial circle centers\n        radii: Initial circle radii\n        penalty_factor: Weight for constraint penalties\n        max_iterations: Maximum optimization iterations\n        ftol: Convergence tolerance\n        \n    Returns:\n        Optimized centers and radii\n    \"\"\"\n    n = len(centers)\n    \n    # Define bounds for optimization\n    bounds = []\n    for i in range(n):\n        # x-coordinate bounds (tighter bounds based on radii)\n        bounds.append((max(0.001, radii[i] - 0.01), min(0.999, 1.0 - radii[i] + 0.01)))\n        # y-coordinate bounds\n        bounds.append((max(0.001, radii[i] - 0.01), min(0.999, 1.0 - radii[i] + 0.01)))\n    \n    # Radius bounds - allow a wide range but prevent tiny circles\n    for i in range(n):\n        bounds.append((0.04, 0.15))\n    \n    # Flatten the initial guess\n    initial_guess = np.concatenate([centers.flatten(), radii])\n    \n    # Define the objective function (negative sum of radii + penalty)\n    def objective(x):\n        c = x[:2*n].reshape(n, 2)\n        r = x[2*n:]\n        \n        # Calculate the sum of radii (to be maximized)\n        sum_r = np.sum(r)\n        \n        # Calculate penalties\n        penalty = 0.0\n        \n        # Penalty for circles outside the unit square\n        for i in range(n):\n            if c[i,0] - r[i] < 0:\n                penalty += (c[i,0] - r[i])**2 * 1.2  # Slightly higher weight\n            if c[i,0] + r[i] > 1:\n                penalty += (c[i,0] + r[i] - 1)**2 * 1.2\n            if c[i,1] - r[i] < 0:\n                penalty += (c[i,1] - r[i])**2 * 1.2\n            if c[i,1] + r[i] > 1:\n                penalty += (c[i,1] + r[i] - 1)**2 * 1.2\n        \n        # Penalty for overlapping circles - quadratic with additional cubic term for severe overlaps\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((c[i,0]-c[j,0])**2 + (c[i,1]-c[j,1])**2)\n                overlap = r[i] + r[j] - dist\n                if overlap > 0:\n                    penalty += overlap**2 + (overlap > 0.01) * overlap**3\n        \n        # Return negative sum (for minimization) plus penalty\n        return -sum_r + penalty_factor * penalty\n    \n    # Run the optimization\n    result = minimize(\n        objective, \n        initial_guess, \n        method='L-BFGS-B',\n        bounds=bounds,\n        options={\n            'maxiter': max_iterations,\n            'ftol': ftol\n        }\n    )\n    \n    # Extract the results\n    optimized = result.x\n    centers_opt = optimized[:2*n].reshape(n, 2)\n    radii_opt = optimized[2*n:]\n    \n    return centers_opt, radii_opt\n\n\ndef post_process(centers, radii):\n    \"\"\"\n    Post-process the optimization results to ensure validity and maximize radii.\n    \n    This function:\n    1. Ensures all circles are within bounds\n    2. Resolves any remaining overlaps\n    3. Tries to expand circles where possible\n    \"\"\"\n    n = len(centers)\n    \n    # Ensure circles are within bounds\n    for i in range(n):\n        # Left boundary\n        if centers[i,0] - radii[i] < 0:\n            centers[i,0] = radii[i]\n        # Right boundary\n        if centers[i,0] + radii[i] > 1:\n            centers[i,0] = 1 - radii[i]\n        # Bottom boundary\n        if centers[i,1] - radii[i] < 0:\n            centers[i,1] = radii[i]\n        # Top boundary\n        if centers[i,1] + radii[i] > 1:\n            centers[i,1] = 1 - radii[i]\n    \n    # Resolve overlaps (iteratively shrink overlapping circles)\n    max_iterations = 15\n    for _ in range(max_iterations):\n        overlap_found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 1e-6:  # Small tolerance\n                    overlap_found = True\n                    # Shrink both circles proportionally\n                    shrink_i = overlap * radii[i] / (radii[i] + radii[j])\n                    shrink_j = overlap * radii[j] / (radii[i] + radii[j])\n                    radii[i] -= shrink_i * 0.55  # Slightly more to ensure resolution\n                    radii[j] -= shrink_j * 0.55\n        \n        if not overlap_found:\n            break\n    \n    return centers, radii\n\n\ndef maximize_radii(centers, radii):\n    \"\"\"\n    Maximize the radii of each circle individually while maintaining validity.\n    This is a greedy approach that can help fine-tune the final result.\n    \"\"\"\n    n = len(centers)\n    improved_radii = radii.copy()\n    \n    # Try to expand each circle individually\n    for i in range(n):\n        # Calculate current minimum distance to any boundary\n        boundary_dist = min(\n            centers[i,0],                # Distance to left boundary\n            1 - centers[i,0],            # Distance to right boundary\n            centers[i,1],                # Distance to bottom boundary\n            1 - centers[i,1]             # Distance to top boundary\n        )\n        \n        # Calculate current minimum distance to any other circle\n        min_circle_dist = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt((centers[i,0]-centers[j,0])**2 + (centers[i,1]-centers[j,1])**2)\n                circle_dist = dist - improved_radii[j]\n                min_circle_dist = min(min_circle_dist, circle_dist)\n        \n        # Maximum possible radius is the minimum of these two constraints\n        max_possible_radius = min(boundary_dist, min_circle_dist)\n        \n        # Update radius if we can improve it\n        if max_possible_radius > improved_radii[i]:\n            # Add a small safety margin to avoid numerical issues\n            improved_radii[i] = max_possible_radius - 1e-8\n    \n    return improved_radii\n\n\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.savefig(\"circle_packing.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}