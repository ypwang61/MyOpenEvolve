{"id": "292afec2-931f-488d-b33e-8c5938d32669", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_hexagonal_pattern,\n        initialize_specialized_n26,\n        initialize_edge_optimized,\n        initialize_variable_size_pattern,\n        initialize_corner_optimized,\n        initialize_hybrid_pattern\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be \n    efficient for circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be scaled during optimization\n    base_radius = 0.095\n    \n    # Corner circles (4)\n    corner_radius = base_radius * 1.05\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - slightly smaller\n    edge_radius = base_radius * 0.95\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.5, edge_radius],\n        [0.75, edge_radius],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.5],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(min(8, len(edge_positions))):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Central large circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = base_radius * 1.15\n    \n    # Inner ring (6 circles)\n    inner_radius = base_radius * 1.0\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius + 0.005\n        centers[13+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13+i] = inner_radius\n    \n    # Remaining circles in intermediate positions\n    mid_radius = base_radius * 0.9\n    remaining_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i in range(min(7, len(remaining_positions))):\n        centers[19+i] = remaining_positions[i]\n        radii[19+i] = mid_radius\n    \n    return centers, radii\n\n\ndef initialize_specialized_n26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set up a pattern with larger circles in key positions\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (5 circles)\n    ring1_radius = 0.1\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + ring1_radius + 0.003\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (10 circles)\n    ring2_radius = 0.09\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        dist = radii[0] + 2 * ring1_radius + ring2_radius + 0.01\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = ring2_radius\n    \n    # Corner circles (4)\n    corner_radius = 0.105\n    centers[16] = [corner_radius, corner_radius]\n    centers[17] = [1 - corner_radius, corner_radius]\n    centers[18] = [corner_radius, 1 - corner_radius]\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[16:20] = corner_radius\n    \n    # Edge circles (6)\n    edge_radius = 0.085\n    centers[20] = [0.5, edge_radius]\n    centers[21] = [0.5, 1 - edge_radius]\n    centers[22] = [edge_radius, 0.5]\n    centers[23] = [1 - edge_radius, 0.5]\n    centers[24] = [0.25, 1 - edge_radius]\n    centers[25] = [0.75, 1 - edge_radius]\n    radii[20:26] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_edge_optimized(n):\n    \"\"\"\n    Initialize with a pattern that places circles optimally along edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (12) - medium\n    edge_radius = 0.095\n    edge_count = 3  # 3 circles per edge\n    \n    # Bottom edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+i] = [x, edge_radius]\n        radii[4+i] = edge_radius\n    \n    # Right edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+edge_count+i] = [1 - edge_radius, y]\n        radii[4+edge_count+i] = edge_radius\n    \n    # Top edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+2*edge_count+i] = [x, 1 - edge_radius]\n        radii[4+2*edge_count+i] = edge_radius\n    \n    # Left edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+3*edge_count+i] = [edge_radius, y]\n        radii[4+3*edge_count+i] = edge_radius\n    \n    # Interior circles (10) - smaller\n    interior_radius = 0.085\n    count = 16\n    \n    # Place interior circles in a grid pattern\n    interior_positions = [\n        [0.25, 0.25], [0.5, 0.25], [0.75, 0.25],\n        [0.25, 0.5], [0.5, 0.5], [0.75, 0.5],\n        [0.25, 0.75], [0.5, 0.75], [0.75, 0.75],\n        [0.33, 0.33]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if count < n:\n            centers[count] = pos\n            radii[count] = interior_radius\n            count += 1\n    \n    return centers, radii\n\n\ndef initialize_variable_size_pattern(n):\n    \"\"\"\n    Initialize with a pattern that uses variable sized circles\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with 3 different circle sizes\n    large_radius = 0.11\n    medium_radius = 0.09\n    small_radius = 0.075\n    \n    # Place large circles (7)\n    large_positions = [\n        [0.5, 0.5],                # Center\n        [large_radius, large_radius],               # Corners\n        [1 - large_radius, large_radius],\n        [large_radius, 1 - large_radius],\n        [1 - large_radius, 1 - large_radius],\n        [0.5, large_radius],       # Middle of edges\n        [0.5, 1 - large_radius]\n    ]\n    \n    for i, pos in enumerate(large_positions):\n        if i < n:\n            centers[i] = pos\n            radii[i] = large_radius\n    \n    # Place medium circles (10)\n    medium_positions = [\n        [medium_radius, 0.5],\n        [1 - medium_radius, 0.5],\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.25, 0.5],\n        [0.75, 0.5],\n        [0.25, medium_radius],\n        [0.75, medium_radius]\n    ]\n    \n    for i, pos in enumerate(medium_positions):\n        if i+7 < n:\n            centers[i+7] = pos\n            radii[i+7] = medium_radius\n    \n    # Place small circles (9)\n    small_positions = [\n        [0.25, 1 - medium_radius],\n        [0.75, 1 - medium_radius],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.5, 0.33]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_corner_optimized(n):\n    \"\"\"\n    Initialize with a pattern that optimizes corner placements\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.3, edge_radius],\n        [0.7, edge_radius],\n        [0.3, 1 - edge_radius],\n        [0.7, 1 - edge_radius],\n        [edge_radius, 0.3],\n        [edge_radius, 0.7],\n        [1 - edge_radius, 0.3],\n        [1 - edge_radius, 0.7]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+4 < n:\n            centers[i+4] = pos\n            radii[i+4] = edge_radius\n    \n    # Middle edge circles (4) - medium-small\n    mid_edge_radius = 0.085\n    if 12 < n:\n        centers[12] = [0.5, mid_edge_radius]\n        radii[12] = mid_edge_radius\n    if 13 < n:\n        centers[13] = [0.5, 1 - mid_edge_radius]\n        radii[13] = mid_edge_radius\n    if 14 < n:\n        centers[14] = [mid_edge_radius, 0.5]\n        radii[14] = mid_edge_radius\n    if 15 < n:\n        centers[15] = [1 - mid_edge_radius, 0.5]\n        radii[15] = mid_edge_radius\n    \n    # Interior circles (10) - variable sizes\n    # Central circle - larger\n    if 16 < n:\n        centers[16] = [0.5, 0.5]\n        radii[16] = 0.1\n    \n    # Remaining interior circles\n    interior_radius = 0.08\n    interior_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.5],\n        [0.67, 0.5],\n        [0.5, 0.33],\n        [0.5, 0.67],\n        [0.4, 0.4]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = interior_radius\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining multiple approaches\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with gradually decreasing circle sizes from center to edges\n    \n    # Central circle - largest\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (6 circles) - large\n    ring1_radius = 0.1\n    for i in range(6):\n        if i+1 < n:\n            angle = 2 * np.pi * i / 6\n            dist = radii[0] + ring1_radius + 0.002\n            centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - large\n    corner_radius = 0.105\n    if 7 < n:\n        centers[7] = [corner_radius, corner_radius]\n        radii[7] = corner_radius\n    if 8 < n:\n        centers[8] = [1 - corner_radius, corner_radius]\n        radii[8] = corner_radius\n    if 9 < n:\n        centers[9] = [corner_radius, 1 - corner_radius]\n        radii[9] = corner_radius\n    if 10 < n:\n        centers[10] = [1 - corner_radius, 1 - corner_radius]\n        radii[10] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.09\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+11 < n:\n            centers[i+11] = pos\n            radii[i+11] = edge_radius\n    \n    # Remaining circles - smaller\n    small_radius = 0.08\n    small_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+19 < n:\n            centers[i+19] = pos\n            radii[i+19] = small_radius\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with a better optimization algorithm\n    centers, radii = better_fine_tune(centers, radii, max_iterations)\n    \n    # Final radius optimization\n    centers, radii = optimize_all_radii(centers, radii)\n    \n    return centers, radii\n\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 50.0  # Increased repulsion\n    wall_repulsion = 50.0      # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.85           # Slightly reduced dampening\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion - optimized with vectorization\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff * diff, axis=1)\n            min_dist = radii + radii[i]\n            overlap = min_dist**2 > dist_sq\n            \n            for j in range(n):\n                if i != j and overlap[j]:\n                    dist = np.sqrt(dist_sq[j])\n                    min_dist_ij = min_dist[j]\n                    \n                    if dist < min_dist_ij:\n                        overlap_amount = min_dist_ij - dist\n                        direction = diff[j] / (dist + 1e-10)\n                        force = repulsion_strength * overlap_amount * direction\n                        forces[i] += force\n                        forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef grow_radii(centers, radii, iterations=300):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0018  # Increased growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\ndef better_fine_tune(centers, radii, iterations=1000):\n    \"\"\"Fine-tune positions and sizes using gradient descent with constraints.\"\"\"\n    n = len(centers)\n    lr_center = 0.005  # Learning rate for center positions\n    lr_radius = 0.001  # Learning rate for radii\n    overlap_penalty = 10.0  # Penalty for overlapping circles\n    wall_repulsion_strength = 20.0 # Wall repulsion strength\n\n    for iteration in range(iterations):\n        # Calculate the objective function (sum of radii)\n        objective = np.sum(radii)\n\n        # Calculate gradients for centers and radii\n        grad_centers = np.zeros_like(centers)\n        grad_radii = np.zeros_like(radii)\n\n        # Gradient for radii is simply 1 (since objective is sum of radii)\n        grad_radii[:] = 1.0\n\n        # Calculate repulsion forces between circles (gradient for centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Calculate overlap amount\n                    overlap = min_dist - dist\n\n                    # Calculate direction vector\n                    direction = (centers[i] - centers[j]) / (dist + 1e-8)\n\n                    # Update gradients\n                    grad_centers[i] += overlap_penalty * overlap * direction\n                    grad_centers[j] -= overlap_penalty * overlap * direction\n\n                    # Update radii gradients (penalize smaller radii when overlapping)\n                    grad_radii[i] -= overlap_penalty * overlap / 2.0\n                    grad_radii[j] -= overlap_penalty * overlap / 2.0\n\n        # Apply wall repulsion (gradient for centers)\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                grad_centers[i, 0] += wall_repulsion_strength * (r - x)\n            if x > 1 - r:\n                grad_centers[i, 0] -= wall_repulsion_strength * (x - (1 - r))\n            if y < r:\n                grad_centers[i, 1] += wall_repulsion_strength * (r - y)\n            if y > 1 - r:\n                grad_centers[i, 1] -= wall_repulsion_strength * (y - (1 - r))\n\n        # Add a combined term: Encourage circles to expand into free space\n        for i in range(n):\n            # Estimate free space around circle i\n            free_space = 1.0\n            x, y = centers[i]\n            r = radii[i]\n            free_space = min(x - r, 1 - x - r, y - r, 1 - y - r)  # Distance to walls\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    free_space = min(free_space, dist - r - radii[j])\n            \n            # Add a small incentive for the radius to grow into the free space\n            grad_radii[i] += 0.1 * free_space  # Adjust weight as needed\n\n        # Update centers and radii using gradient descent\n        centers += lr_center * grad_centers\n        radii += lr_radius * grad_radii\n\n        # Clip radii to be within a reasonable range\n        radii[:] = np.clip(radii, 0.01, 0.15)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space, now with a binary search.\n    \"\"\"\n    n = len(centers)\n    \n    def is_valid(radii_test, centers):\n        \"\"\"Check if the packing is valid with the given radii.\"\"\"\n        for i in range(n):\n            if centers[i][0] < radii_test[i] or centers[i][0] > 1 - radii_test[i] or \\\n               centers[i][1] < radii_test[i] or centers[i][1] > 1 - radii_test[i]:\n                return False\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii_test[i] + radii_test[j]:\n                    return False\n        return True\n\n    radii_optimized = np.copy(radii)\n    for i in range(n):\n        # Binary search for the optimal radius for circle i\n        low = 0.001  # Minimum possible radius\n        high = 0.2  # Maximum possible radius\n        \n        for _ in range(20): # Precision of the binary search\n            mid = (low + high) / 2.0\n            \n            # Create a test radii array with the new radius for circle i\n            radii_test = np.copy(radii_optimized)\n            radii_test[i] = mid\n            \n            if is_valid(radii_test, centers):\n                low = mid\n            else:\n                high = mid\n        \n        radii_optimized[i] = low * 0.999 # Slightly reduce to ensure validity\n    \n    return centers, radii_optimized\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "ecab4610-eb9f-4ae1-a0ed-90baa7e274f9", "generation": 12, "timestamp": 1750803585.3089838, "iteration_found": 172, "metrics": {"validity": 1.0, "sum_radii": 0.5849169608774185, "target_ratio": 0.2219798713007281, "combined_score": 0.2219798713007281, "eval_time": 42.38034272193909}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.6735826057777404, "target_ratio": 0.2556290724014195, "combined_score": 0.2556290724014195, "eval_time": 24.74374485015869}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.6736\n- target_ratio: 0.2556\n- combined_score: 0.2556\n- eval_time: 24.7437\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5839, target_ratio: 0.9806, combined_score: 0.9806, eval_time: 99.5983\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 5.1220)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (19.9734)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 6.4029)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7060), Performs well on target_ratio (0.6475), Performs well on combined_score (0.6475), Performs well on eval_time (28.0137)\n\n\n### Program 4 (Score: 5.1280)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4843), Performs well on target_ratio (0.9428), Performs well on combined_score (0.9428), Performs well on eval_time (20.2702)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.1367)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_hexagonal_pattern,\n        initialize_specialized_n26,\n        initialize_edge_optimized,\n        initialize_variable_size_pattern,\n        initialize_corner_optimized,\n        initialize_hybrid_pattern\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be \n    efficient for circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be scaled during optimization\n    base_radius = 0.095\n    \n    # Corner circles (4)\n    corner_radius = base_radius * 1.05\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - slightly smaller\n    edge_radius = base_radius * 0.95\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.5, edge_radius],\n        [0.75, edge_radius],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.5],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(min(8, len(edge_positions))):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Central large circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = base_radius * 1.15\n    \n    # Inner ring (6 circles)\n    inner_radius = base_radius * 1.0\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius + 0.005\n        centers[13+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13+i] = inner_radius\n    \n    # Remaining circles in intermediate positions\n    mid_radius = base_radius * 0.9\n    remaining_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i in range(min(7, len(remaining_positions))):\n        centers[19+i] = remaining_positions[i]\n        radii[19+i] = mid_radius\n    \n    return centers, radii\n\n\ndef initialize_specialized_n26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set up a pattern with larger circles in key positions\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (5 circles)\n    ring1_radius = 0.1\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + ring1_radius + 0.003\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (10 circles)\n    ring2_radius = 0.09\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        dist = radii[0] + 2 * ring1_radius + ring2_radius + 0.01\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = ring2_radius\n    \n    # Corner circles (4)\n    corner_radius = 0.105\n    centers[16] = [corner_radius, corner_radius]\n    centers[17] = [1 - corner_radius, corner_radius]\n    centers[18] = [corner_radius, 1 - corner_radius]\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[16:20] = corner_radius\n    \n    # Edge circles (6)\n    edge_radius = 0.085\n    centers[20] = [0.5, edge_radius]\n    centers[21] = [0.5, 1 - edge_radius]\n    centers[22] = [edge_radius, 0.5]\n    centers[23] = [1 - edge_radius, 0.5]\n    centers[24] = [0.25, 1 - edge_radius]\n    centers[25] = [0.75, 1 - edge_radius]\n    radii[20:26] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_edge_optimized(n):\n    \"\"\"\n    Initialize with a pattern that places circles optimally along edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (12) - medium\n    edge_radius = 0.095\n    edge_count = 3  # 3 circles per edge\n    \n    # Bottom edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+i] = [x, edge_radius]\n        radii[4+i] = edge_radius\n    \n    # Right edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+edge_count+i] = [1 - edge_radius, y]\n        radii[4+edge_count+i] = edge_radius\n    \n    # Top edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+2*edge_count+i] = [x, 1 - edge_radius]\n        radii[4+2*edge_count+i] = edge_radius\n    \n    # Left edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+3*edge_count+i] = [edge_radius, y]\n        radii[4+3*edge_count+i] = edge_radius\n    \n    # Interior circles (10) - smaller\n    interior_radius = 0.085\n    count = 16\n    \n    # Place interior circles in a grid pattern\n    interior_positions = [\n        [0.25, 0.25], [0.5, 0.25], [0.75, 0.25],\n        [0.25, 0.5], [0.5, 0.5], [0.75, 0.5],\n        [0.25, 0.75], [0.5, 0.75], [0.75, 0.75],\n        [0.33, 0.33]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if count < n:\n            centers[count] = pos\n            radii[count] = interior_radius\n            count += 1\n    \n    return centers, radii\n\n\ndef initialize_variable_size_pattern(n):\n    \"\"\"\n    Initialize with a pattern that uses variable sized circles\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with 3 different circle sizes\n    large_radius = 0.11\n    medium_radius = 0.09\n    small_radius = 0.075\n    \n    # Place large circles (7)\n    large_positions = [\n        [0.5, 0.5],                # Center\n        [large_radius, large_radius],               # Corners\n        [1 - large_radius, large_radius],\n        [large_radius, 1 - large_radius],\n        [1 - large_radius, 1 - large_radius],\n        [0.5, large_radius],       # Middle of edges\n        [0.5, 1 - large_radius]\n    ]\n    \n    for i, pos in enumerate(large_positions):\n        if i < n:\n            centers[i] = pos\n            radii[i] = large_radius\n    \n    # Place medium circles (10)\n    medium_positions = [\n        [medium_radius, 0.5],\n        [1 - medium_radius, 0.5],\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.25, 0.5],\n        [0.75, 0.5],\n        [0.25, medium_radius],\n        [0.75, medium_radius]\n    ]\n    \n    for i, pos in enumerate(medium_positions):\n        if i+7 < n:\n            centers[i+7] = pos\n            radii[i+7] = medium_radius\n    \n    # Place small circles (9)\n    small_positions = [\n        [0.25, 1 - medium_radius],\n        [0.75, 1 - medium_radius],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.5, 0.33]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_corner_optimized(n):\n    \"\"\"\n    Initialize with a pattern that optimizes corner placements\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.3, edge_radius],\n        [0.7, edge_radius],\n        [0.3, 1 - edge_radius],\n        [0.7, 1 - edge_radius],\n        [edge_radius, 0.3],\n        [edge_radius, 0.7],\n        [1 - edge_radius, 0.3],\n        [1 - edge_radius, 0.7]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+4 < n:\n            centers[i+4] = pos\n            radii[i+4] = edge_radius\n    \n    # Middle edge circles (4) - medium-small\n    mid_edge_radius = 0.085\n    if 12 < n:\n        centers[12] = [0.5, mid_edge_radius]\n        radii[12] = mid_edge_radius\n    if 13 < n:\n        centers[13] = [0.5, 1 - mid_edge_radius]\n        radii[13] = mid_edge_radius\n    if 14 < n:\n        centers[14] = [mid_edge_radius, 0.5]\n        radii[14] = mid_edge_radius\n    if 15 < n:\n        centers[15] = [1 - mid_edge_radius, 0.5]\n        radii[15] = mid_edge_radius\n    \n    # Interior circles (10) - variable sizes\n    # Central circle - larger\n    if 16 < n:\n        centers[16] = [0.5, 0.5]\n        radii[16] = 0.1\n    \n    # Remaining interior circles\n    interior_radius = 0.08\n    interior_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.5],\n        [0.67, 0.5],\n        [0.5, 0.33],\n        [0.5, 0.67],\n        [0.4, 0.4]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = interior_radius\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining multiple approaches\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with gradually decreasing circle sizes from center to edges\n    \n    # Central circle - largest\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (6 circles) - large\n    ring1_radius = 0.1\n    for i in range(6):\n        if i+1 < n:\n            angle = 2 * np.pi * i / 6\n            dist = radii[0] + ring1_radius + 0.002\n            centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - large\n    corner_radius = 0.105\n    if 7 < n:\n        centers[7] = [corner_radius, corner_radius]\n        radii[7] = corner_radius\n    if 8 < n:\n        centers[8] = [1 - corner_radius, corner_radius]\n        radii[8] = corner_radius\n    if 9 < n:\n        centers[9] = [corner_radius, 1 - corner_radius]\n        radii[9] = corner_radius\n    if 10 < n:\n        centers[10] = [1 - corner_radius, 1 - corner_radius]\n        radii[10] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.09\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+11 < n:\n            centers[i+11] = pos\n            radii[i+11] = edge_radius\n    \n    # Remaining circles - smaller\n    small_radius = 0.08\n    small_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+19 < n:\n            centers[i+19] = pos\n            radii[i+19] = small_radius\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with a better optimization algorithm\n    centers, radii = better_fine_tune(centers, radii, max_iterations)\n    \n    # Final radius optimization\n    centers, radii = optimize_all_radii(centers, radii)\n    \n    return centers, radii\n\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 50.0  # Increased repulsion\n    wall_repulsion = 50.0      # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.85           # Slightly reduced dampening\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion - optimized with vectorization\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff * diff, axis=1)\n            min_dist = radii + radii[i]\n            overlap = min_dist**2 > dist_sq\n            \n            for j in range(n):\n                if i != j and overlap[j]:\n                    dist = np.sqrt(dist_sq[j])\n                    min_dist_ij = min_dist[j]\n                    \n                    if dist < min_dist_ij:\n                        overlap_amount = min_dist_ij - dist\n                        direction = diff[j] / (dist + 1e-10)\n                        force = repulsion_strength * overlap_amount * direction\n                        forces[i] += force\n                        forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef grow_radii(centers, radii, iterations=300):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0018  # Increased growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\ndef better_fine_tune(centers, radii, iterations=1000):\n    \"\"\"Fine-tune positions and sizes using gradient descent with constraints.\"\"\"\n    n = len(centers)\n    lr_center = 0.005  # Learning rate for center positions\n    lr_radius = 0.001  # Learning rate for radii\n    overlap_penalty = 10.0  # Penalty for overlapping circles\n\n    for iteration in range(iterations):\n        # Calculate the objective function (sum of radii)\n        objective = np.sum(radii)\n\n        # Calculate gradients for centers and radii\n        grad_centers = np.zeros_like(centers)\n        grad_radii = np.zeros_like(radii)\n\n        # Gradient for radii is simply 1 (since objective is sum of radii)\n        grad_radii[:] = 1.0\n\n        # Calculate repulsion forces between circles (gradient for centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Calculate overlap amount\n                    overlap = min_dist - dist\n\n                    # Calculate direction vector\n                    direction = (centers[i] - centers[j]) / (dist + 1e-8)\n\n                    # Update gradients\n                    grad_centers[i] += overlap_penalty * overlap * direction\n                    grad_centers[j] -= overlap_penalty * overlap * direction\n\n                    # Update radii gradients (penalize smaller radii when overlapping)\n                    grad_radii[i] -= overlap_penalty * overlap / 2.0\n                    grad_radii[j] -= overlap_penalty * overlap / 2.0\n\n        # Apply wall repulsion (gradient for centers)\n        wall_repulsion_strength = 20.0\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                grad_centers[i, 0] += wall_repulsion_strength * (r - x)\n            if x > 1 - r:\n                grad_centers[i, 0] -= wall_repulsion_strength * (x - (1 - r))\n            if y < r:\n                grad_centers[i, 1] += wall_repulsion_strength * (r - y)\n            if y > 1 - r:\n                grad_centers[i, 1] -= wall_repulsion_strength * (y - (1 - r))\n\n        # Update centers and radii using gradient descent\n        centers += lr_center * grad_centers\n        radii += lr_radius * grad_radii\n\n        # Clip radii to be within a reasonable range\n        radii[:] = np.clip(radii, 0.01, 0.15)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space, now with a binary search.\n    \"\"\"\n    n = len(centers)\n    \n    def is_valid(radii_test, centers):\n        \"\"\"Check if the packing is valid with the given radii.\"\"\"\n        for i in range(n):\n            if centers[i][0] < radii_test[i] or centers[i][0] > 1 - radii_test[i] or \\\n               centers[i][1] < radii_test[i] or centers[i][1] > 1 - radii_test[i]:\n                return False\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii_test[i] + radii_test[j]:\n                    return False\n        return True\n\n    radii_optimized = np.copy(radii)\n    for i in range(n):\n        # Binary search for the optimal radius for circle i\n        low = 0.001  # Minimum possible radius\n        high = 0.2  # Maximum possible radius\n        \n        for _ in range(20): # Precision of the binary search\n            mid = (low + high) / 2.0\n            \n            # Create a test radii array with the new radius for circle i\n            radii_test = np.copy(radii_optimized)\n            radii_test[i] = mid\n            \n            if is_valid(radii_test, centers):\n                low = mid\n            else:\n                high = mid\n        \n        radii_optimized[i] = low * 0.999 # Slightly reduce to ensure validity\n    \n    return centers, radii_optimized\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_hexagonal_pattern,\n        initialize_specialized_n26,\n        initialize_edge_optimized,\n        initialize_variable_size_pattern,\n        initialize_corner_optimized,\n        initialize_hybrid_pattern\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_hexagonal_pattern(n):\n    \"\"\"\n    Initialize with a hexagonal pattern which is known to be \n    efficient for circle packing\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Base radius - will be scaled during optimization\n    base_radius = 0.095\n    \n    # Corner circles (4)\n    corner_radius = base_radius * 1.05\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - slightly smaller\n    edge_radius = base_radius * 0.95\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.5, edge_radius],\n        [0.75, edge_radius],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.5],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(min(8, len(edge_positions))):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Central large circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = base_radius * 1.15\n    \n    # Inner ring (6 circles)\n    inner_radius = base_radius * 1.0\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius + 0.005\n        centers[13+i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13+i] = inner_radius\n    \n    # Remaining circles in intermediate positions\n    mid_radius = base_radius * 0.9\n    remaining_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i in range(min(7, len(remaining_positions))):\n        centers[19+i] = remaining_positions[i]\n        radii[19+i] = mid_radius\n    \n    return centers, radii\n\n\ndef initialize_specialized_n26(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set up a pattern with larger circles in key positions\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (5 circles)\n    ring1_radius = 0.1\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + ring1_radius + 0.003\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (10 circles)\n    ring2_radius = 0.09\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10  # Offset to stagger\n        dist = radii[0] + 2 * ring1_radius + ring2_radius + 0.01\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = ring2_radius\n    \n    # Corner circles (4)\n    corner_radius = 0.105\n    centers[16] = [corner_radius, corner_radius]\n    centers[17] = [1 - corner_radius, corner_radius]\n    centers[18] = [corner_radius, 1 - corner_radius]\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[16:20] = corner_radius\n    \n    # Edge circles (6)\n    edge_radius = 0.085\n    centers[20] = [0.5, edge_radius]\n    centers[21] = [0.5, 1 - edge_radius]\n    centers[22] = [edge_radius, 0.5]\n    centers[23] = [1 - edge_radius, 0.5]\n    centers[24] = [0.25, 1 - edge_radius]\n    centers[25] = [0.75, 1 - edge_radius]\n    radii[20:26] = edge_radius\n    \n    return centers, radii\n\n\ndef initialize_edge_optimized(n):\n    \"\"\"\n    Initialize with a pattern that places circles optimally along edges\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (12) - medium\n    edge_radius = 0.095\n    edge_count = 3  # 3 circles per edge\n    \n    # Bottom edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+i] = [x, edge_radius]\n        radii[4+i] = edge_radius\n    \n    # Right edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+edge_count+i] = [1 - edge_radius, y]\n        radii[4+edge_count+i] = edge_radius\n    \n    # Top edge\n    for i in range(edge_count):\n        x = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+2*edge_count+i] = [x, 1 - edge_radius]\n        radii[4+2*edge_count+i] = edge_radius\n    \n    # Left edge\n    for i in range(edge_count):\n        y = (i + 1) * (1.0 / (edge_count + 1))\n        centers[4+3*edge_count+i] = [edge_radius, y]\n        radii[4+3*edge_count+i] = edge_radius\n    \n    # Interior circles (10) - smaller\n    interior_radius = 0.085\n    count = 16\n    \n    # Place interior circles in a grid pattern\n    interior_positions = [\n        [0.25, 0.25], [0.5, 0.25], [0.75, 0.25],\n        [0.25, 0.5], [0.5, 0.5], [0.75, 0.5],\n        [0.25, 0.75], [0.5, 0.75], [0.75, 0.75],\n        [0.33, 0.33]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if count < n:\n            centers[count] = pos\n            radii[count] = interior_radius\n            count += 1\n    \n    return centers, radii\n\n\ndef initialize_variable_size_pattern(n):\n    \"\"\"\n    Initialize with a pattern that uses variable sized circles\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with 3 different circle sizes\n    large_radius = 0.11\n    medium_radius = 0.09\n    small_radius = 0.075\n    \n    # Place large circles (7)\n    large_positions = [\n        [0.5, 0.5],                # Center\n        [large_radius, large_radius],               # Corners\n        [1 - large_radius, large_radius],\n        [large_radius, 1 - large_radius],\n        [1 - large_radius, 1 - large_radius],\n        [0.5, large_radius],       # Middle of edges\n        [0.5, 1 - large_radius]\n    ]\n    \n    for i, pos in enumerate(large_positions):\n        if i < n:\n            centers[i] = pos\n            radii[i] = large_radius\n    \n    # Place medium circles (10)\n    medium_positions = [\n        [medium_radius, 0.5],\n        [1 - medium_radius, 0.5],\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.25, 0.5],\n        [0.75, 0.5],\n        [0.25, medium_radius],\n        [0.75, medium_radius]\n    ]\n    \n    for i, pos in enumerate(medium_positions):\n        if i+7 < n:\n            centers[i+7] = pos\n            radii[i+7] = medium_radius\n    \n    # Place small circles (9)\n    small_positions = [\n        [0.25, 1 - medium_radius],\n        [0.75, 1 - medium_radius],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.25],\n        [0.5, 0.75],\n        [0.5, 0.33]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_corner_optimized(n):\n    \"\"\"\n    Initialize with a pattern that optimizes corner placements\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.3, edge_radius],\n        [0.7, edge_radius],\n        [0.3, 1 - edge_radius],\n        [0.7, 1 - edge_radius],\n        [edge_radius, 0.3],\n        [edge_radius, 0.7],\n        [1 - edge_radius, 0.3],\n        [1 - edge_radius, 0.7]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+4 < n:\n            centers[i+4] = pos\n            radii[i+4] = edge_radius\n    \n    # Middle edge circles (4) - medium-small\n    mid_edge_radius = 0.085\n    if 12 < n:\n        centers[12] = [0.5, mid_edge_radius]\n        radii[12] = mid_edge_radius\n    if 13 < n:\n        centers[13] = [0.5, 1 - mid_edge_radius]\n        radii[13] = mid_edge_radius\n    if 14 < n:\n        centers[14] = [mid_edge_radius, 0.5]\n        radii[14] = mid_edge_radius\n    if 15 < n:\n        centers[15] = [1 - mid_edge_radius, 0.5]\n        radii[15] = mid_edge_radius\n    \n    # Interior circles (10) - variable sizes\n    # Central circle - larger\n    if 16 < n:\n        centers[16] = [0.5, 0.5]\n        radii[16] = 0.1\n    \n    # Remaining interior circles\n    interior_radius = 0.08\n    interior_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.5],\n        [0.67, 0.5],\n        [0.5, 0.33],\n        [0.5, 0.67],\n        [0.4, 0.4]\n    ]\n    \n    for i, pos in enumerate(interior_positions):\n        if i+17 < n:\n            centers[i+17] = pos\n            radii[i+17] = interior_radius\n    \n    return centers, radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining multiple approaches\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Use a pattern with gradually decreasing circle sizes from center to edges\n    \n    # Central circle - largest\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115\n    \n    # First ring (6 circles) - large\n    ring1_radius = 0.1\n    for i in range(6):\n        if i+1 < n:\n            angle = 2 * np.pi * i / 6\n            dist = radii[0] + ring1_radius + 0.002\n            centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n            radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - large\n    corner_radius = 0.105\n    if 7 < n:\n        centers[7] = [corner_radius, corner_radius]\n        radii[7] = corner_radius\n    if 8 < n:\n        centers[8] = [1 - corner_radius, corner_radius]\n        radii[8] = corner_radius\n    if 9 < n:\n        centers[9] = [corner_radius, 1 - corner_radius]\n        radii[9] = corner_radius\n    if 10 < n:\n        centers[10] = [1 - corner_radius, 1 - corner_radius]\n        radii[10] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.09\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        if i+11 < n:\n            centers[i+11] = pos\n            radii[i+11] = edge_radius\n    \n    # Remaining circles - smaller\n    small_radius = 0.08\n    small_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67]\n    ]\n    \n    for i, pos in enumerate(small_positions):\n        if i+19 < n:\n            centers[i+19] = pos\n            radii[i+19] = small_radius\n    \n    return centers, radii\n\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with a better optimization algorithm\n    centers, radii = better_fine_tune(centers, radii, max_iterations)\n    \n    # Final radius optimization\n    centers, radii = optimize_all_radii(centers, radii)\n    \n    return centers, radii\n\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 50.0  # Increased repulsion\n    wall_repulsion = 50.0      # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.85           # Slightly reduced dampening\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion - optimized with vectorization\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff * diff, axis=1)\n            min_dist = radii + radii[i]\n            overlap = min_dist**2 > dist_sq\n            \n            for j in range(n):\n                if i != j and overlap[j]:\n                    dist = np.sqrt(dist_sq[j])\n                    min_dist_ij = min_dist[j]\n                    \n                    if dist < min_dist_ij:\n                        overlap_amount = min_dist_ij - dist\n                        direction = diff[j] / (dist + 1e-10)\n                        force = repulsion_strength * overlap_amount * direction\n                        forces[i] += force\n                        forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.005 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef grow_radii(centers, radii, iterations=300):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0018  # Increased growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.5)\n    \n    return centers, radii\n\ndef better_fine_tune(centers, radii, iterations=1000):\n    \"\"\"Fine-tune positions and sizes using gradient descent with constraints.\"\"\"\n    n = len(centers)\n    lr_center = 0.005  # Learning rate for center positions\n    lr_radius = 0.001  # Learning rate for radii\n    overlap_penalty = 10.0  # Penalty for overlapping circles\n    wall_repulsion_strength = 20.0 # Wall repulsion strength\n\n    for iteration in range(iterations):\n        # Calculate the objective function (sum of radii)\n        objective = np.sum(radii)\n\n        # Calculate gradients for centers and radii\n        grad_centers = np.zeros_like(centers)\n        grad_radii = np.zeros_like(radii)\n\n        # Gradient for radii is simply 1 (since objective is sum of radii)\n        grad_radii[:] = 1.0\n\n        # Calculate repulsion forces between circles (gradient for centers)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    # Calculate overlap amount\n                    overlap = min_dist - dist\n\n                    # Calculate direction vector\n                    direction = (centers[i] - centers[j]) / (dist + 1e-8)\n\n                    # Update gradients\n                    grad_centers[i] += overlap_penalty * overlap * direction\n                    grad_centers[j] -= overlap_penalty * overlap * direction\n\n                    # Update radii gradients (penalize smaller radii when overlapping)\n                    grad_radii[i] -= overlap_penalty * overlap / 2.0\n                    grad_radii[j] -= overlap_penalty * overlap / 2.0\n\n        # Apply wall repulsion (gradient for centers)\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                grad_centers[i, 0] += wall_repulsion_strength * (r - x)\n            if x > 1 - r:\n                grad_centers[i, 0] -= wall_repulsion_strength * (x - (1 - r))\n            if y < r:\n                grad_centers[i, 1] += wall_repulsion_strength * (r - y)\n            if y > 1 - r:\n                grad_centers[i, 1] -= wall_repulsion_strength * (y - (1 - r))\n\n        # Add a combined term: Encourage circles to expand into free space\n        for i in range(n):\n            # Estimate free space around circle i\n            free_space = 1.0\n            x, y = centers[i]\n            r = radii[i]\n            free_space = min(x - r, 1 - x - r, y - r, 1 - y - r)  # Distance to walls\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    free_space = min(free_space, dist - r - radii[j])\n            \n            # Add a small incentive for the radius to grow into the free space\n            grad_radii[i] += 0.1 * free_space  # Adjust weight as needed\n\n        # Update centers and radii using gradient descent\n        centers += lr_center * grad_centers\n        radii += lr_radius * grad_radii\n\n        # Clip radii to be within a reasonable range\n        radii[:] = np.clip(radii, 0.01, 0.15)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space, now with a binary search.\n    \"\"\"\n    n = len(centers)\n    \n    def is_valid(radii_test, centers):\n        \"\"\"Check if the packing is valid with the given radii.\"\"\"\n        for i in range(n):\n            if centers[i][0] < radii_test[i] or centers[i][0] > 1 - radii_test[i] or \\\n               centers[i][1] < radii_test[i] or centers[i][1] > 1 - radii_test[i]:\n                return False\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii_test[i] + radii_test[j]:\n                    return False\n        return True\n\n    radii_optimized = np.copy(radii)\n    for i in range(n):\n        # Binary search for the optimal radius for circle i\n        low = 0.001  # Minimum possible radius\n        high = 0.2  # Maximum possible radius\n        \n        for _ in range(20): # Precision of the binary search\n            mid = (low + high) / 2.0\n            \n            # Create a test radii array with the new radius for circle i\n            radii_test = np.copy(radii_optimized)\n            radii_test[i] = mid\n            \n            if is_valid(radii_test, centers):\n                low = mid\n            else:\n                high = mid\n        \n        radii_optimized[i] = low * 0.999 # Slightly reduce to ensure validity\n    \n    return centers, radii_optimized\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}