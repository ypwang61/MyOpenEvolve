{"id": "4580854f-5b06-488c-9684-2cefd42fa42b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern with variable-sized circles and multi-stage optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a multi-stage optimization approach\n    centers, radii = initialize_specialized_pattern()\n    \n    # First optimization stage - coarse adjustment\n    centers, radii = optimize_packing(centers, radii, iterations=150, \n                                     learning_rate=0.05, \n                                     repulsion_factor=0.12,\n                                     attraction_factor=0.012)\n    \n    # Second optimization stage - fine tuning\n    centers, radii = optimize_packing(centers, radii, iterations=200, \n                                     learning_rate=0.01, \n                                     repulsion_factor=0.06,\n                                     attraction_factor=0.006)\n    \n    # Final radius maximization\n    radii = maximize_radii(centers)\n    \n    # Final adjustment to ensure validity\n    centers, radii = ensure_valid_packing(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern known to work well for n=26.\n    Uses a combination of different sized circles arranged in a pattern\n    that accounts for edge effects.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Initialize with a pattern that places:\n    # - One large circle in the center\n    # - A ring of medium circles around it\n    # - Smaller circles in the corners and edges\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.17  # Larger central circle\n    \n    # Inner ring of 6 circles in hexagonal pattern\n    inner_ring_radius = 0.33\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi/6  # Offset by 30 degrees\n        centers[i+1] = [\n            0.5 + inner_ring_radius * np.cos(angle),\n            0.5 + inner_ring_radius * np.sin(angle)\n        ]\n        radii[i+1] = 0.12\n    \n    # Middle ring of 6 circles. Stagger this ring slightly\n    middle_ring_radius = 0.33\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+7] = [\n            0.5 + middle_ring_radius * np.cos(angle) * 1.05,\n            0.5 + middle_ring_radius * np.sin(angle) * 1.05\n        ]\n        radii[i+7] = 0.12\n    \n    # Outer corners - 4 circles\n    corners = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    for i in range(4):\n        centers[i+13] = [\n            corners[i][0] + (0.5 - corners[i][0]) * 0.24,\n            corners[i][1] + (0.5 - corners[i][1]) * 0.24\n        ]\n        radii[i+13] = 0.10\n    \n    # Edge circles - 8 circles along the edges\n    edge_positions = [\n        [0.25, 0], [0.75, 0],  # Bottom edge\n        [0, 0.25], [0, 0.75],  # Left edge\n        [1, 0.25], [1, 0.75],  # Right edge\n        [0.25, 1], [0.75, 1]   # Top edge\n    ]\n    \n    for i in range(8):\n        centers[i+17] = [\n            edge_positions[i][0] + (0.5 - edge_positions[i][0]) * 0.20,\n            edge_positions[i][1] + (0.5 - edge_positions[i][1]) * 0.20\n        ]\n        radii[i+17] = 0.09\n    \n    # Additional circle at (0.5, 0)\n    centers[25] = [0.5, 0.13]\n    radii[25] = 0.10\n    \n    # Adjust all radii to be valid initially\n    radii = compute_valid_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=100, learning_rate=0.01, \n                    repulsion_factor=0.05, attraction_factor=0.01):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based approach with\n    both repulsive and attractive forces.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Define target radius ratios (larger in center, smaller at edges)\n    target_ratios = np.ones(n)\n    # Central circle gets highest priority\n    target_ratios[0] = 1.6\n    # Inner ring gets second priority\n    target_ratios[1:7] = 1.3\n    # Middle ring gets third priority\n    target_ratios[7:13] = 1.2\n    \n    # Optimization loop\n    for iteration in range(iterations):\n        # Calculate forces\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                vec = centers[i] - centers[j]\n                dist = np.sqrt(np.sum(vec**2))\n                \n                # Normalize direction vector\n                direction = vec / (dist + 1e-10)\n                \n                # Repulsive force if overlapping\n                min_dist = radii[i] + radii[j]\n                if dist < min_dist:\n                    force_mag = repulsion_factor * (min_dist - dist)**1.1\n                    forces[i] += force_mag * direction\n                    forces[j] -= force_mag * direction\n                \n                # Weak attractive force to maintain structure\n                else:\n                    force_mag = attraction_factor * (min_dist - dist) / (dist + 0.1)\n                    forces[i] += force_mag * direction * 0.5 # Reduced attraction\n                    forces[j] -= force_mag * direction * 0.5 # Reduced attraction\n        \n        # Border forces - stronger near edges\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left border\n            if x < r:\n                forces[i, 0] += repulsion_factor * 2.2 * (r - x)**1.1\n            # Right border\n            if x > 1 - r:\n                forces[i, 0] -= repulsion_factor * 2.2 * (x - (1 - r))**1.1\n            # Bottom border\n            if y < r:\n                forces[i, 1] += repulsion_factor * 2.2 * (r - y)**1.1\n            # Top border\n            if y > 1 - r:\n                forces[i, 1] -= repulsion_factor * 2.2 * (y - (1 - r))**1.1\n        \n        # Apply forces with adaptive learning rate\n        current_lr = learning_rate * (1 - iteration/iterations)**0.6\n        centers += current_lr * forces\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recompute radii based on current positions\n        if iteration % 5 == 0:\n            radii = compute_valid_radii(centers, radii, target_ratios)\n    \n    return centers, radii\n\ndef compute_valid_radii(centers, initial_radii=None, target_ratios=None):\n    \"\"\"\n    Compute the maximum possible radii for each circle position,\n    ensuring no overlaps and respecting target ratios if provided.\n    \"\"\"\n    n = centers.shape[0]\n    \n    if initial_radii is None:\n        radii = np.zeros(n)\n    else:\n        radii = initial_radii.copy()\n    \n    if target_ratios is None:\n        target_ratios = np.ones(n)\n    \n    # First pass: compute maximum radius based on borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Second pass: limit by distances to other circles\n    for _ in range(4):  # Multiple passes for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    \n                    # Distribute space according to target ratios\n                    ratio_sum = target_ratios[i] + target_ratios[j]\n                    max_radius_i = (dist / ratio_sum) * target_ratios[i] * 0.99 #slightly smaller radii\n                    \n                    if radii[i] > max_radius_i:\n                        radii[i] = max_radius_i\n    \n    return radii\n\ndef maximize_radii(centers):\n    \"\"\"\n    Maximize the radii of all circles using a more aggressive approach\n    that prioritizes the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # Start with maximum possible radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Iteratively adjust radii to avoid overlaps\n    for _ in range(6):  # Multiple iterations for convergence\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                current_sum = radii[i] + radii[j]\n                \n                if current_sum > dist:\n                    # Overlapping circles - adjust proportionally to current radii\n                    ratio = dist / current_sum\n                    radii[i] *= ratio * 0.995 # reduce a little more\n                    radii[j] *= ratio * 0.995 # reduce a little more\n    \n    return radii\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"\n    Final validation to ensure the packing is valid.\n    Makes small adjustments if necessary.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Check for border violations\n    for i in range(n):\n        x, y = centers[i]\n        r = radii[i]\n        \n        # Adjust position if too close to border\n        if x - r < 0:\n            centers[i, 0] = r\n        elif x + r > 1:\n            centers[i, 0] = 1 - r\n            \n        if y - r < 0:\n            centers[i, 1] = r\n        elif y + r > 1:\n            centers[i, 1] = 1 - r\n    \n    # Check for circle overlaps\n    for _ in range(4):  # Multiple passes\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    # Reduce radii slightly to eliminate overlap\n                    scale = 0.98 * dist / min_dist # reduce radii more\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "ffcbda9b-39da-4967-949e-d4a8ddceff34", "generation": 6, "timestamp": 1750753265.2822702, "iteration_found": 95, "metrics": {"validity": 1.0, "sum_radii": 0.4339802463001889, "target_ratio": 0.1646983856926713, "combined_score": 0.1646983856926713}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.3791013275079538, "target_ratio": 0.5233781129062444, "combined_score": 0.5233781129062444, "eval_time": 1.1565437316894531}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.3791\n- target_ratio: 0.5234\n- combined_score: 0.5234\n- eval_time: 1.1565\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization, physics, and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach with improved initialization, physics-based optimization, and a global optimization phase.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.3333)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to stage1_passed, Alternative approach to error\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern with variable-sized circles and multi-stage optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a multi-stage optimization approach\n    centers, radii = initialize_specialized_pattern()\n    \n    # First optimization stage - coarse adjustment\n    centers, radii = optimize_packing(centers, radii, iterations=100, \n                                     learning_rate=0.05, \n                                     repulsion_factor=0.1,\n                                     attraction_factor=0.01)\n    \n    # Second optimization stage - fine tuning\n    centers, radii = optimize_packing(centers, radii, iterations=150, \n                                     learning_rate=0.01, \n                                     repulsion_factor=0.05,\n                                     attraction_factor=0.005)\n    \n    # Final radius maximization\n    radii = maximize_radii(centers)\n    \n    # Final adjustment to ensure validity\n    centers, radii = ensure_valid_packing(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern known to work well for n=26.\n    Uses a combination of different sized circles arranged in a pattern\n    that accounts for edge effects.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Initialize with a pattern that places:\n    # - One large circle in the center\n    # - A ring of medium circles around it\n    # - Smaller circles in the corners and edges\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.16  # Larger central circle\n    \n    # Inner ring of 6 circles in hexagonal pattern\n    inner_ring_radius = 0.32\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi/6  # Offset by 30 degrees\n        centers[i+1] = [\n            0.5 + inner_ring_radius * np.cos(angle),\n            0.5 + inner_ring_radius * np.sin(angle)\n        ]\n        radii[i+1] = 0.11\n    \n    # Middle ring of 6 circles\n    middle_ring_radius = 0.32\n    for i in range(6):\n        angle = 2 * np.pi * i / 6  # No offset\n        centers[i+7] = [\n            0.5 + middle_ring_radius * np.cos(angle),\n            0.5 + middle_ring_radius * np.sin(angle)\n        ]\n        radii[i+7] = 0.11\n    \n    # Outer corners - 4 circles\n    corners = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    for i in range(4):\n        centers[i+13] = [\n            corners[i][0] + (0.5 - corners[i][0]) * 0.22,\n            corners[i][1] + (0.5 - corners[i][1]) * 0.22\n        ]\n        radii[i+13] = 0.09\n    \n    # Edge circles - 8 circles along the edges\n    edge_positions = [\n        [0.25, 0], [0.75, 0],  # Bottom edge\n        [0, 0.25], [0, 0.75],  # Left edge\n        [1, 0.25], [1, 0.75],  # Right edge\n        [0.25, 1], [0.75, 1]   # Top edge\n    ]\n    \n    for i in range(8):\n        centers[i+17] = [\n            edge_positions[i][0] + (0.5 - edge_positions[i][0]) * 0.18,\n            edge_positions[i][1] + (0.5 - edge_positions[i][1]) * 0.18\n        ]\n        radii[i+17] = 0.08\n    \n    # Additional circle at (0.5, 0)\n    centers[25] = [0.5, 0.12]\n    radii[25] = 0.09\n    \n    # Adjust all radii to be valid initially\n    radii = compute_valid_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=100, learning_rate=0.01, \n                    repulsion_factor=0.05, attraction_factor=0.01):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based approach with\n    both repulsive and attractive forces.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Define target radius ratios (larger in center, smaller at edges)\n    target_ratios = np.ones(n)\n    # Central circle gets highest priority\n    target_ratios[0] = 1.5\n    # Inner ring gets second priority\n    target_ratios[1:7] = 1.2\n    # Middle ring gets third priority\n    target_ratios[7:13] = 1.1\n    \n    # Optimization loop\n    for iteration in range(iterations):\n        # Calculate forces\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                vec = centers[i] - centers[j]\n                dist = np.sqrt(np.sum(vec**2))\n                \n                # Skip if too far apart\n                if dist > 0.5:\n                    continue\n                    \n                # Normalize direction vector\n                direction = vec / (dist + 1e-10)\n                \n                # Repulsive force if overlapping\n                min_dist = radii[i] + radii[j]\n                if dist < min_dist:\n                    force_mag = repulsion_factor * (min_dist - dist)\n                    forces[i] += force_mag * direction\n                    forces[j] -= force_mag * direction\n                \n                # Weak attractive force to maintain structure\n                else:\n                    force_mag = attraction_factor * (min_dist - dist) / (dist + 0.1)\n                    forces[i] += force_mag * direction\n                    forces[j] -= force_mag * direction\n        \n        # Border forces - stronger near edges\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left border\n            if x < r:\n                forces[i, 0] += repulsion_factor * 2 * (r - x)\n            # Right border\n            if x > 1 - r:\n                forces[i, 0] -= repulsion_factor * 2 * (x - (1 - r))\n            # Bottom border\n            if y < r:\n                forces[i, 1] += repulsion_factor * 2 * (r - y)\n            # Top border\n            if y > 1 - r:\n                forces[i, 1] -= repulsion_factor * 2 * (y - (1 - r))\n        \n        # Apply forces with adaptive learning rate\n        current_lr = learning_rate * (1 - iteration/iterations)**0.5\n        centers += current_lr * forces\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recompute radii based on current positions\n        if iteration % 5 == 0:\n            radii = compute_valid_radii(centers, radii, target_ratios)\n    \n    return centers, radii\n\ndef compute_valid_radii(centers, initial_radii=None, target_ratios=None):\n    \"\"\"\n    Compute the maximum possible radii for each circle position,\n    ensuring no overlaps and respecting target ratios if provided.\n    \"\"\"\n    n = centers.shape[0]\n    \n    if initial_radii is None:\n        radii = np.zeros(n)\n    else:\n        radii = initial_radii.copy()\n    \n    if target_ratios is None:\n        target_ratios = np.ones(n)\n    \n    # First pass: compute maximum radius based on borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Second pass: limit by distances to other circles\n    for _ in range(3):  # Multiple passes for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    \n                    # Distribute space according to target ratios\n                    ratio_sum = target_ratios[i] + target_ratios[j]\n                    max_radius_i = dist * target_ratios[i] / ratio_sum\n                    \n                    if radii[i] > max_radius_i:\n                        radii[i] = max_radius_i\n    \n    return radii\n\ndef maximize_radii(centers):\n    \"\"\"\n    Maximize the radii of all circles using a more aggressive approach\n    that prioritizes the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # Start with maximum possible radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Iteratively adjust radii to avoid overlaps\n    for _ in range(5):  # Multiple iterations for convergence\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                current_sum = radii[i] + radii[j]\n                \n                if current_sum > dist:\n                    # Overlapping circles - adjust proportionally to current radii\n                    ratio = dist / current_sum\n                    radii[i] *= ratio\n                    radii[j] *= ratio\n    \n    return radii\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"\n    Final validation to ensure the packing is valid.\n    Makes small adjustments if necessary.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Check for border violations\n    for i in range(n):\n        x, y = centers[i]\n        r = radii[i]\n        \n        # Adjust position if too close to border\n        if x - r < 0:\n            centers[i, 0] = r\n        elif x + r > 1:\n            centers[i, 0] = 1 - r\n            \n        if y - r < 0:\n            centers[i, 1] = r\n        elif y + r > 1:\n            centers[i, 1] = 1 - r\n    \n    # Check for circle overlaps\n    for _ in range(3):  # Multiple passes\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    # Reduce radii slightly to eliminate overlap\n                    scale = 0.99 * dist / min_dist\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern with variable-sized circles and multi-stage optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a multi-stage optimization approach\n    centers, radii = initialize_specialized_pattern()\n    \n    # First optimization stage - coarse adjustment\n    centers, radii = optimize_packing(centers, radii, iterations=150, \n                                     learning_rate=0.05, \n                                     repulsion_factor=0.12,\n                                     attraction_factor=0.012)\n    \n    # Second optimization stage - fine tuning\n    centers, radii = optimize_packing(centers, radii, iterations=200, \n                                     learning_rate=0.01, \n                                     repulsion_factor=0.06,\n                                     attraction_factor=0.006)\n    \n    # Final radius maximization\n    radii = maximize_radii(centers)\n    \n    # Final adjustment to ensure validity\n    centers, radii = ensure_valid_packing(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern known to work well for n=26.\n    Uses a combination of different sized circles arranged in a pattern\n    that accounts for edge effects.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Initialize with a pattern that places:\n    # - One large circle in the center\n    # - A ring of medium circles around it\n    # - Smaller circles in the corners and edges\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.17  # Larger central circle\n    \n    # Inner ring of 6 circles in hexagonal pattern\n    inner_ring_radius = 0.33\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi/6  # Offset by 30 degrees\n        centers[i+1] = [\n            0.5 + inner_ring_radius * np.cos(angle),\n            0.5 + inner_ring_radius * np.sin(angle)\n        ]\n        radii[i+1] = 0.12\n    \n    # Middle ring of 6 circles. Stagger this ring slightly\n    middle_ring_radius = 0.33\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i+7] = [\n            0.5 + middle_ring_radius * np.cos(angle) * 1.05,\n            0.5 + middle_ring_radius * np.sin(angle) * 1.05\n        ]\n        radii[i+7] = 0.12\n    \n    # Outer corners - 4 circles\n    corners = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    for i in range(4):\n        centers[i+13] = [\n            corners[i][0] + (0.5 - corners[i][0]) * 0.24,\n            corners[i][1] + (0.5 - corners[i][1]) * 0.24\n        ]\n        radii[i+13] = 0.10\n    \n    # Edge circles - 8 circles along the edges\n    edge_positions = [\n        [0.25, 0], [0.75, 0],  # Bottom edge\n        [0, 0.25], [0, 0.75],  # Left edge\n        [1, 0.25], [1, 0.75],  # Right edge\n        [0.25, 1], [0.75, 1]   # Top edge\n    ]\n    \n    for i in range(8):\n        centers[i+17] = [\n            edge_positions[i][0] + (0.5 - edge_positions[i][0]) * 0.20,\n            edge_positions[i][1] + (0.5 - edge_positions[i][1]) * 0.20\n        ]\n        radii[i+17] = 0.09\n    \n    # Additional circle at (0.5, 0)\n    centers[25] = [0.5, 0.13]\n    radii[25] = 0.10\n    \n    # Adjust all radii to be valid initially\n    radii = compute_valid_radii(centers, radii)\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, iterations=100, learning_rate=0.01, \n                    repulsion_factor=0.05, attraction_factor=0.01):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based approach with\n    both repulsive and attractive forces.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Define target radius ratios (larger in center, smaller at edges)\n    target_ratios = np.ones(n)\n    # Central circle gets highest priority\n    target_ratios[0] = 1.6\n    # Inner ring gets second priority\n    target_ratios[1:7] = 1.3\n    # Middle ring gets third priority\n    target_ratios[7:13] = 1.2\n    \n    # Optimization loop\n    for iteration in range(iterations):\n        # Calculate forces\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle interactions\n        for i in range(n):\n            for j in range(i + 1, n):\n                vec = centers[i] - centers[j]\n                dist = np.sqrt(np.sum(vec**2))\n                \n                # Normalize direction vector\n                direction = vec / (dist + 1e-10)\n                \n                # Repulsive force if overlapping\n                min_dist = radii[i] + radii[j]\n                if dist < min_dist:\n                    force_mag = repulsion_factor * (min_dist - dist)**1.1\n                    forces[i] += force_mag * direction\n                    forces[j] -= force_mag * direction\n                \n                # Weak attractive force to maintain structure\n                else:\n                    force_mag = attraction_factor * (min_dist - dist) / (dist + 0.1)\n                    forces[i] += force_mag * direction * 0.5 # Reduced attraction\n                    forces[j] -= force_mag * direction * 0.5 # Reduced attraction\n        \n        # Border forces - stronger near edges\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left border\n            if x < r:\n                forces[i, 0] += repulsion_factor * 2.2 * (r - x)**1.1\n            # Right border\n            if x > 1 - r:\n                forces[i, 0] -= repulsion_factor * 2.2 * (x - (1 - r))**1.1\n            # Bottom border\n            if y < r:\n                forces[i, 1] += repulsion_factor * 2.2 * (r - y)**1.1\n            # Top border\n            if y > 1 - r:\n                forces[i, 1] -= repulsion_factor * 2.2 * (y - (1 - r))**1.1\n        \n        # Apply forces with adaptive learning rate\n        current_lr = learning_rate * (1 - iteration/iterations)**0.6\n        centers += current_lr * forces\n        \n        # Ensure centers stay within bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Recompute radii based on current positions\n        if iteration % 5 == 0:\n            radii = compute_valid_radii(centers, radii, target_ratios)\n    \n    return centers, radii\n\ndef compute_valid_radii(centers, initial_radii=None, target_ratios=None):\n    \"\"\"\n    Compute the maximum possible radii for each circle position,\n    ensuring no overlaps and respecting target ratios if provided.\n    \"\"\"\n    n = centers.shape[0]\n    \n    if initial_radii is None:\n        radii = np.zeros(n)\n    else:\n        radii = initial_radii.copy()\n    \n    if target_ratios is None:\n        target_ratios = np.ones(n)\n    \n    # First pass: compute maximum radius based on borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Second pass: limit by distances to other circles\n    for _ in range(4):  # Multiple passes for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    \n                    # Distribute space according to target ratios\n                    ratio_sum = target_ratios[i] + target_ratios[j]\n                    max_radius_i = (dist / ratio_sum) * target_ratios[i] * 0.99 #slightly smaller radii\n                    \n                    if radii[i] > max_radius_i:\n                        radii[i] = max_radius_i\n    \n    return radii\n\ndef maximize_radii(centers):\n    \"\"\"\n    Maximize the radii of all circles using a more aggressive approach\n    that prioritizes the sum of radii.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # Start with maximum possible radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Iteratively adjust radii to avoid overlaps\n    for _ in range(6):  # Multiple iterations for convergence\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                current_sum = radii[i] + radii[j]\n                \n                if current_sum > dist:\n                    # Overlapping circles - adjust proportionally to current radii\n                    ratio = dist / current_sum\n                    radii[i] *= ratio * 0.995 # reduce a little more\n                    radii[j] *= ratio * 0.995 # reduce a little more\n    \n    return radii\n\ndef ensure_valid_packing(centers, radii):\n    \"\"\"\n    Final validation to ensure the packing is valid.\n    Makes small adjustments if necessary.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Check for border violations\n    for i in range(n):\n        x, y = centers[i]\n        r = radii[i]\n        \n        # Adjust position if too close to border\n        if x - r < 0:\n            centers[i, 0] = r\n        elif x + r > 1:\n            centers[i, 0] = 1 - r\n            \n        if y - r < 0:\n            centers[i, 1] = r\n        elif y + r > 1:\n            centers[i, 1] = 1 - r\n    \n    # Check for circle overlaps\n    for _ in range(4):  # Multiple passes\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    # Reduce radii slightly to eliminate overlap\n                    scale = 0.98 * dist / min_dist # reduce radii more\n                    radii[i] *= scale\n                    radii[j] *= scale\n    \n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}