{"id": "b3b83603-6555-4dd3-95dc-d1b7fea28f9e", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a carefully designed pattern\n    centers, radii = initialize_pattern(n)\n\n    # Optimization phases\n    centers, radii = optimize(centers, radii, iterations=750)  # Increased iterations\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern(n):\n    \"\"\"\n    Initialize circle positions and radii based on a hybrid hexagonal/corner packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial guess for radii\n    initial_radius = 0.09\n\n    # Hexagonal core (1 central + 6 around it = 7)\n    radii[:7] = initial_radius\n    centers[0] = [0.5, 0.5]\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + 2 * initial_radius * np.cos(angle), 0.5 + 2 * initial_radius * np.sin(angle)]\n\n    # Second layer of hexagon (12 circles = 19 total)\n    radii[7:19] = initial_radius * 0.95 #slightly smaller second layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + 4 * initial_radius * np.cos(angle), 0.5 + 4 * initial_radius * np.sin(angle)]\n\n    # Corner circles (4 circles)\n    radii[19:23] = initial_radius * 0.85  # Even smaller corner circles\n    centers[19] = [radii[19], radii[19]]\n    centers[20] = [1 - radii[20], radii[20]]\n    centers[21] = [radii[21], 1 - radii[21]]\n    centers[22] = [1 - radii[22], 1 - radii[22]]\n\n    # Edge circles (3 circles)\n    radii[23:] = initial_radius * 0.8\n    centers[23] = [0.5, radii[23]]\n    centers[24] = [0.5, 1 - radii[24]]\n    centers[25] = [radii[25], 0.5]\n\n    return centers, radii\n\n\ndef optimize(centers, radii, iterations):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 15.0  # Increased repulsion\n    wall_repulsion = 15.0  # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.95  # Reduced dampening\n    radius_adjust_rate = 0.07 # Increased the rate of radius change\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Radius adjustment based on local density\n        for i in range(n):\n            # Calculate available space\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n            # Grow or shrink radius based on available space\n            radii[i] += radius_adjust_rate * available_space * dt\n\n            # Clamp radii\n            radii[i] = max(0.01, radii[i])\n            radii[i] = min(0.22, radii[i]) #Increased max radius\n\n            # Keep circle within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "e66a31b3-146a-4b2a-ae44-5c069962917e", "generation": 2, "timestamp": 1750789677.0981538, "iteration_found": 2, "metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "sum_radii": 0.0, "target_ratio": 0.0, "combined_score": 0.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- sum_radii: 0.0000\n- target_ratio: 0.0000\n- combined_score: 0.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 0.0000, sum_radii: 0.0000, target_ratio: 0.0000, combined_score: 0.0000\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4124, target_ratio: 0.9155, combined_score: 0.9155, eval_time: 8.2766\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.7040)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (8.2766)\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a carefully designed pattern\n    centers, radii = initialize_pattern(n)\n\n    # Optimization phases\n    centers, radii = optimize(centers, radii, iterations=500)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern(n):\n    \"\"\"\n    Initialize circle positions and radii based on a hybrid hexagonal/corner packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Hexagonal core (19 circles)\n    radii[:19] = 0.095\n    centers[0] = [0.5, 0.5]\n    count = 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + 2 * radii[0] * np.cos(angle), 0.5 + 2 * radii[0] * np.sin(angle)]\n        count += 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        centers[count] = [0.5 + 4 * radii[0] * np.cos(angle), 0.5 + 4 * radii[0] * np.sin(angle)]\n        count += 1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[count] = [0.5 + 6 * radii[0] * np.cos(angle), 0.5 + 6 * radii[0] * np.sin(angle)]\n        count += 1\n\n    # Corner circles (4 circles)\n    radii[19:23] = 0.08\n    centers[19] = [radii[19], radii[19]]\n    centers[20] = [1 - radii[20], radii[20]]\n    centers[21] = [radii[21], 1 - radii[21]]\n    centers[22] = [1 - radii[22], 1 - radii[22]]\n\n    # Edge circles (3 circles)\n    radii[23:] = 0.075\n    centers[23] = [0.5, radii[23]]\n    centers[24] = [0.5, 1 - radii[24]]\n    centers[25] = [radii[25], 0.5]\n\n    return centers, radii\n\n\ndef optimize(centers, radii, iterations):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 10.0\n    wall_repulsion = 10.0\n    dt = 0.01\n    dampening = 0.98\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Radius adjustment based on local density\n        for i in range(n):\n            # Calculate available space\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n            # Grow or shrink radius based on available space\n            radii[i] += 0.05 * available_space * dt\n\n            # Clamp radii\n            radii[i] = max(0.01, radii[i])\n            radii[i] = min(0.2, radii[i])\n\n            # Keep circle within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # Initialize with a carefully designed pattern\n    centers, radii = initialize_pattern(n)\n\n    # Optimization phases\n    centers, radii = optimize(centers, radii, iterations=750)  # Increased iterations\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_pattern(n):\n    \"\"\"\n    Initialize circle positions and radii based on a hybrid hexagonal/corner packing.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial guess for radii\n    initial_radius = 0.09\n\n    # Hexagonal core (1 central + 6 around it = 7)\n    radii[:7] = initial_radius\n    centers[0] = [0.5, 0.5]\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + 2 * initial_radius * np.cos(angle), 0.5 + 2 * initial_radius * np.sin(angle)]\n\n    # Second layer of hexagon (12 circles = 19 total)\n    radii[7:19] = initial_radius * 0.95 #slightly smaller second layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + 4 * initial_radius * np.cos(angle), 0.5 + 4 * initial_radius * np.sin(angle)]\n\n    # Corner circles (4 circles)\n    radii[19:23] = initial_radius * 0.85  # Even smaller corner circles\n    centers[19] = [radii[19], radii[19]]\n    centers[20] = [1 - radii[20], radii[20]]\n    centers[21] = [radii[21], 1 - radii[21]]\n    centers[22] = [1 - radii[22], 1 - radii[22]]\n\n    # Edge circles (3 circles)\n    radii[23:] = initial_radius * 0.8\n    centers[23] = [0.5, radii[23]]\n    centers[24] = [0.5, 1 - radii[24]]\n    centers[25] = [radii[25], 0.5]\n\n    return centers, radii\n\n\ndef optimize(centers, radii, iterations):\n    \"\"\"\n    Optimize circle positions and radii using a physics-based simulation.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 15.0  # Increased repulsion\n    wall_repulsion = 15.0  # Increased wall repulsion\n    dt = 0.01\n    dampening = 0.95  # Reduced dampening\n    radius_adjust_rate = 0.07 # Increased the rate of radius change\n\n    for _ in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Radius adjustment based on local density\n        for i in range(n):\n            # Calculate available space\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n            # Grow or shrink radius based on available space\n            radii[i] += radius_adjust_rate * available_space * dt\n\n            # Clamp radii\n            radii[i] = max(0.01, radii[i])\n            radii[i] = min(0.22, radii[i]) #Increased max radius\n\n            # Keep circle within bounds\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}