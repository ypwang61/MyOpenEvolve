{"id": "050dc8ba-b505-401d-944a-d36dd5609440", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Constants\n    n = 26\n    \n    # Try multiple initialization strategies and keep the best result\n    best_centers = None\n    best_radii = None\n    best_sum = 0\n    \n    # Strategy 1: Specialized pattern with variable-sized circles\n    centers1, radii1 = specialized_pattern()\n    sum1 = np.sum(radii1)\n    \n    # Strategy 2: Grid-based initialization with corner optimization\n    centers2, radii2 = grid_with_corners()\n    sum2 = np.sum(radii2)\n    \n    # Strategy 3: Hexagonal-based pattern with edge optimization\n    centers3, radii3 = hexagonal_pattern()\n    sum3 = np.sum(radii3)\n    \n    # Select the best initialization\n    if sum1 >= sum2 and sum1 >= sum3:\n        centers, radii = centers1, radii1\n    elif sum2 >= sum1 and sum2 >= sum3:\n        centers, radii = centers2, radii2\n    else:\n        centers, radii = centers3, radii3\n    \n    # Multi-stage optimization\n    # Stage 1: Greedy radius optimization\n    centers, radii = optimize_radii(centers, radii)\n    \n    # Stage 2: Position refinement with fixed radii\n    centers, radii = refine_positions(centers, radii)\n    \n    # Stage 3: Final radius optimization\n    centers, radii = optimize_radii(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef specialized_pattern():\n    \"\"\"\n    Create a specialized pattern that places larger circles at strategic locations\n    and smaller circles to fill gaps.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 large circles in the corners\n    corner_positions = [(0.15, 0.15), (0.15, 0.85), (0.85, 0.15), (0.85, 0.85)]\n    corner_radius = 0.15\n    for i, pos in enumerate(corner_positions):\n        centers[i] = pos\n        radii[i] = corner_radius\n    \n    # Place circles along the edges\n    edge_count = 12\n    edge_positions = []\n    \n    # Top edge\n    for i in range(3):\n        edge_positions.append((0.25 + i * 0.25, 0.12))\n    \n    # Bottom edge\n    for i in range(3):\n        edge_positions.append((0.25 + i * 0.25, 0.88))\n    \n    # Left edge\n    for i in range(3):\n        edge_positions.append((0.12, 0.25 + i * 0.25))\n    \n    # Right edge\n    for i in range(3):\n        edge_positions.append((0.88, 0.25 + i * 0.25))\n    \n    edge_radius = 0.12\n    for i, pos in enumerate(edge_positions):\n        centers[i + 4] = pos\n        radii[i + 4] = edge_radius\n    \n    # Place remaining circles in a grid in the center\n    remaining = n - 4 - edge_count\n    grid_size = int(np.ceil(np.sqrt(remaining)))\n    grid_spacing = 0.5 / grid_size\n    \n    count = 4 + edge_count\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = (0.3 + i * grid_spacing, 0.3 + j * grid_spacing)\n                radii[count] = 0.08\n                count += 1\n    \n    # Adjust radii to prevent overlaps and stay within bounds\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef grid_with_corners():\n    \"\"\"\n    Create a grid-based pattern with special attention to corners.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place large circles in the corners\n    centers[0] = [0.15, 0.15]\n    centers[1] = [0.15, 0.85]\n    centers[2] = [0.85, 0.15]\n    centers[3] = [0.85, 0.85]\n    \n    # Place a central circle\n    centers[4] = [0.5, 0.5]\n    \n    # Place remaining circles in a grid pattern\n    grid_size = 5\n    spacing = 0.8 / (grid_size - 1)\n    \n    count = 5\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.1 + i * spacing\n                y = 0.1 + j * spacing\n                \n                # Skip positions that are too close to existing circles\n                too_close = False\n                for k in range(count):\n                    dist = np.sqrt((x - centers[k, 0])**2 + (y - centers[k, 1])**2)\n                    if dist < 0.15:\n                        too_close = True\n                        break\n                \n                if not too_close:\n                    centers[count] = [x, y]\n                    count += 1\n                    \n                    # Break if we've placed all circles\n                    if count >= n:\n                        break\n    \n    # If we haven't placed all circles, fill in remaining positions\n    while count < n:\n        x = 0.1 + np.random.rand() * 0.8\n        y = 0.1 + np.random.rand() * 0.8\n        \n        # Check if position is not too close to existing circles\n        too_close = False\n        for k in range(count):\n            dist = np.sqrt((x - centers[k, 0])**2 + (y - centers[k, 1])**2)\n            if dist < 0.12:\n                too_close = True\n                break\n        \n        if not too_close:\n            centers[count] = [x, y]\n            count += 1\n    \n    # Compute maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef hexagonal_pattern():\n    \"\"\"\n    Create a hexagonal-based pattern with edge optimization.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    \n    # First hexagonal ring (6 circles)\n    angles = np.linspace(0, 2 * np.pi, 7)[:-1]\n    ring_radius = 0.2\n    for i in range(1, 7):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i-1]),\n                      0.5 + ring_radius * np.sin(angles[i-1])]\n    \n    # Second hexagonal ring (12 circles)\n    angles = np.linspace(0, 2 * np.pi, 13)[:-1]\n    ring_radius = 0.4\n    for i in range(7, 19):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i-7]),\n                      0.5 + ring_radius * np.sin(angles[i-7])]\n    \n    # Place remaining circles at strategic locations\n    # Four corners\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.1, 0.9]\n    centers[21] = [0.9, 0.1]\n    centers[22] = [0.9, 0.9]\n    \n    # Middle of edges\n    centers[23] = [0.5, 0.1]\n    centers[24] = [0.1, 0.5]\n    centers[25] = [0.9, 0.5]\n    \n    # Compute maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Then, limit by distances to other circles\n    for _ in range(5):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current sizes\n                        total = radii[i] + radii[j]\n                        if total > 0:  # Avoid division by zero\n                            ratio_i = radii[i] / total\n                            ratio_j = radii[j] / total\n                            radii[i] = ratio_i * dist\n                            radii[j] = ratio_j * dist\n    \n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                max_r_i = dist - radii[j]\n                if max_r_i < radii[i]:\n                    radii[i] = max(0.0, max_r_i)\n    \n    return radii\n\ndef optimize_radii(centers, radii, iterations=50):\n    \"\"\"\n    Optimize the radii of circles to maximize their sum while avoiding overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    \n    for _ in range(iterations):\n        # Compute maximum possible radii\n        new_radii = np.zeros(n)\n        \n        # First, limit by distance to square borders\n        for i in range(n):\n            x, y = centers[i]\n            new_radii[i] = min(x, y, 1 - x, 1 - y)\n        \n        # Then, limit by distances to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    max_radius = dist - radii[j]\n                    if max_radius < new_radii[i]:\n                        new_radii[i] = max(0.0, max_radius)\n        \n        # Update radii with a weighted average to ensure smooth convergence\n        radii = 0.7 * new_radii + 0.3 * radii\n    \n    return centers, radii\n\ndef refine_positions(centers, radii, iterations=100):\n    \"\"\"\n    Refine the positions of circles to reduce overlaps and maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    \n    for _ in range(iterations):\n        # Calculate forces between circles\n        forces = np.zeros((n, 2))\n        \n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    \n                    # If circles overlap, apply repulsive force\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        # Force magnitude inversely proportional to distance\n                        magnitude = (min_dist - dist) / min_dist\n                        direction = diff / (dist + 1e-10)  # Avoid division by zero\n                        forces[i] += 0.01 * magnitude * direction\n        \n        # Apply forces to update positions\n        centers += forces\n        \n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Final adjustment of radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "819ba30d-bb38-4d10-a4b9-d6a1279ae9ca", "generation": 5, "timestamp": 1750753135.0494137, "iteration_found": 86, "metrics": {"validity": 1.0, "sum_radii": 2.305902193438084, "target_ratio": 0.8751051967506961, "combined_score": 0.8751051967506961, "eval_time": 0.8052585124969482}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.2645356296976709, "target_ratio": 0.4798996697144861, "combined_score": 0.4798996697144861, "eval_time": 7.59053635597229}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.2645\n- target_ratio: 0.4799\n- combined_score: 0.4799\n- eval_time: 7.5905\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.8281)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2924), Performs well on target_ratio (0.4905), Performs well on combined_score (0.4905), Performs well on eval_time (0.8671)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach and gradient optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics-based refinement.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialization: Start with a good initial guess using a combined hexagonal and grid pattern\n    centers, radii = initialize_packing()\n\n    # Optimization: Refine the arrangement using a physics-based simulation\n    centers, radii = refine_packing(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_packing():\n    \"\"\"\n    Initialize the circle packing with a combination of hexagonal and grid arrangements.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15  # Larger radius for central circle\n\n    # Hexagonal ring around the center (6 circles)\n    angles = np.linspace(0, 2 * np.pi, 7)[:-1]\n    ring_radius = 0.25\n    for i in range(1, 7):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i - 1]),\n                      0.5 + ring_radius * np.sin(angles[i - 1])]\n        radii[i] = 0.12\n\n    # Grid-like arrangement for the remaining circles (19 circles)\n    grid_size = 4\n    spacing = 0.8 / (grid_size - 1)  # Adjust spacing to fit within the square\n    count = 7\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = [0.1 + i * spacing, 0.1 + j * spacing]\n                radii[count] = 0.08 + np.random.rand() * 0.03  # Introduce some variation\n                count += 1\n\n    # Adjust radii based on environment\n    radii = compute_max_radii(centers)\n    return centers, radii\n\ndef refine_packing(centers, radii, iterations=500, repulsion_strength=0.01, step_size=0.005):\n    \"\"\"\n    Refine the circle packing using a physics-based simulation with repulsion forces.\n    \"\"\"\n    n = centers.shape[0]\n\n    for _ in range(iterations):\n        # Calculate repulsion forces between circles\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    distance = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    overlap = radii[i] + radii[j] - distance\n                    if overlap > 0:\n                        # Repulsion force proportional to overlap and inverse square of distance\n                        direction = (centers[i] - centers[j]) / distance\n                        forces[i] += repulsion_strength * overlap * direction\n\n        # Move circles based on forces, but keep them within the unit square\n        centers += forces * step_size\n\n        # Reflect circles off the walls\n        for i in range(n):\n            if centers[i, 0] - radii[i] < 0:\n                centers[i, 0] = radii[i]\n            if centers[i, 0] + radii[i] > 1:\n                centers[i, 0] = 1 - radii[i]\n            if centers[i, 1] - radii[i] < 0:\n                centers[i, 1] = radii[i]\n            if centers[i, 1] + radii[i] > 1:\n                centers[i, 1] = 1 - radii[i]\n\n        # Adjust radii to avoid overlaps\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, limit by distances to other circles\n    for _ in range(3):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current sizes\n                        total = radii[i] + radii[j]\n                        if total > 0:  # Avoid division by zero\n                            ratio_i = radii[i] / total\n                            ratio_j = radii[j] / total\n                            radii[i] = ratio_i * dist\n                            radii[j] = ratio_j * dist\n\n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                max_r_i = (dist - radii[j]) / 2.0\n                if max_r_i < radii[i]:\n                    radii[i] = max(0.0, max_r_i)\n                max_r_j = (dist - radii[i]) / 2.0\n                if max_r_j < radii[j]:\n                    radii[j] = max(0.0, max_r_j)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["Looking at the performance metrics and history, I see that the current program has regressed significantly from previous attempts. The best performance achieved a sum of radii of 2.3697, while the current version only reaches 1.2645. Let's create a completely new implementation that builds on what worked in the past and incorporates advanced circle packing strategies.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Constants\n    n = 26\n    \n    # Try multiple initialization strategies and keep the best result\n    best_centers = None\n    best_radii = None\n    best_sum = 0\n    \n    # Strategy 1: Specialized pattern with variable-sized circles\n    centers1, radii1 = specialized_pattern()\n    sum1 = np.sum(radii1)\n    \n    # Strategy 2: Grid-based initialization with corner optimization\n    centers2, radii2 = grid_with_corners()\n    sum2 = np.sum(radii2)\n    \n    # Strategy 3: Hexagonal-based pattern with edge optimization\n    centers3, radii3 = hexagonal_pattern()\n    sum3 = np.sum(radii3)\n    \n    # Select the best initialization\n    if sum1 >= sum2 and sum1 >= sum3:\n        centers, radii = centers1, radii1\n    elif sum2 >= sum1 and sum2 >= sum3:\n        centers, radii = centers2, radii2\n    else:\n        centers, radii = centers3, radii3\n    \n    # Multi-stage optimization\n    # Stage 1: Greedy radius optimization\n    centers, radii = optimize_radii(centers, radii)\n    \n    # Stage 2: Position refinement with fixed radii\n    centers, radii = refine_positions(centers, radii)\n    \n    # Stage 3: Final radius optimization\n    centers, radii = optimize_radii(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef specialized_pattern():\n    \"\"\"\n    Create a specialized pattern that places larger circles at strategic locations\n    and smaller circles to fill gaps.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 large circles in the corners\n    corner_positions = [(0.15, 0.15), (0.15, 0.85), (0.85, 0.15), (0.85, 0.85)]\n    corner_radius = 0.15\n    for i, pos in enumerate(corner_positions):\n        centers[i] = pos\n        radii[i] = corner_radius\n    \n    # Place circles along the edges\n    edge_count = 12\n    edge_positions = []\n    \n    # Top edge\n    for i in range(3):\n        edge_positions.append((0.25 + i * 0.25, 0.12))\n    \n    # Bottom edge\n    for i in range(3):\n        edge_positions.append((0.25 + i * 0.25, 0.88))\n    \n    # Left edge\n    for i in range(3):\n        edge_positions.append((0.12, 0.25 + i * 0.25))\n    \n    # Right edge\n    for i in range(3):\n        edge_positions.append((0.88, 0.25 + i * 0.25))\n    \n    edge_radius = 0.12\n    for i, pos in enumerate(edge_positions):\n        centers[i + 4] = pos\n        radii[i + 4] = edge_radius\n    \n    # Place remaining circles in a grid in the center\n    remaining = n - 4 - edge_count\n    grid_size = int(np.ceil(np.sqrt(remaining)))\n    grid_spacing = 0.5 / grid_size\n    \n    count = 4 + edge_count\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = (0.3 + i * grid_spacing, 0.3 + j * grid_spacing)\n                radii[count] = 0.08\n                count += 1\n    \n    # Adjust radii to prevent overlaps and stay within bounds\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef grid_with_corners():\n    \"\"\"\n    Create a grid-based pattern with special attention to corners.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place large circles in the corners\n    centers[0] = [0.15, 0.15]\n    centers[1] = [0.15, 0.85]\n    centers[2] = [0.85, 0.15]\n    centers[3] = [0.85, 0.85]\n    \n    # Place a central circle\n    centers[4] = [0.5, 0.5]\n    \n    # Place remaining circles in a grid pattern\n    grid_size = 5\n    spacing = 0.8 / (grid_size - 1)\n    \n    count = 5\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = 0.1 + i * spacing\n                y = 0.1 + j * spacing\n                \n                # Skip positions that are too close to existing circles\n                too_close = False\n                for k in range(count):\n                    dist = np.sqrt((x - centers[k, 0])**2 + (y - centers[k, 1])**2)\n                    if dist < 0.15:\n                        too_close = True\n                        break\n                \n                if not too_close:\n                    centers[count] = [x, y]\n                    count += 1\n                    \n                    # Break if we've placed all circles\n                    if count >= n:\n                        break\n    \n    # If we haven't placed all circles, fill in remaining positions\n    while count < n:\n        x = 0.1 + np.random.rand() * 0.8\n        y = 0.1 + np.random.rand() * 0.8\n        \n        # Check if position is not too close to existing circles\n        too_close = False\n        for k in range(count):\n            dist = np.sqrt((x - centers[k, 0])**2 + (y - centers[k, 1])**2)\n            if dist < 0.12:\n                too_close = True\n                break\n        \n        if not too_close:\n            centers[count] = [x, y]\n            count += 1\n    \n    # Compute maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef hexagonal_pattern():\n    \"\"\"\n    Create a hexagonal-based pattern with edge optimization.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    \n    # First hexagonal ring (6 circles)\n    angles = np.linspace(0, 2 * np.pi, 7)[:-1]\n    ring_radius = 0.2\n    for i in range(1, 7):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i-1]),\n                      0.5 + ring_radius * np.sin(angles[i-1])]\n    \n    # Second hexagonal ring (12 circles)\n    angles = np.linspace(0, 2 * np.pi, 13)[:-1]\n    ring_radius = 0.4\n    for i in range(7, 19):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i-7]),\n                      0.5 + ring_radius * np.sin(angles[i-7])]\n    \n    # Place remaining circles at strategic locations\n    # Four corners\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.1, 0.9]\n    centers[21] = [0.9, 0.1]\n    centers[22] = [0.9, 0.9]\n    \n    # Middle of edges\n    centers[23] = [0.5, 0.1]\n    centers[24] = [0.1, 0.5]\n    centers[25] = [0.9, 0.5]\n    \n    # Compute maximum possible radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Then, limit by distances to other circles\n    for _ in range(5):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current sizes\n                        total = radii[i] + radii[j]\n                        if total > 0:  # Avoid division by zero\n                            ratio_i = radii[i] / total\n                            ratio_j = radii[j] / total\n                            radii[i] = ratio_i * dist\n                            radii[j] = ratio_j * dist\n    \n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                max_r_i = dist - radii[j]\n                if max_r_i < radii[i]:\n                    radii[i] = max(0.0, max_r_i)\n    \n    return radii\n\ndef optimize_radii(centers, radii, iterations=50):\n    \"\"\"\n    Optimize the radii of circles to maximize their sum while avoiding overlaps.\n    \"\"\"\n    n = centers.shape[0]\n    \n    for _ in range(iterations):\n        # Compute maximum possible radii\n        new_radii = np.zeros(n)\n        \n        # First, limit by distance to square borders\n        for i in range(n):\n            x, y = centers[i]\n            new_radii[i] = min(x, y, 1 - x, 1 - y)\n        \n        # Then, limit by distances to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    max_radius = dist - radii[j]\n                    if max_radius < new_radii[i]:\n                        new_radii[i] = max(0.0, max_radius)\n        \n        # Update radii with a weighted average to ensure smooth convergence\n        radii = 0.7 * new_radii + 0.3 * radii\n    \n    return centers, radii\n\ndef refine_positions(centers, radii, iterations=100):\n    \"\"\"\n    Refine the positions of circles to reduce overlaps and maximize radii.\n    \"\"\"\n    n = centers.shape[0]\n    \n    for _ in range(iterations):\n        # Calculate forces between circles\n        forces = np.zeros((n, 2))\n        \n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    diff = centers[i] - centers[j]\n                    dist = np.sqrt(np.sum(diff**2))\n                    \n                    # If circles overlap, apply repulsive force\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        # Force magnitude inversely proportional to distance\n                        magnitude = (min_dist - dist) / min_dist\n                        direction = diff / (dist + 1e-10)  # Avoid division by zero\n                        forces[i] += 0.01 * magnitude * direction\n        \n        # Apply forces to update positions\n        centers += forces\n        \n        # Ensure circles stay within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    # Final adjustment of radii\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\nI've completely redesigned the approach with these key improvements:\n\n1. **Multiple initialization strategies**: The program now tries three different initialization patterns and selects the best one:\n   - A specialized pattern with strategic placement of larger circles at corners and edges\n   - A grid-based pattern with optimized corner placement\n   - A hexagonal pattern with edge optimization\n\n2. **Multi-stage optimization**: The optimization process now happens in three distinct stages:\n   - Initial radius optimization to maximize the sum while maintaining validity\n   - Position refinement that slightly adjusts circle positions to reduce overlaps\n   - Final radius optimization to ensure maximum possible radii\n\n3. **Improved radius computation**: The algorithm for computing maximum possible radii has been enhanced with multiple iterations for better convergence and proportional adjustment.\n\n4. **Efficient implementation**: The code has been optimized for performance by reducing unnecessary computations and focusing on the most promising arrangements.\n\nThis approach should significantly improve the sum of radii toward the target of 2.635, as it incorporates insights from circle packing literature about optimal arrangements for n=26 circles, with special attention to edge effects and variable-sized circles."]}}}