{"id": "4f86ccc9-0db0-4f02-bc36-f43402f5ea14", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent and adaptive radii\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial Layout - Hybrid approach inspired by hexagonal packing with adjustments\n    # Larger circles in the center, smaller towards the edges\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.21  # Central circle, slightly larger\n\n    # Inner hexagon (6 circles)\n    r1 = 0.25\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.12 # Increase radius\n\n    # Middle ring (12 circles) - slightly distorted hexagon\n    r2 = 0.44\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.09 # Adjust radius, slightly larger\n\n    # Corners (4 circles) - more strategic placement\n    corner_offset = 0.10\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.075 #radius for corners, slightly larger\n\n    # Edges (4 circles) - strategic placement\n    edge_offset = 0.07\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.065 # radius for edges, slightly larger\n\n    # Optimization using a physics-inspired approach with gradient descent\n    learning_rate = 0.01  # Control the step size of the gradient descent\n    iterations = 200      # Increased iterations for convergence\n    repulsion_strength = 15 # Increased repulsion strength\n    wall_repulsion_strength = 7 # Increased wall repulsion strength\n\n    for _ in range(iterations):\n        # Compute forces between circles (repulsion)\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Apply a repulsive force inversely proportional to the distance\n                        direction = (centers[i] - centers[j]) / dist\n                        force_magnitude = overlap * repulsion_strength  # Tune the force strength\n                        forces[i] += direction * force_magnitude\n\n        # Compute forces from the walls (repulsion)\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each wall\n            if x < r:\n                forces[i][0] += (r - x) * wall_repulsion_strength\n            if x > 1 - r:\n                forces[i][0] -= (x - (1 - r)) * wall_repulsion_strength\n            if y < r:\n                forces[i][1] += (r - y) * wall_repulsion_strength\n            if y > 1 - r:\n                forces[i][1] -= (y - (1 - r)) * wall_repulsion_strength\n\n        # Update positions based on forces (gradient descent)\n        centers += forces * learning_rate\n\n        # Keep circles within the unit square\n        for i in range(n):\n            centers[i][0] = np.clip(centers[i][0], radii[i], 1 - radii[i])\n            centers[i][1] = np.clip(centers[i][1], radii[i], 1 - radii[i])\n\n        # Adaptive radius adjustment based on local density\n        for i in range(n):\n            # Distance to walls\n            dist_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Distance to other circles\n            dist_to_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2) - (radii[i] + radii[j])**2) # correct distance calculation to account for radii.\n                    if dist > 0:\n                         dist_to_circles = min(dist_to_circles, dist)\n                    else:\n                        dist_to_circles = 0\n\n            # Update radius, allowing for more growth in each iteration\n            radii[i] = min(dist_to_walls, dist_to_circles/2)  # Divide by 2 to leave space.\n            radii[i] = max(radii[i], 0.01)  # Ensure minimum radius\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "2c7d361e-5313-4cef-bcd6-72e75cf4e702", "generation": 2, "timestamp": 1750749918.8788424, "iteration_found": 4, "metrics": {"validity": 1.0, "sum_radii": 1.4259841576118968, "target_ratio": 0.541170458296735, "combined_score": 0.541170458296735, "eval_time": 1.4701108932495117}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.986449597497998, "target_ratio": 0.7538708149897526, "combined_score": 0.7538708149897526, "eval_time": 1.0965814590454102}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.9864\n- target_ratio: 0.7539\n- combined_score: 0.7539\n- eval_time: 1.0966\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.1289, target_ratio: 0.8079, combined_score: 0.8079, eval_time: 0.5716\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 0.0000, sum_radii: 0.0000, target_ratio: 0.0000, combined_score: 0.0000, eval_time: 5.3659\n- Outcome: Mixed results\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9864, target_ratio: 0.7539, combined_score: 0.7539, eval_time: 1.0966\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.0633)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.1289), Performs well on target_ratio (0.8079), Performs well on combined_score (0.8079), Performs well on eval_time (0.5716)\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial Layout - Hybrid approach inspired by hexagonal packing with adjustments\n    # Larger circles in the center, smaller towards the edges\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.22  # Central circle, slightly larger\n\n    # Inner hexagon (6 circles)\n    r1 = 0.25\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.13 # Increase radius\n\n    # Middle ring (12 circles) - slightly distorted hexagon\n    r2 = 0.44\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.095 # Adjust radius, slightly larger\n\n    # Corners (4 circles) - more strategic placement\n    corner_offset = 0.10\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.08 #radius for corners, slightly larger\n\n    # Edges (4 circles) - strategic placement\n    edge_offset = 0.07\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.07 # radius for edges, slightly larger\n\n    # Optimization using a physics-inspired approach with gradient descent\n    learning_rate = 0.01  # Control the step size of the gradient descent\n    iterations = 150      # Increased iterations for convergence\n\n    for _ in range(iterations):\n        # Compute forces between circles (repulsion)\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Apply a repulsive force inversely proportional to the distance\n                        direction = (centers[i] - centers[j]) / dist\n                        force_magnitude = overlap * 10  # Tune the force strength\n                        forces[i] += direction * force_magnitude\n\n        # Compute forces from the walls (repulsion)\n        wall_force_magnitude = 5  # Tune wall repulsion strength\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each wall\n            if x < r:\n                forces[i][0] += (r - x) * wall_force_magnitude\n            if x > 1 - r:\n                forces[i][0] -= (x - (1 - r)) * wall_force_magnitude\n            if y < r:\n                forces[i][1] += (r - y) * wall_force_magnitude\n            if y > 1 - r:\n                forces[i][1] -= (y - (1 - r)) * wall_force_magnitude\n\n        # Update positions based on forces (gradient descent)\n        centers += forces * learning_rate\n\n        # Keep circles within the unit square\n        for i in range(n):\n            centers[i][0] = np.clip(centers[i][0], radii[i], 1 - radii[i])\n            centers[i][1] = np.clip(centers[i][1], radii[i], 1 - radii[i])\n\n        # Update radii based on available space - more aggressive growth\n        for i in range(n):\n            # Distance to walls\n            dist_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Distance to other circles\n            dist_to_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    dist_to_circles = min(dist_to_circles, dist - radii[j])\n\n            # Update radius, allowing for more growth in each iteration\n            radii[i] = min(dist_to_walls, dist_to_circles)\n            radii[i] = min(radii[i], radii[i] * 1.08) # increased growth factor\n\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    # This approach is more accurate than the proportional scaling\n    # We use multiple iterations to converge to a valid solution\n    for _ in range(15):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, dist - radii[j])\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent and adaptive radii\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii using a physics-inspired approach.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial Layout - Hybrid approach inspired by hexagonal packing with adjustments\n    # Larger circles in the center, smaller towards the edges\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.21  # Central circle, slightly larger\n\n    # Inner hexagon (6 circles)\n    r1 = 0.25\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n        radii[i + 1] = 0.12 # Increase radius\n\n    # Middle ring (12 circles) - slightly distorted hexagon\n    r2 = 0.44\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n        radii[i + 7] = 0.09 # Adjust radius, slightly larger\n\n    # Corners (4 circles) - more strategic placement\n    corner_offset = 0.10\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = 0.075 #radius for corners, slightly larger\n\n    # Edges (4 circles) - strategic placement\n    edge_offset = 0.07\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = 0.065 # radius for edges, slightly larger\n\n    # Optimization using a physics-inspired approach with gradient descent\n    learning_rate = 0.01  # Control the step size of the gradient descent\n    iterations = 200      # Increased iterations for convergence\n    repulsion_strength = 15 # Increased repulsion strength\n    wall_repulsion_strength = 7 # Increased wall repulsion strength\n\n    for _ in range(iterations):\n        # Compute forces between circles (repulsion)\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Apply a repulsive force inversely proportional to the distance\n                        direction = (centers[i] - centers[j]) / dist\n                        force_magnitude = overlap * repulsion_strength  # Tune the force strength\n                        forces[i] += direction * force_magnitude\n\n        # Compute forces from the walls (repulsion)\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            # Repulsion from each wall\n            if x < r:\n                forces[i][0] += (r - x) * wall_repulsion_strength\n            if x > 1 - r:\n                forces[i][0] -= (x - (1 - r)) * wall_repulsion_strength\n            if y < r:\n                forces[i][1] += (r - y) * wall_repulsion_strength\n            if y > 1 - r:\n                forces[i][1] -= (y - (1 - r)) * wall_repulsion_strength\n\n        # Update positions based on forces (gradient descent)\n        centers += forces * learning_rate\n\n        # Keep circles within the unit square\n        for i in range(n):\n            centers[i][0] = np.clip(centers[i][0], radii[i], 1 - radii[i])\n            centers[i][1] = np.clip(centers[i][1], radii[i], 1 - radii[i])\n\n        # Adaptive radius adjustment based on local density\n        for i in range(n):\n            # Distance to walls\n            dist_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Distance to other circles\n            dist_to_circles = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2) - (radii[i] + radii[j])**2) # correct distance calculation to account for radii.\n                    if dist > 0:\n                         dist_to_circles = min(dist_to_circles, dist)\n                    else:\n                        dist_to_circles = 0\n\n            # Update radius, allowing for more growth in each iteration\n            radii[i] = min(dist_to_walls, dist_to_circles/2)  # Divide by 2 to leave space.\n            radii[i] = max(radii[i], 0.01)  # Ensure minimum radius\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}