{"id": "1fe66ac4-012f-46f8-9749-aa36e45fae79", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_specialized_26,\n        initialize_pattern_hybrid_26,\n        initialize_pattern_billiard_26,\n        initialize_pattern_corner_optimized_26,\n        initialize_pattern_ring_26\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n\n        # Combine and simplify optimization stages using scipy.optimize.minimize\n        centers, radii = optimize_with_scipy(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_specialized_26(n):\n    \"\"\"\n    Initialize with a pattern specifically optimized for n=26 based on mathematical research.\n    This pattern uses a hybrid approach with variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 10 circles in outer ring\n    outer_radius = 0.08\n    for i in range(10):\n        angle = 2 * np.pi * i / 10\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid_26(n):\n    \"\"\"\n    Initialize with a hybrid pattern optimized for n=26 with strategic placement\n    of variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (6 circles)\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.09\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.11\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.085\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.07\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_billiard_26(n):\n    \"\"\"\n    Initialize with a billiard-table inspired pattern with circles along the edges\n    and a triangular pattern in the center.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n\n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n\n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n\n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n\n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n\n    radii[4:12] = edge_radius\n\n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.08\n\n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.1  # Slightly larger center circle\n\n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n\n    # Outer partial ring (7 circles)\n    outer_radius = 0.075\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi / 7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_optimized_26(n):\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal corner and edge utilization.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 4 smaller edge circles\n    small_edge_radius = 0.08\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Inner grid (10 circles)\n    inner_radius = 0.075\n    grid_positions = [0.3, 0.5, 0.7]\n\n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.11\n                else:\n                    radii[count] = inner_radius\n                count += 1\n\n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.07\n        count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_ring_26(n):\n    \"\"\"\n    Initialize with concentric rings of circles, optimized for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # First ring (8 circles)\n    ring1_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring (12 circles)\n    ring2_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 9] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n\n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.08\n\n    return centers, radii\n\n\ndef optimize_with_scipy(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j])\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i])  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i])  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i])  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i])  # y <= 1 - r\n            constraints.append(current_radii[i] - 0.01) # radii >= 0.01\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'maxiter': 500, 'ftol': 1e-5})\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "d61af460-0f8e-40d3-8da3-149ef7d9fdfb", "generation": 7, "timestamp": 1750790466.8012073, "iteration_found": 14, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: index 26 is out of bounds for axis 0 with size 26"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: index 26 is out of bounds for axis 0 with size 26"}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- combined_score: 0.0000\n- error: Program execution failed: index 26 is out of bounds for axis 0 with size 26\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4610, target_ratio: 0.9340, combined_score: 0.9340, eval_time: 12.5778\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.4636, target_ratio: 0.9350, combined_score: 0.9350, eval_time: 13.6778\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5112, target_ratio: 0.9530, combined_score: 0.9530, eval_time: 16.9667\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 4.4768)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5112), Performs well on target_ratio (0.9530), Performs well on combined_score (0.9530), Performs well on eval_time (16.9667)\n\n\n### Program 2 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n### Program 3 (Score: 2.2650)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3834), Performs well on target_ratio (0.9045), Performs well on combined_score (0.9045), Performs well on eval_time (6.1328)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: index 26 is out of bounds for axis 0 with size 26)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.1497)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_specialized_26,\n        initialize_pattern_hybrid_26,\n        initialize_pattern_billiard_26,\n        initialize_pattern_corner_optimized_26,\n        initialize_pattern_ring_26\n    ]\n    \n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n        \n        # Multi-stage optimization with specialized parameters\n        centers, radii = optimize_stage1(centers, radii, iterations=250)\n        centers, radii = optimize_stage2(centers, radii, iterations=250)\n        centers, radii = optimize_stage3(centers, radii, iterations=400)\n        \n        # Final fine-tuning with gradient-based optimization\n        centers, radii = gradient_optimization(centers, radii, iterations=100)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_specialized_26(n):\n    \"\"\"\n    Initialize with a pattern specifically optimized for n=26 based on mathematical research.\n    This pattern uses a hybrid approach with variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Place 4 large circles in corners\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n    \n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n    \n    # Place 8 circles in inner ring around center\n    inner_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n    \n    # Place 10 circles in outer ring\n    outer_radius = 0.08\n    for i in range(10):\n        angle = 2 * np.pi * i / 10\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n    \n    return centers, radii\n\n\ndef initialize_pattern_hybrid_26(n):\n    \"\"\"\n    Initialize with a hybrid pattern optimized for n=26 with strategic placement\n    of variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n    \n    # Inner ring (6 circles)\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = inner_radius\n    \n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.09\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi/8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i+7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+7] = middle_radius\n    \n    # Corner circles (4 larger circles)\n    corner_radius = 0.11\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n    \n    # Edge circles (4 medium circles)\n    edge_radius = 0.085\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n    \n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.07\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n    \n    return centers, radii\n\n\ndef initialize_pattern_billiard_26(n):\n    \"\"\"\n    Initialize with a billiard-table inspired pattern with circles along the edges\n    and a triangular pattern in the center.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # 4 corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n    \n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n    \n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n    \n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n    \n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n    \n    radii[4:12] = edge_radius\n    \n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.08\n    \n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.1  # Slightly larger center circle\n    \n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n    \n    # Outer partial ring (7 circles)\n    outer_radius = 0.075\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi/7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n    \n    return centers, radii\n\n\ndef initialize_pattern_corner_optimized_26(n):\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal corner and edge utilization.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # 4 large corner circles\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # 4 medium edge circles\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n    \n    # 4 smaller edge circles\n    small_edge_radius = 0.08\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n    \n    # Inner grid (10 circles)\n    inner_radius = 0.075\n    grid_positions = [0.3, 0.5, 0.7]\n    \n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.11\n                else:\n                    radii[count] = inner_radius\n                count += 1\n    \n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.07\n        count += 1\n    \n    return centers, radii\n\n\ndef initialize_pattern_ring_26(n):\n    \"\"\"\n    Initialize with concentric rings of circles, optimized for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n    \n    # First ring (8 circles)\n    ring1_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Second ring (12 circles)\n    ring2_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i+9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+9] = ring2_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n    \n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.08\n    \n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    using physics-based simulation with repulsion forces.\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0\n    wall_repulsion = 30.0\n    dt = 0.01\n    dampening = 0.92\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n        \n        # Circle-circle repulsion (vectorized for efficiency)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left wall\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            # Right wall\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            # Bottom wall\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            # Top wall\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0 and iter < iterations // 2:\n            centers += np.random.normal(0, 0.003 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    using a specialized growth algorithm.\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0005\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Circle-circle constraints\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                space_ij = dist - radii[i] - radii[j]\n                \n                # Update available space for both circles\n                available_space[i] = min(available_space[i], space_ij + radii[i])\n                available_space[j] = min(available_space[j], space_ij + radii[j])\n        \n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            \n            # Distance to walls\n            dist_left = x\n            dist_right = 1 - x\n            dist_bottom = y\n            dist_top = 1 - y\n            \n            wall_space = min(dist_left, dist_right, dist_bottom, dist_top)\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow circles based on available space\n        for i in range(n):\n            # Only grow if there's space\n            if available_space[i] > radii[i]:\n                # Calculate growth amount (limited by growth_rate)\n                growth = min(growth_rate, available_space[i] - radii[i])\n                radii[i] += growth * 0.9  # 90% of maximum possible growth\n    \n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    using simulated annealing with adaptive temperature.\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.01\n    cooling_rate = 0.997\n    \n    # Adaptive perturbation parameters\n    position_perturbation = 0.003\n    radius_perturbation = 0.001\n    \n    for iter in range(iterations):\n        # Select a random circle to modify\n        idx = np.random.randint(0, n)\n        \n        # Create copies for the new state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Apply perturbation\n        if np.random.random() < 0.7:  # 70% chance to move position\n            new_centers[idx] += np.random.normal(0, position_perturbation, 2)\n            # Keep within bounds\n            new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n            new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        else:  # 30% chance to change radius\n            radius_change = np.random.normal(0, radius_perturbation)\n            new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n        \n        # Check for validity\n        valid = True\n        \n        # Check circle-circle overlaps\n        for i in range(n):\n            if i == idx:\n                continue\n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist < min_dist:\n                valid = False\n                break\n        \n        # Check wall constraints\n        if valid:\n            x, y = new_centers[idx]\n            r = new_radii[idx]\n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                valid = False\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            \n            # Accept if better or with probability based on temperature\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n                \n                # Update best solution if improved\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n        \n        # Periodically optimize all radii\n        if iter % 40 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef gradient_optimization(centers, radii, iterations):\n    \"\"\"\n    Final optimization using gradient-based approach to fine-tune\n    both positions and radii simultaneously.\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    learning_rate = 0.001\n    radius_lr = 0.0005\n    \n    for _ in range(iterations):\n        # Calculate gradients for positions and radii\n        pos_gradients = np.zeros_like(centers)\n        rad_gradients = np.zeros_like(radii)\n        \n        # Calculate repulsion forces (negative gradient)\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist + 0.01:  # Small margin to prevent exact touching\n                    # Force direction\n                    direction = dist_vec / (dist + 1e-8)\n                    \n                    # Position gradients\n                    force_magnitude = min(0.1, min_dist + 0.01 - dist)\n                    pos_gradients[i] += force_magnitude * direction\n                    pos_gradients[j] -= force_magnitude * direction\n                    \n                    # Radius gradients - reduce both radii slightly\n                    rad_gradients[i] -= 0.5 * force_magnitude\n                    rad_gradients[j] -= 0.5 * force_magnitude\n        \n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            # Left wall\n            if x < r + 0.01:\n                pos_gradients[i, 0] += min(0.1, r + 0.01 - x)\n                rad_gradients[i] -= 0.5 * min(0.1, r + 0.01 - x)\n            \n            # Right wall\n            if x > 1 - r - 0.01:\n                pos_gradients[i, 0] -= min(0.1, x - (1 - r - 0.01))\n                rad_gradients[i] -= 0.5 * min(0.1, x - (1 - r - 0.01))\n            \n            # Bottom wall\n            if y < r + 0.01:\n                pos_gradients[i, 1] += min(0.1, r + 0.01 - y)\n                rad_gradients[i] -= 0.5 * min(0.1, r + 0.01 - y)\n            \n            # Top wall\n            if y > 1 - r - 0.01:\n                pos_gradients[i, 1] -= min(0.1, y - (1 - r - 0.01))\n                rad_gradients[i] -= 0.5 * min(0.1, y - (1 - r - 0.01))\n        \n        # Add positive gradient for radius growth\n        rad_gradients += 1.0\n        \n        # Update positions and radii\n        centers += learning_rate * pos_gradients\n        radii += radius_lr * rad_gradients\n        \n        # Ensure radii are positive\n        radii = np.maximum(0.01, radii)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n        \n        # Check validity and update best solution\n        valid = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                if dist < radii[i] + radii[j] - 1e-6:\n                    valid = False\n                    break\n            if not valid:\n                break\n        \n        if valid:\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n    \n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"\n    Optimize all radii to fill available space while maintaining valid packing.\n    Uses binary search to find the maximum possible radius for each circle.\n    \"\"\"\n    n = len(centers)\n    \n    for i in range(n):\n        # Calculate available space\n        min_dist_to_others = float('inf')\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                min_dist_to_others = min(min_dist_to_others, dist)\n        \n        # Distance to walls\n        x, y = centers[i]\n        wall_dist = min(x, y, 1 - x, 1 - y)\n        \n        # Maximum possible radius\n        max_radius = min(min_dist_to_others, wall_dist)\n        \n        # Binary search to find optimal radius\n        low = radii[i]\n        high = max_radius\n        \n        # Only search if there's potential improvement\n        if high > low + 1e-6:\n            for _ in range(10):  # 10 binary search iterations\n                mid = (low + high) / 2\n                \n                # Check if mid is valid\n                valid = True\n                \n                # Check against other circles\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j])\n                        if dist < mid + radii[j]:\n                            valid = False\n                            break\n                \n                # Check against walls\n                if valid:\n                    if x < mid or y < mid or x > 1 - mid or y > 1 - mid:\n                        valid = False\n                \n                # Update search range\n                if valid:\n                    low = mid\n                else:\n                    high = mid\n            \n            # Update radius to slightly less than the maximum found\n            radii[i] = low * 0.999\n    \n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to be effective for n=26\n    patterns = [\n        initialize_pattern_specialized_26,\n        initialize_pattern_hybrid_26,\n        initialize_pattern_billiard_26,\n        initialize_pattern_corner_optimized_26,\n        initialize_pattern_ring_26\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with a specialized pattern\n        centers, radii = pattern_func(n)\n\n        # Combine and simplify optimization stages using scipy.optimize.minimize\n        centers, radii = optimize_with_scipy(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\n\ndef initialize_pattern_specialized_26(n):\n    \"\"\"\n    Initialize with a pattern specifically optimized for n=26 based on mathematical research.\n    This pattern uses a hybrid approach with variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Place 4 large circles in corners\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # Place 4 medium circles at midpoints of edges\n    edge_radius = 0.1\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # Place a large circle in the center\n    centers[8] = [0.5, 0.5]\n    radii[8] = 0.12\n\n    # Place 8 circles in inner ring around center\n    inner_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[8] + inner_radius\n        centers[9 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[9 + i] = inner_radius\n\n    # Place 10 circles in outer ring\n    outer_radius = 0.08\n    for i in range(10):\n        angle = 2 * np.pi * i / 10\n        dist = radii[8] + 2 * inner_radius + outer_radius\n        centers[17 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[17 + i] = outer_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid_26(n):\n    \"\"\"\n    Initialize with a hybrid pattern optimized for n=26 with strategic placement\n    of variable-sized circles.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (6 circles)\n    inner_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = inner_radius\n\n    # Middle ring (8 circles, slightly offset)\n    middle_radius = 0.09\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi / 8\n        dist = radii[0] + 2 * inner_radius + middle_radius\n        centers[i + 7] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 7] = middle_radius\n\n    # Corner circles (4 larger circles)\n    corner_radius = 0.11\n    centers[15] = [corner_radius, corner_radius]\n    centers[16] = [1 - corner_radius, corner_radius]\n    centers[17] = [corner_radius, 1 - corner_radius]\n    centers[18] = [1 - corner_radius, 1 - corner_radius]\n    radii[15:19] = corner_radius\n\n    # Edge circles (4 medium circles)\n    edge_radius = 0.085\n    centers[19] = [0.5, edge_radius]\n    centers[20] = [0.5, 1 - edge_radius]\n    centers[21] = [edge_radius, 0.5]\n    centers[22] = [1 - edge_radius, 0.5]\n    radii[19:23] = edge_radius\n\n    # Fill remaining spaces with 3 smaller circles\n    small_radius = 0.07\n    centers[23] = [0.25, 0.25]\n    centers[24] = [0.75, 0.25]\n    centers[25] = [0.25, 0.75]\n    radii[23:26] = small_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_billiard_26(n):\n    \"\"\"\n    Initialize with a billiard-table inspired pattern with circles along the edges\n    and a triangular pattern in the center.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 corner circles\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 8 edge circles (2 on each edge)\n    edge_radius = 0.09\n    edge_positions = [0.3, 0.7]\n\n    # Bottom edge\n    centers[4] = [edge_positions[0], edge_radius]\n    centers[5] = [edge_positions[1], edge_radius]\n\n    # Top edge\n    centers[6] = [edge_positions[0], 1 - edge_radius]\n    centers[7] = [edge_positions[1], 1 - edge_radius]\n\n    # Left edge\n    centers[8] = [edge_radius, edge_positions[0]]\n    centers[9] = [edge_radius, edge_positions[1]]\n\n    # Right edge\n    centers[10] = [1 - edge_radius, edge_positions[0]]\n    centers[11] = [1 - edge_radius, edge_positions[1]]\n\n    radii[4:12] = edge_radius\n\n    # Triangular pattern in center (14 circles)\n    inner_radius = 0.08\n\n    # Center circle\n    centers[12] = [0.5, 0.5]\n    radii[12] = 0.1  # Slightly larger center circle\n\n    # Inner hexagon (6 circles)\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[12] + inner_radius\n        centers[13 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[13 + i] = inner_radius\n\n    # Outer partial ring (7 circles)\n    outer_radius = 0.075\n    for i in range(7):\n        angle = 2 * np.pi * i / 7 + np.pi / 7\n        dist = radii[12] + 2 * inner_radius + outer_radius\n        centers[19 + i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[19 + i] = outer_radius\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_optimized_26(n):\n    \"\"\"\n    Initialize with a pattern that emphasizes optimal corner and edge utilization.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # 4 large corner circles\n    corner_radius = 0.12\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n\n    # 4 medium edge circles\n    edge_radius = 0.095\n    centers[4] = [0.5, edge_radius]\n    centers[5] = [0.5, 1 - edge_radius]\n    centers[6] = [edge_radius, 0.5]\n    centers[7] = [1 - edge_radius, 0.5]\n    radii[4:8] = edge_radius\n\n    # 4 smaller edge circles\n    small_edge_radius = 0.08\n    centers[8] = [0.25, small_edge_radius]\n    centers[9] = [0.75, small_edge_radius]\n    centers[10] = [0.25, 1 - small_edge_radius]\n    centers[11] = [0.75, 1 - small_edge_radius]\n    centers[12] = [small_edge_radius, 0.25]\n    centers[13] = [small_edge_radius, 0.75]\n    centers[14] = [1 - small_edge_radius, 0.25]\n    centers[15] = [1 - small_edge_radius, 0.75]\n    radii[8:16] = small_edge_radius\n\n    # Inner grid (10 circles)\n    inner_radius = 0.075\n    grid_positions = [0.3, 0.5, 0.7]\n\n    count = 16\n    for x in grid_positions:\n        for y in grid_positions:\n            if count < n:\n                centers[count] = [x, y]\n                # Larger circle in the center\n                if x == 0.5 and y == 0.5:\n                    radii[count] = 0.11\n                else:\n                    radii[count] = inner_radius\n                count += 1\n\n    # Fill any remaining slots\n    while count < n:\n        centers[count] = [0.4 + 0.2 * np.random.rand(), 0.4 + 0.2 * np.random.rand()]\n        radii[count] = 0.07\n        count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_ring_26(n):\n    \"\"\"\n    Initialize with concentric rings of circles, optimized for n=26.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.13\n\n    # First ring (8 circles)\n    ring1_radius = 0.095\n    for i in range(8):\n        angle = 2 * np.pi * i / 8\n        dist = radii[0] + ring1_radius\n        centers[i + 1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 1] = ring1_radius\n\n    # Second ring (12 circles)\n    ring2_radius = 0.085\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        dist = radii[0] + 2 * ring1_radius + ring2_radius\n        centers[i + 9] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i + 9] = ring2_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.09\n    centers[21] = [corner_radius, corner_radius]\n    centers[22] = [1 - corner_radius, corner_radius]\n    centers[23] = [corner_radius, 1 - corner_radius]\n    centers[24] = [1 - corner_radius, 1 - corner_radius]\n    radii[21:25] = corner_radius\n\n    # One extra circle\n    centers[25] = [0.5, 0.15]\n    radii[25] = 0.08\n\n    return centers, radii\n\n\ndef optimize_with_scipy(centers, radii):\n    \"\"\"\n    Optimize circle positions and radii using scipy.optimize.minimize.\n    \"\"\"\n    n = len(centers)\n\n    def objective(x):\n        \"\"\"Objective function to minimize (negative sum of radii).\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        return -np.sum(current_radii)\n\n    def constraint(x):\n        \"\"\"Constraints: no overlapping circles, circles within the unit square.\"\"\"\n        current_centers = x[:2 * n].reshape((n, 2))\n        current_radii = x[2 * n:]\n        constraints = []\n\n        # No overlapping circles\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(current_centers[i] - current_centers[j])\n                constraints.append(dist - current_radii[i] - current_radii[j])\n\n        # Circles within the unit square\n        for i in range(n):\n            constraints.append(current_centers[i, 0] - current_radii[i])  # x >= r\n            constraints.append(1 - current_centers[i, 0] - current_radii[i])  # x <= 1 - r\n            constraints.append(current_centers[i, 1] - current_radii[i])  # y >= r\n            constraints.append(1 - current_centers[i, 1] - current_radii[i])  # y <= 1 - r\n            constraints.append(current_radii[i] - 0.01) # radii >= 0.01\n        return np.array(constraints)\n\n    # Initial guess\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Optimization using SLSQP\n    res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'maxiter': 500, 'ftol': 1e-5})\n\n    # Extract optimized centers and radii\n    optimized_centers = res.x[:2 * n].reshape((n, 2))\n    optimized_radii = res.x[2 * n:]\n\n    return optimized_centers, optimized_radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}