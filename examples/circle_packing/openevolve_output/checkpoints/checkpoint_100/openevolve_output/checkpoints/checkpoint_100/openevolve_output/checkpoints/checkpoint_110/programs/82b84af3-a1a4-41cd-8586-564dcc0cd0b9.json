{"id": "82b84af3-a1a4-41cd-8586-564dcc0cd0b9", "code": "# EVOLVE-BLOCK-START\n\"\"\"Improved circle packing for n=26 circles using optimized patterns and adaptive optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using carefully selected patterns and adaptive optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Adaptive strategy selection based on n\n    if n <= 16:\n        strategies = [initialize_grid_pattern]\n    else:\n        strategies = [\n            initialize_specialized_n26_pattern1,\n            initialize_specialized_n26_pattern2,\n            initialize_specialized_n26_pattern3,\n            initialize_specialized_n26_pattern4\n        ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with a suitable pattern\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages with increased iterations\n        centers, radii = optimize_packing(centers, radii, max_iterations=1500)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_grid_pattern(n):\n    \"\"\"Initialize with a simple grid pattern for smaller n\"\"\"\n    rows = int(np.floor(np.sqrt(n)))\n    cols = int(np.ceil(n / rows))\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    radius = 0.4 / max(rows, cols)\n    x_coords = np.linspace(radius, 1 - radius, cols)\n    y_coords = np.linspace(radius, 1 - radius, rows)\n    \n    k = 0\n    for i in range(rows):\n        for j in range(cols):\n            if k < n:\n                centers[k] = [x_coords[j], y_coords[i]]\n                radii[k] = radius\n                k += 1\n            else:\n                break\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern1(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature - pattern 1 (concentric rings with variable sizes)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.002\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[7] = [corner_radius, corner_radius]\n    centers[8] = [1 - corner_radius, corner_radius]\n    centers[9] = [corner_radius, 1 - corner_radius]\n    centers[10] = [1 - corner_radius, 1 - corner_radius]\n    radii[7:11] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    centers[11] = [0.25, edge_radius]\n    centers[12] = [0.5, edge_radius]\n    centers[13] = [0.75, edge_radius]\n    centers[14] = [1 - edge_radius, 0.25]\n    centers[15] = [1 - edge_radius, 0.5]\n    centers[16] = [1 - edge_radius, 0.75]\n    centers[17] = [0.25, 1 - edge_radius]\n    centers[18] = [0.75, 1 - edge_radius]\n    radii[11:19] = edge_radius\n    \n    # Second ring (7 circles) - smaller\n    ring2_radius = 0.09\n    positions = [\n        [0.25, 0.25], [0.75, 0.25], \n        [0.25, 0.75], [0.75, 0.75],\n        [0.5, 0.25], [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i, pos in enumerate(positions):\n        centers[19+i] = pos\n        radii[19+i] = ring2_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern2(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 2\n    (hybrid with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Create a grid of positions for circles\n    positions = []\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    positions.append(([corner_radius, corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, corner_radius], corner_radius))\n    positions.append(([corner_radius, 1 - corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, 1 - corner_radius], corner_radius))\n    \n    # Central circle - large\n    center_radius = 0.125\n    positions.append(([0.5, 0.5], center_radius))\n    \n    # Edge circles (8) - medium-large\n    edge_radius = 0.1\n    positions.append(([0.25, edge_radius], edge_radius))\n    positions.append(([0.5, edge_radius], edge_radius))\n    positions.append(([0.75, edge_radius], edge_radius))\n    positions.append(([1 - edge_radius, 0.25], edge_radius))\n    positions.append(([1 - edge_radius, 0.5], edge_radius))\n    positions.append(([1 - edge_radius, 0.75], edge_radius))\n    positions.append(([0.25, 1 - edge_radius], edge_radius))\n    positions.append(([0.75, 1 - edge_radius], edge_radius))\n    \n    # Inner ring (6) - medium\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.005\n        pos = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        positions.append((pos, inner_radius))\n    \n    # Remaining circles (7) - medium-small\n    small_radius = 0.085\n    remaining_positions = [\n        [0.25, 0.25], [0.75, 0.25],\n        [0.25, 0.75], [0.75, 0.75],\n        [0.33, 0.5], [0.67, 0.5],\n        [0.5, 0.25]\n    ]\n    \n    for pos in remaining_positions:\n        positions.append((pos, small_radius))\n    \n    # Assign positions and radii\n    for i, (pos, radius) in enumerate(positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern3(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 3\n    (hexagonal-based with edge optimization)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Central large circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.125\n    \n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[4] + ring1_radius + 0.003\n        centers[i+5] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+5] = ring1_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+11] = pos\n        radii[i+11] = edge_radius\n    \n    # Middle edge circles (4) - slightly smaller\n    mid_edge_radius = 0.09\n    centers[19] = [0.5, mid_edge_radius]\n    centers[20] = [mid_edge_radius, 0.5]\n    centers[21] = [0.5, 1 - mid_edge_radius]\n    centers[22] = [1 - mid_edge_radius, 0.5]\n    radii[19:23] = mid_edge_radius\n    \n    # Remaining circles (3) - smallest\n    small_radius = 0.085\n    centers[23] = [0.33, 0.33]\n    centers[24] = [0.67, 0.33]\n    centers[25] = [0.5, 0.75]\n    radii[23:26] = small_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern4(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 4\n    (asymmetric with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set different sizes for different regions\n    sizes = {\n        'corner': 0.115,\n        'center': 0.125,\n        'edge': 0.1,\n        'inner': 0.095,\n        'small': 0.085\n    }\n    \n    # Corner circles (4)\n    corner_positions = [\n        [sizes['corner'], sizes['corner']],\n        [1 - sizes['corner'], sizes['corner']],\n        [sizes['corner'], 1 - sizes['corner']],\n        [1 - sizes['corner'], 1 - sizes['corner']]\n    ]\n    \n    # Center circle (1)\n    center_position = [0.5, 0.5]\n    \n    # Edge circles (12)\n    edge_positions = [\n        [0.25, sizes['edge']],\n        [0.5, sizes['edge']],\n        [0.75, sizes['edge']],\n        [1 - sizes['edge'], 0.25],\n        [1 - sizes['edge'], 0.5],\n        [1 - sizes['edge'], 0.75],\n        [0.25, 1 - sizes['edge']],\n        [0.5, 1 - sizes['edge']],\n        [0.75, 1 - sizes['edge']],\n        [sizes['edge'], 0.25],\n        [sizes['edge'], 0.5],\n        [sizes['edge'], 0.75]\n    ]\n    \n    # Inner circles (9)\n    inner_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.33]\n    ]\n    \n    # Combine all positions and sizes\n    all_positions = []\n    \n    # Add corner circles\n    for pos in corner_positions:\n        all_positions.append((pos, sizes['corner']))\n    \n    # Add center circle\n    all_positions.append((center_position, sizes['center']))\n    \n    # Add edge circles\n    for pos in edge_positions:\n        all_positions.append((pos, sizes['edge']))\n    \n    # Add inner circles\n    for pos in inner_positions:\n        all_positions.append((pos, sizes['inner']))\n    \n    # Assign positions and radii (up to n)\n    for i, (pos, radius) in enumerate(all_positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = fine_tune_packing(centers, radii, max_iterations)\n    \n    # Final stage: Ensure validity and maximize radii\n    centers, radii = maximize_radii(centers, radii)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach with increased iterations\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 100.0\n    wall_repulsion = 100.0\n    dt = 0.004\n    dampening = 0.75\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = centers[i] - centers[j]\n                dist = np.linalg.norm(diff)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = diff / (dist + 1e-10)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing) less frequently\n        if iter % 30 == 0 and iter < iterations * 0.7:\n            centers += np.random.normal(0, 0.002 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef grow_radii(centers, radii, iterations=200):\n    \"\"\"\n    Grow radii while maintaining valid packing with increased iterations\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0015 # Slightly reduced growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.9)\n    \n    return centers, radii\n\ndef fine_tune_packing(centers, radii, max_iterations=750):\n    \"\"\"\n    Fine-tune the packing using gradient-based optimization - reduced iterations\n    \"\"\"\n    n = len(centers)\n    \n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n    \n    def unpack_params(params):\n        centers = params[:n*2].reshape(n, 2)\n        radii = params[n*2:]\n        return centers, radii\n    \n    # Define objective function (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n    \n    # Define constraints\n    def constraints(params):\n        centers, radii = unpack_params(params)\n        constraints = []\n        \n        # No overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                constraint = dist - (radii[i] + radii[j])\n                constraints.append(constraint)\n        \n        # Circles within bounds\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            constraints.append(x - r)          # Left bound\n            constraints.append(y - r)          # Bottom bound\n            constraints.append(1 - x - r)      # Right bound\n            constraints.append(1 - y - r)      # Top bound\n        \n        return np.array(constraints)\n    \n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n    \n    # Set bounds for parameters\n    bounds = []\n    for i in range(n):\n        bounds.append((0.0, 1.0))  # x bounds\n        bounds.append((0.0, 1.0))  # y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.15))  # radius bounds\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints={'type': 'ineq', 'fun': constraints},\n        bounds=bounds,\n        options={'maxiter': max_iterations, 'ftol': 1e-7} # Tighter tolerance\n    )\n    \n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n    \n    return centers, radii\n\ndef maximize_radii(centers, radii):\n    \"\"\"\n    Maximize radii while ensuring a valid packing\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(10): # Reduced iterations for speed\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space * 0.999  # Leave a tiny gap\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "1a19a89b-5983-411f-ac0a-47bd31035336", "generation": 12, "timestamp": 1750794916.20217, "iteration_found": 79, "metrics": {"validity": 1.0, "sum_radii": 2.6122943845288202, "target_ratio": 0.9913830681323796, "combined_score": 0.9913830681323796, "eval_time": 9.55717134475708}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6194755968096324, "target_ratio": 0.9941083858860086, "combined_score": 0.9941083858860086, "eval_time": 8.181201457977295}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6195\n- target_ratio: 0.9941\n- combined_score: 0.9941\n- eval_time: 8.1812\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6241, target_ratio: 0.9959, combined_score: 0.9959, eval_time: 35.2108\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6280, target_ratio: 0.9973, combined_score: 0.9973, eval_time: 37.1418\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6267, target_ratio: 0.9968, combined_score: 0.9968, eval_time: 42.1538\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 6.7041)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6280), Performs well on target_ratio (0.9973), Performs well on combined_score (0.9973), Performs well on eval_time (27.8981)\n\n\n### Program 2 (Score: 9.5548)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6267), Performs well on target_ratio (0.9968), Performs well on combined_score (0.9968), Performs well on eval_time (42.1538)\n\n\n### Program 3 (Score: 0.0000)\n```python\nLooking at the current program, I can see it's failing with an \"index 26 is out of bounds for axis 0 with size 26\" error. This typically happens when we try to access an array element that doesn't exist. The best performing version had a score of 0.9968 with a sum_radii of 2.6267, which is very close to the target of 2.637.\n\nLet me rewrite the program with a focus on fixing the index error and improving the circle packing algorithm:\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\n\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: invalid syntax (tmpmxzxl94l.py, line 1))\n\n\n### Program 4 (Score: 3.1619)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0545), Performs well on target_ratio (0.7797), Performs well on combined_score (0.7797), Performs well on eval_time (11.1956)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.4768)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    strategies = [\n        initialize_specialized_n26_pattern1,\n        initialize_specialized_n26_pattern2,\n        initialize_specialized_n26_pattern3,\n        initialize_specialized_n26_pattern4\n    ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with different patterns\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_specialized_n26_pattern1(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature - pattern 1 (concentric rings with variable sizes)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.002\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[7] = [corner_radius, corner_radius]\n    centers[8] = [1 - corner_radius, corner_radius]\n    centers[9] = [corner_radius, 1 - corner_radius]\n    centers[10] = [1 - corner_radius, 1 - corner_radius]\n    radii[7:11] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    centers[11] = [0.25, edge_radius]\n    centers[12] = [0.5, edge_radius]\n    centers[13] = [0.75, edge_radius]\n    centers[14] = [1 - edge_radius, 0.25]\n    centers[15] = [1 - edge_radius, 0.5]\n    centers[16] = [1 - edge_radius, 0.75]\n    centers[17] = [0.25, 1 - edge_radius]\n    centers[18] = [0.75, 1 - edge_radius]\n    radii[11:19] = edge_radius\n    \n    # Second ring (7 circles) - smaller\n    ring2_radius = 0.09\n    positions = [\n        [0.25, 0.25], [0.75, 0.25], \n        [0.25, 0.75], [0.75, 0.75],\n        [0.5, 0.25], [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i, pos in enumerate(positions):\n        centers[19+i] = pos\n        radii[19+i] = ring2_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern2(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 2\n    (hybrid with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Create a grid of positions for circles\n    positions = []\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    positions.append(([corner_radius, corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, corner_radius], corner_radius))\n    positions.append(([corner_radius, 1 - corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, 1 - corner_radius], corner_radius))\n    \n    # Central circle - large\n    center_radius = 0.125\n    positions.append(([0.5, 0.5], center_radius))\n    \n    # Edge circles (8) - medium-large\n    edge_radius = 0.1\n    positions.append(([0.25, edge_radius], edge_radius))\n    positions.append(([0.5, edge_radius], edge_radius))\n    positions.append(([0.75, edge_radius], edge_radius))\n    positions.append(([1 - edge_radius, 0.25], edge_radius))\n    positions.append(([1 - edge_radius, 0.5], edge_radius))\n    positions.append(([1 - edge_radius, 0.75], edge_radius))\n    positions.append(([0.25, 1 - edge_radius], edge_radius))\n    positions.append(([0.75, 1 - edge_radius], edge_radius))\n    \n    # Inner ring (6) - medium\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.005\n        pos = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        positions.append((pos, inner_radius))\n    \n    # Remaining circles (7) - medium-small\n    small_radius = 0.085\n    remaining_positions = [\n        [0.25, 0.25], [0.75, 0.25],\n        [0.25, 0.75], [0.75, 0.75],\n        [0.33, 0.5], [0.67, 0.5],\n        [0.5, 0.25]\n    ]\n    \n    for pos in remaining_positions:\n        positions.append((pos, small_radius))\n    \n    # Assign positions and radii\n    for i, (pos, radius) in enumerate(positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern3(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 3\n    (hexagonal-based with edge optimization)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Central large circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.125\n    \n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[4] + ring1_radius + 0.003\n        centers[i+5] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+5] = ring1_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+11] = pos\n        radii[i+11] = edge_radius\n    \n    # Middle edge circles (4) - slightly smaller\n    mid_edge_radius = 0.09\n    centers[19] = [0.5, mid_edge_radius]\n    centers[20] = [mid_edge_radius, 0.5]\n    centers[21] = [0.5, 1 - mid_edge_radius]\n    centers[22] = [1 - mid_edge_radius, 0.5]\n    radii[19:23] = mid_edge_radius\n    \n    # Remaining circles (3) - smallest\n    small_radius = 0.085\n    centers[23] = [0.33, 0.33]\n    centers[24] = [0.67, 0.33]\n    centers[25] = [0.5, 0.75]\n    radii[23:26] = small_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern4(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 4\n    (asymmetric with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set different sizes for different regions\n    sizes = {\n        'corner': 0.115,\n        'center': 0.125,\n        'edge': 0.1,\n        'inner': 0.095,\n        'small': 0.085\n    }\n    \n    # Corner circles (4)\n    corner_positions = [\n        [sizes['corner'], sizes['corner']],\n        [1 - sizes['corner'], sizes['corner']],\n        [sizes['corner'], 1 - sizes['corner']],\n        [1 - sizes['corner'], 1 - sizes['corner']]\n    ]\n    \n    # Center circle (1)\n    center_position = [0.5, 0.5]\n    \n    # Edge circles (12)\n    edge_positions = [\n        [0.25, sizes['edge']],\n        [0.5, sizes['edge']],\n        [0.75, sizes['edge']],\n        [1 - sizes['edge'], 0.25],\n        [1 - sizes['edge'], 0.5],\n        [1 - sizes['edge'], 0.75],\n        [0.25, 1 - sizes['edge']],\n        [0.5, 1 - sizes['edge']],\n        [0.75, 1 - sizes['edge']],\n        [sizes['edge'], 0.25],\n        [sizes['edge'], 0.5],\n        [sizes['edge'], 0.75]\n    ]\n    \n    # Inner circles (9)\n    inner_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.33]\n    ]\n    \n    # Combine all positions and sizes\n    all_positions = []\n    \n    # Add corner circles\n    for pos in corner_positions:\n        all_positions.append((pos, sizes['corner']))\n    \n    # Add center circle\n    all_positions.append((center_position, sizes['center']))\n    \n    # Add edge circles\n    for pos in edge_positions:\n        all_positions.append((pos, sizes['edge']))\n    \n    # Add inner circles\n    for pos in inner_positions:\n        all_positions.append((pos, sizes['inner']))\n    \n    # Assign positions and radii (up to n)\n    for i, (pos, radius) in enumerate(all_positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = fine_tune_packing(centers, radii, max_iterations)\n    \n    # Final stage: Ensure validity and maximize radii\n    centers, radii = maximize_radii(centers, radii)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=200):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 80.0\n    wall_repulsion = 80.0\n    dt = 0.005\n    dampening = 0.8\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = centers[i] - centers[j]\n                dist = np.linalg.norm(diff)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = diff / (dist + 1e-10)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing)\n        if iter % 20 == 0 and iter < iterations * 0.7:\n            centers += np.random.normal(0, 0.003 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef grow_radii(centers, radii, iterations=150):\n    \"\"\"\n    Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.002\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.9)\n    \n    return centers, radii\n\ndef fine_tune_packing(centers, radii, max_iterations=500):\n    \"\"\"\n    Fine-tune the packing using gradient-based optimization\n    \"\"\"\n    n = len(centers)\n    \n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n    \n    def unpack_params(params):\n        centers = params[:n*2].reshape(n, 2)\n        radii = params[n*2:]\n        return centers, radii\n    \n    # Define objective function (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n    \n    # Define constraints\n    def constraints(params):\n        centers, radii = unpack_params(params)\n        constraints = []\n        \n        # No overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                constraint = dist - (radii[i] + radii[j])\n                constraints.append(constraint)\n        \n        # Circles within bounds\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            constraints.append(x - r)          # Left bound\n            constraints.append(y - r)          # Bottom bound\n            constraints.append(1 - x - r)      # Right bound\n            constraints.append(1 - y - r)      # Top bound\n        \n        return np.array(constraints)\n    \n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n    \n    # Set bounds for parameters\n    bounds = []\n    for i in range(n):\n        bounds.append((0.0, 1.0))  # x bounds\n        bounds.append((0.0, 1.0))  # y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.15))  # radius bounds\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints={'type': 'ineq', 'fun': constraints},\n        bounds=bounds,\n        options={'maxiter': max_iterations, 'ftol': 1e-6}\n    )\n    \n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n    \n    return centers, radii\n\ndef maximize_radii(centers, radii):\n    \"\"\"\n    Maximize radii while ensuring a valid packing\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(15):\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space * 0.999  # Leave a tiny gap\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Improved circle packing for n=26 circles using optimized patterns and adaptive optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using carefully selected patterns and adaptive optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Adaptive strategy selection based on n\n    if n <= 16:\n        strategies = [initialize_grid_pattern]\n    else:\n        strategies = [\n            initialize_specialized_n26_pattern1,\n            initialize_specialized_n26_pattern2,\n            initialize_specialized_n26_pattern3,\n            initialize_specialized_n26_pattern4\n        ]\n    \n    for initialize_strategy in strategies:\n        # Initialize with a suitable pattern\n        centers, radii = initialize_strategy(n)\n        \n        # Apply optimization stages with increased iterations\n        centers, radii = optimize_packing(centers, radii, max_iterations=1500)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_grid_pattern(n):\n    \"\"\"Initialize with a simple grid pattern for smaller n\"\"\"\n    rows = int(np.floor(np.sqrt(n)))\n    cols = int(np.ceil(n / rows))\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    radius = 0.4 / max(rows, cols)\n    x_coords = np.linspace(radius, 1 - radius, cols)\n    y_coords = np.linspace(radius, 1 - radius, rows)\n    \n    k = 0\n    for i in range(rows):\n        for j in range(cols):\n            if k < n:\n                centers[k] = [x_coords[j], y_coords[i]]\n                radii[k] = radius\n                k += 1\n            else:\n                break\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern1(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 based on \n    mathematical literature - pattern 1 (concentric rings with variable sizes)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.12\n    \n    # First ring (6 circles)\n    ring1_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring1_radius + 0.002\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = ring1_radius\n    \n    # Corner circles (4) - larger\n    corner_radius = 0.11\n    centers[7] = [corner_radius, corner_radius]\n    centers[8] = [1 - corner_radius, corner_radius]\n    centers[9] = [corner_radius, 1 - corner_radius]\n    centers[10] = [1 - corner_radius, 1 - corner_radius]\n    radii[7:11] = corner_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    centers[11] = [0.25, edge_radius]\n    centers[12] = [0.5, edge_radius]\n    centers[13] = [0.75, edge_radius]\n    centers[14] = [1 - edge_radius, 0.25]\n    centers[15] = [1 - edge_radius, 0.5]\n    centers[16] = [1 - edge_radius, 0.75]\n    centers[17] = [0.25, 1 - edge_radius]\n    centers[18] = [0.75, 1 - edge_radius]\n    radii[11:19] = edge_radius\n    \n    # Second ring (7 circles) - smaller\n    ring2_radius = 0.09\n    positions = [\n        [0.25, 0.25], [0.75, 0.25], \n        [0.25, 0.75], [0.75, 0.75],\n        [0.5, 0.25], [0.5, 0.75],\n        [0.25, 0.5]\n    ]\n    \n    for i, pos in enumerate(positions):\n        centers[19+i] = pos\n        radii[19+i] = ring2_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern2(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 2\n    (hybrid with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Create a grid of positions for circles\n    positions = []\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    positions.append(([corner_radius, corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, corner_radius], corner_radius))\n    positions.append(([corner_radius, 1 - corner_radius], corner_radius))\n    positions.append(([1 - corner_radius, 1 - corner_radius], corner_radius))\n    \n    # Central circle - large\n    center_radius = 0.125\n    positions.append(([0.5, 0.5], center_radius))\n    \n    # Edge circles (8) - medium-large\n    edge_radius = 0.1\n    positions.append(([0.25, edge_radius], edge_radius))\n    positions.append(([0.5, edge_radius], edge_radius))\n    positions.append(([0.75, edge_radius], edge_radius))\n    positions.append(([1 - edge_radius, 0.25], edge_radius))\n    positions.append(([1 - edge_radius, 0.5], edge_radius))\n    positions.append(([1 - edge_radius, 0.75], edge_radius))\n    positions.append(([0.25, 1 - edge_radius], edge_radius))\n    positions.append(([0.75, 1 - edge_radius], edge_radius))\n    \n    # Inner ring (6) - medium\n    inner_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = center_radius + inner_radius + 0.005\n        pos = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        positions.append((pos, inner_radius))\n    \n    # Remaining circles (7) - medium-small\n    small_radius = 0.085\n    remaining_positions = [\n        [0.25, 0.25], [0.75, 0.25],\n        [0.25, 0.75], [0.75, 0.75],\n        [0.33, 0.5], [0.67, 0.5],\n        [0.5, 0.25]\n    ]\n    \n    for pos in remaining_positions:\n        positions.append((pos, small_radius))\n    \n    # Assign positions and radii\n    for i, (pos, radius) in enumerate(positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern3(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 3\n    (hexagonal-based with edge optimization)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4) - largest\n    corner_radius = 0.115\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[0:4] = corner_radius\n    \n    # Central large circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.125\n    \n    # First hexagonal ring (6 circles)\n    ring1_radius = 0.1\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[4] + ring1_radius + 0.003\n        centers[i+5] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+5] = ring1_radius\n    \n    # Edge circles (8) - medium\n    edge_radius = 0.095\n    edge_positions = [\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [edge_radius, 0.25],\n        [edge_radius, 0.75],\n        [1 - edge_radius, 0.25],\n        [1 - edge_radius, 0.75],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i, pos in enumerate(edge_positions):\n        centers[i+11] = pos\n        radii[i+11] = edge_radius\n    \n    # Middle edge circles (4) - slightly smaller\n    mid_edge_radius = 0.09\n    centers[19] = [0.5, mid_edge_radius]\n    centers[20] = [mid_edge_radius, 0.5]\n    centers[21] = [0.5, 1 - mid_edge_radius]\n    centers[22] = [1 - mid_edge_radius, 0.5]\n    radii[19:23] = mid_edge_radius\n    \n    # Remaining circles (3) - smallest\n    small_radius = 0.085\n    centers[23] = [0.33, 0.33]\n    centers[24] = [0.67, 0.33]\n    centers[25] = [0.5, 0.75]\n    radii[23:26] = small_radius\n    \n    return centers, radii\n\ndef initialize_specialized_n26_pattern4(n):\n    \"\"\"\n    Initialize with a pattern specifically designed for n=26 - pattern 4\n    (asymmetric with variable sized circles)\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Set different sizes for different regions\n    sizes = {\n        'corner': 0.115,\n        'center': 0.125,\n        'edge': 0.1,\n        'inner': 0.095,\n        'small': 0.085\n    }\n    \n    # Corner circles (4)\n    corner_positions = [\n        [sizes['corner'], sizes['corner']],\n        [1 - sizes['corner'], sizes['corner']],\n        [sizes['corner'], 1 - sizes['corner']],\n        [1 - sizes['corner'], 1 - sizes['corner']]\n    ]\n    \n    # Center circle (1)\n    center_position = [0.5, 0.5]\n    \n    # Edge circles (12)\n    edge_positions = [\n        [0.25, sizes['edge']],\n        [0.5, sizes['edge']],\n        [0.75, sizes['edge']],\n        [1 - sizes['edge'], 0.25],\n        [1 - sizes['edge'], 0.5],\n        [1 - sizes['edge'], 0.75],\n        [0.25, 1 - sizes['edge']],\n        [0.5, 1 - sizes['edge']],\n        [0.75, 1 - sizes['edge']],\n        [sizes['edge'], 0.25],\n        [sizes['edge'], 0.5],\n        [sizes['edge'], 0.75]\n    ]\n    \n    # Inner circles (9)\n    inner_positions = [\n        [0.25, 0.25],\n        [0.75, 0.25],\n        [0.25, 0.75],\n        [0.75, 0.75],\n        [0.33, 0.33],\n        [0.67, 0.33],\n        [0.33, 0.67],\n        [0.67, 0.67],\n        [0.5, 0.33]\n    ]\n    \n    # Combine all positions and sizes\n    all_positions = []\n    \n    # Add corner circles\n    for pos in corner_positions:\n        all_positions.append((pos, sizes['corner']))\n    \n    # Add center circle\n    all_positions.append((center_position, sizes['center']))\n    \n    # Add edge circles\n    for pos in edge_positions:\n        all_positions.append((pos, sizes['edge']))\n    \n    # Add inner circles\n    for pos in inner_positions:\n        all_positions.append((pos, sizes['inner']))\n    \n    # Assign positions and radii (up to n)\n    for i, (pos, radius) in enumerate(all_positions[:n]):\n        centers[i] = pos\n        radii[i] = radius\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii, max_iterations=1000):\n    \"\"\"\n    Optimize the circle packing using a multi-stage approach\n    \"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = grow_radii(centers, radii)\n    \n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = fine_tune_packing(centers, radii, max_iterations)\n    \n    # Final stage: Ensure validity and maximize radii\n    centers, radii = maximize_radii(centers, radii)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=300):\n    \"\"\"\n    Resolve overlaps between circles using a physics-based approach with increased iterations\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 100.0\n    wall_repulsion = 100.0\n    dt = 0.004\n    dampening = 0.75\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations\n        \n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = centers[i] - centers[j]\n                dist = np.linalg.norm(diff)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = diff / (dist + 1e-10)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Add random perturbation (simulated annealing) less frequently\n        if iter % 30 == 0 and iter < iterations * 0.7:\n            centers += np.random.normal(0, 0.002 * temperature, centers.shape)\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef grow_radii(centers, radii, iterations=200):\n    \"\"\"\n    Grow radii while maintaining valid packing with increased iterations\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0015 # Slightly reduced growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Space to other circles\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j])\n                    space = dist - radii[j] - radii[i]\n                    available_space[i] = min(available_space[i], space)\n        \n        # Space to walls\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - radii[i], y - radii[i], 1 - x - radii[i], 1 - y - radii[i])\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii based on available space\n        for i in range(n):\n            if available_space[i] > 0:\n                radii[i] += min(growth_rate, available_space[i] * 0.9)\n    \n    return centers, radii\n\ndef fine_tune_packing(centers, radii, max_iterations=750):\n    \"\"\"\n    Fine-tune the packing using gradient-based optimization - reduced iterations\n    \"\"\"\n    n = len(centers)\n    \n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n    \n    def unpack_params(params):\n        centers = params[:n*2].reshape(n, 2)\n        radii = params[n*2:]\n        return centers, radii\n    \n    # Define objective function (negative sum of radii)\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)\n    \n    # Define constraints\n    def constraints(params):\n        centers, radii = unpack_params(params)\n        constraints = []\n        \n        # No overlapping circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                constraint = dist - (radii[i] + radii[j])\n                constraints.append(constraint)\n        \n        # Circles within bounds\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            constraints.append(x - r)          # Left bound\n            constraints.append(y - r)          # Bottom bound\n            constraints.append(1 - x - r)      # Right bound\n            constraints.append(1 - y - r)      # Top bound\n        \n        return np.array(constraints)\n    \n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n    \n    # Set bounds for parameters\n    bounds = []\n    for i in range(n):\n        bounds.append((0.0, 1.0))  # x bounds\n        bounds.append((0.0, 1.0))  # y bounds\n    for i in range(n):\n        bounds.append((0.01, 0.15))  # radius bounds\n    \n    # Run optimization\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints={'type': 'ineq', 'fun': constraints},\n        bounds=bounds,\n        options={'maxiter': max_iterations, 'ftol': 1e-7} # Tighter tolerance\n    )\n    \n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n    \n    return centers, radii\n\ndef maximize_radii(centers, radii):\n    \"\"\"\n    Maximize radii while ensuring a valid packing\n    \"\"\"\n    n = len(centers)\n    \n    # Calculate distances between all circles\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(centers[i] - centers[j])\n            distances[i, j] = distances[j, i] = dist\n    \n    # Calculate distances to walls\n    wall_distances = np.zeros((n, 4))\n    for i in range(n):\n        x, y = centers[i]\n        wall_distances[i, 0] = x               # Distance to left wall\n        wall_distances[i, 1] = y               # Distance to bottom wall\n        wall_distances[i, 2] = 1 - x           # Distance to right wall\n        wall_distances[i, 3] = 1 - y           # Distance to top wall\n    \n    # Iteratively optimize radii\n    for _ in range(10): # Reduced iterations for speed\n        for i in range(n):\n            # Find minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = distances[i, j] - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n            \n            # Find minimum distance to walls\n            min_dist_to_walls = np.min(wall_distances[i])\n            \n            # Set radius to fill available space\n            available_space = min(min_dist_to_others, min_dist_to_walls)\n            radii[i] = available_space * 0.999  # Leave a tiny gap\n    \n    return centers, radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}