{"id": "691c2e2f-1002-4a2d-b1d1-c5e8c9d9edf9", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach and multi-stage optimization with gradient descent and adaptive initial radii\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initialize with a good pattern, but allow for variable circle sizes and radii optimization.\n    centers, radii = initialize_hybrid_pattern(n)\n\n    # Define the objective function (negative sum of radii)\n    def objective(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        return -np.sum(radii)\n\n    # Define the constraint function (non-overlapping circles and within unit square)\n    def constraint(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n\n        # Check for overlaps\n        overlap_constraints = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                overlap_constraints.append(dist - radii[i] - radii[j])\n\n        # Check for boundaries\n        boundary_constraints = []\n        for i in range(n):\n            boundary_constraints.append(centers[i][0] - radii[i])\n            boundary_constraints.append(1 - centers[i][0] - radii[i])\n            boundary_constraints.append(centers[i][1] - radii[i])\n            boundary_constraints.append(1 - centers[i][1] - radii[i])\n\n        return np.array(overlap_constraints + boundary_constraints)\n\n    # Initial guess for the optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the center coordinates (within the unit square) and radii (positive)\n    bounds_centers = [(0.0, 1.0) for _ in range(2 * n)]\n    bounds_radii = [(0.001, 0.5) for _ in range(n)]  # Radii must be positive\n\n    bounds = bounds_centers + bounds_radii\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Perform the optimization\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=cons, options={'maxiter': 250, 'ftol': 1e-6})\n\n    # Extract the optimized centers and radii\n    centers = result.x[:2*n].reshape(n, 2)\n    radii = result.x[2*n:]\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining hexagonal and grid-like arrangements,\n    allowing for variable circle sizes. Adjust radii to be more reasonable initially.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.18  # Start with a slightly larger center circle\n\n    angle = np.pi / 3\n    radius_hex = 0.3\n    for i in range(6):\n        centers[i + 1] = [0.5 + radius_hex * np.cos(i * angle), 0.5 + radius_hex * np.sin(i * angle)]\n        radii[i + 1] = 0.14\n\n    # Additional circles around the core (12 circles)\n    angle_offset = np.pi / 12\n    radius_outer = 0.45\n    for i in range(12):\n        centers[i + 7] = [0.5 + radius_outer * np.cos(i * angle + angle_offset),\n                         0.5 + radius_outer * np.sin(i * angle + angle_offset)]\n        radii[i + 7] = 0.10\n\n    # Corner circles (4 circles)\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.9, 0.1]\n    centers[21] = [0.1, 0.9]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = 0.08\n\n    # Remaining 3 circles placed strategically\n    centers[23] = [0.25, 0.5]\n    centers[24] = [0.75, 0.5]\n    centers[25] = [0.5, 0.25]\n    radii[23:26] = 0.11\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "4ed82d8c-309e-4fd4-b40c-41319f8fb6a5", "generation": 4, "timestamp": 1750753072.9907994, "iteration_found": 84, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- combined_score: 0.0000\n- error: Program execution failed: No module named 'scipy'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization, physics, and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization, physics, and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 3.6409)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a multi-stage optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach and multi-stage optimization with gradient descent\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initialize with a good pattern, but allow for variable circle sizes.\n    centers, radii = initialize_hybrid_pattern(n)\n\n    # Define the objective function (negative sum of radii)\n    def objective(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = compute_max_radii(centers, n)\n        return -np.sum(radii)\n\n    # Define the constraint function (non-overlapping circles and within unit square)\n    def constraint(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = compute_max_radii(centers, n)\n        \n        # Check for overlaps\n        overlap_constraints = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                overlap_constraints.append(dist - radii[i] - radii[j])\n        \n        # Check for boundaries\n        boundary_constraints = []\n        for i in range(n):\n            boundary_constraints.append(centers[i][0] - radii[i])\n            boundary_constraints.append(1 - centers[i][0] - radii[i])\n            boundary_constraints.append(centers[i][1] - radii[i])\n            boundary_constraints.append(1 - centers[i][1] - radii[i])\n\n        return np.array(overlap_constraints + boundary_constraints)\n    \n    # Initial guess for the optimization\n    x0 = centers.flatten()\n\n    # Bounds for the center coordinates (within the unit square)\n    bounds = [(0.0, 1.0) for _ in range(2 * n)]\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Perform the optimization\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=cons, options={'maxiter': 200, 'ftol': 1e-5})\n\n    # Extract the optimized centers and radii\n    centers = result.x[:2*n].reshape(n, 2)\n    radii = compute_max_radii(centers, n)\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining hexagonal and grid-like arrangements,\n    allowing for variable circle sizes.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15 # Start with a slightly larger center circle\n    \n    angle = np.pi / 3\n    radius_hex = 0.3\n    for i in range(6):\n        centers[i+1] = [0.5 + radius_hex * np.cos(i * angle), 0.5 + radius_hex * np.sin(i * angle)]\n        radii[i+1] = 0.12\n\n    # Additional circles around the core (12 circles)\n    angle_offset = np.pi / 12\n    radius_outer = 0.45\n    for i in range(12):\n        centers[i+7] = [0.5 + radius_outer * np.cos(i * angle + angle_offset), 0.5 + radius_outer * np.sin(i * angle + angle_offset)]\n        radii[i+7] = 0.08\n\n    # Corner circles (4 circles)\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.9, 0.1]\n    centers[21] = [0.1, 0.9]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = 0.07\n\n    # Remaining 3 circles placed strategically\n    centers[23] = [0.25, 0.5]\n    centers[24] = [0.75, 0.5]\n    centers[25] = [0.5, 0.25]\n    radii[23:26] = 0.09\n\n    return centers, radii\n\n\ndef compute_max_radii(centers, n):\n    \"\"\"\n    Compute the maximum possible radii for each circle, ensuring no overlaps\n    and staying within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        n: number of circles\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    radii = np.zeros(n)\n\n    for i in range(n):\n        # Distance to borders\n        radii[i] = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                radii[i] = min(radii[i], (dist / 2))\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach and multi-stage optimization with gradient descent and adaptive initial radii\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a hybrid pattern and gradient-based optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initialize with a good pattern, but allow for variable circle sizes and radii optimization.\n    centers, radii = initialize_hybrid_pattern(n)\n\n    # Define the objective function (negative sum of radii)\n    def objective(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        return -np.sum(radii)\n\n    # Define the constraint function (non-overlapping circles and within unit square)\n    def constraint(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n\n        # Check for overlaps\n        overlap_constraints = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                overlap_constraints.append(dist - radii[i] - radii[j])\n\n        # Check for boundaries\n        boundary_constraints = []\n        for i in range(n):\n            boundary_constraints.append(centers[i][0] - radii[i])\n            boundary_constraints.append(1 - centers[i][0] - radii[i])\n            boundary_constraints.append(centers[i][1] - radii[i])\n            boundary_constraints.append(1 - centers[i][1] - radii[i])\n\n        return np.array(overlap_constraints + boundary_constraints)\n\n    # Initial guess for the optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the center coordinates (within the unit square) and radii (positive)\n    bounds_centers = [(0.0, 1.0) for _ in range(2 * n)]\n    bounds_radii = [(0.001, 0.5) for _ in range(n)]  # Radii must be positive\n\n    bounds = bounds_centers + bounds_radii\n\n    # Constraints\n    cons = {'type': 'ineq', 'fun': constraint}\n\n    # Perform the optimization\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=cons, options={'maxiter': 250, 'ftol': 1e-6})\n\n    # Extract the optimized centers and radii\n    centers = result.x[:2*n].reshape(n, 2)\n    radii = result.x[2*n:]\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef initialize_hybrid_pattern(n):\n    \"\"\"\n    Initialize with a hybrid pattern combining hexagonal and grid-like arrangements,\n    allowing for variable circle sizes. Adjust radii to be more reasonable initially.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.18  # Start with a slightly larger center circle\n\n    angle = np.pi / 3\n    radius_hex = 0.3\n    for i in range(6):\n        centers[i + 1] = [0.5 + radius_hex * np.cos(i * angle), 0.5 + radius_hex * np.sin(i * angle)]\n        radii[i + 1] = 0.14\n\n    # Additional circles around the core (12 circles)\n    angle_offset = np.pi / 12\n    radius_outer = 0.45\n    for i in range(12):\n        centers[i + 7] = [0.5 + radius_outer * np.cos(i * angle + angle_offset),\n                         0.5 + radius_outer * np.sin(i * angle + angle_offset)]\n        radii[i + 7] = 0.10\n\n    # Corner circles (4 circles)\n    centers[19] = [0.1, 0.1]\n    centers[20] = [0.9, 0.1]\n    centers[21] = [0.1, 0.9]\n    centers[22] = [0.9, 0.9]\n    radii[19:23] = 0.08\n\n    # Remaining 3 circles placed strategically\n    centers[23] = [0.25, 0.5]\n    centers[24] = [0.75, 0.5]\n    centers[25] = [0.5, 0.25]\n    radii[23:26] = 0.11\n\n    return centers, radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}