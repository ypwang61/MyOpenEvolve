{"id": "c1ea8f0f-b16a-4a53-b7f2-7c4a4ba110fa", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and adaptive radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(9):  # Increased strategies including a Fibonacci lattice\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)\n        elif strategy == 5:\n            centers, radii = initialize_pattern_modified_hexagonal(n)\n        elif strategy == 6:\n            centers, radii = initialize_pattern_adaptive_grid(n)\n        elif strategy == 7:\n            centers, radii = initialize_pattern_triangular(n)\n        else:\n            centers, radii = initialize_pattern_fibonacci(n) # New strategy\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_fibonacci(n):\n    \"\"\"Initialize with a Fibonacci lattice-like pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    phi = (1 + np.sqrt(5)) / 2  # Golden ratio\n    for i in range(n):\n        angle = 2 * np.pi * i / phi\n        radius = np.sqrt(i / (n - 1)) * 0.45  # Scale to fit within the unit square\n        x = 0.5 + radius * np.cos(angle)\n        y = 0.5 + radius * np.sin(angle)\n        centers[i] = [x, y]\n        radii[i] = 0.06 + np.random.rand() * 0.03  # Variable radii\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Parameters for the triangular lattice\n    side_length = 0.18  # Adjust for density\n    x_offset = 0.0\n    y_offset = 0.0\n\n    for i in range(8):\n        for j in range(8):\n            if count < n:\n                x = x_offset + i * side_length\n                y = y_offset + j * side_length * np.sqrt(3) / 2\n                if i % 2 != 0:\n                    x += side_length / 2\n                centers[count] = [x, y]\n                radii[count] = 0.075\n                count += 1\n\n    # Randomly place remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.05 + 0.05\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.098\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.088\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.05 + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - Reduced to 1 to prevent overlap and add random\n    edge_radius = 0.083\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    # Removed 2 Edge Circles\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.115 * (1 - dist_to_center**1.5) # Quadratic falloff, adjusted power\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.055\n    count += 1\n\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.05 + middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.085\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.05 + 2 * middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.105\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.073\n                count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2) * 0.8 + 0.1 # Ensure inside\n    radii = np.random.rand(n) * 0.07 + 0.05  # Radii between 0.05 and 0.12\n    return centers, radii\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a modified hexagonal pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Central circle\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.12\n    count += 1\n\n    # Six circles around the center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.10\n        count += 1\n\n    # Twelve circles in the next layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.08\n        count += 1\n\n    # Remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n    return centers, radii\n\ndef initialize_pattern_adaptive_grid(n):\n    \"\"\"Initialize with an adaptive grid pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Larger circles near the center\n    num_circles_center = 9\n    grid_size_center = int(np.sqrt(num_circles_center))\n    spacing_center = 0.3\n    center_x = 0.5 - spacing_center\n    center_y = 0.5 - spacing_center\n\n    for i in range(grid_size_center):\n        for j in range(grid_size_center):\n            centers[count] = [center_x + i * spacing_center, center_y + j * spacing_center]\n            radii[count] = 0.09\n            count += 1\n\n    # Smaller circles towards the edges\n    num_circles_edge = n - num_circles_center\n    grid_size_edge = int(np.sqrt(num_circles_edge))\n    spacing_edge = 0.2\n    start_x = 0.1\n    start_y = 0.1\n\n    for i in range(grid_size_edge):\n        for j in range(grid_size_edge):\n            if count < n:\n                centers[count] = [start_x + i * spacing_edge, start_y + j * spacing_edge]\n                radii[count] = 0.07\n                count += 1\n\n    # Fill remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0 # Increased Repulsion\n    wall_repulsion = 25.0 # Increased Wall Repulsion\n    dt = 0.01\n    dampening = 0.95\n    gravity = 0.006  # Add a weak gravity towards the center\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - Reduce Perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.008 * temperature, centers.shape)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0012 #Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.6) # Increased Growth\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.12) #Increased Shrink\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.004, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0015) # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist: # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "70ca800b-2f96-4e95-9e22-54e1239f5a2a", "generation": 7, "timestamp": 1750804558.790333, "iteration_found": 182, "metrics": {"validity": 1.0, "sum_radii": 2.4529277543280474, "target_ratio": 0.9309023735590314, "combined_score": 0.9309023735590314, "eval_time": 18.95122003555298}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.4379349468723257, "target_ratio": 0.9252125035568599, "combined_score": 0.9252125035568599, "eval_time": 17.174546480178833}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.4379\n- target_ratio: 0.9252\n- combined_score: 0.9252\n- eval_time: 17.1745\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5839, target_ratio: 0.9806, combined_score: 0.9806, eval_time: 99.5983\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 5.1220)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (19.9734)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 20.4851)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-phase optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\nimport time\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6181), Performs well on target_ratio (0.9936), Performs well on combined_score (0.9936), Performs well on eval_time (96.8205)\n\n\n### Program 4 (Score: 4.0650)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6151), Performs well on target_ratio (0.9925), Performs well on combined_score (0.9925), Performs well on eval_time (14.7252)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 8.1653)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(8):  # Increased strategies\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)  # New strategy\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)  # New strategy\n        elif strategy == 5:\n            centers, radii = initialize_pattern_modified_hexagonal(n) #New Strategy\n        elif strategy == 6:\n            centers, radii = initialize_pattern_adaptive_grid(n) #New Strategy\n        else:\n            centers, radii = initialize_pattern_triangular(n) #New strategy\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)  # Increased iterations\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Parameters for the triangular lattice\n    side_length = 0.18  # Adjust for density\n    x_offset = 0.0\n    y_offset = 0.0\n\n    for i in range(8):\n        for j in range(8):\n            if count < n:\n                x = x_offset + i * side_length\n                y = y_offset + j * side_length * np.sqrt(3) / 2\n                if i % 2 != 0:\n                    x += side_length / 2\n                centers[count] = [x, y]\n                radii[count] = 0.075\n                count += 1\n\n    # Randomly place remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.05 + 0.05\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.098\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.088\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.05 + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - Reduced to 1 to prevent overlap and add random\n    edge_radius = 0.083\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    # Removed 2 Edge Circles\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.115 * (1 - dist_to_center**1.5) # Quadratic falloff, adjusted power\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.055\n    count += 1\n\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.05 + middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.085\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.05 + 2 * middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.105\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.073\n                count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2) * 0.8 + 0.1 # Ensure inside\n    radii = np.random.rand(n) * 0.07 + 0.05  # Radii between 0.05 and 0.12\n    return centers, radii\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a modified hexagonal pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Central circle\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.12\n    count += 1\n\n    # Six circles around the center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.10\n        count += 1\n\n    # Twelve circles in the next layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.08\n        count += 1\n\n    # Remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n    return centers, radii\n\ndef initialize_pattern_adaptive_grid(n):\n    \"\"\"Initialize with an adaptive grid pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Larger circles near the center\n    num_circles_center = 9\n    grid_size_center = int(np.sqrt(num_circles_center))\n    spacing_center = 0.3\n    center_x = 0.5 - spacing_center\n    center_y = 0.5 - spacing_center\n\n    for i in range(grid_size_center):\n        for j in range(grid_size_center):\n            centers[count] = [center_x + i * spacing_center, center_y + j * spacing_center]\n            radii[count] = 0.09\n            count += 1\n\n    # Smaller circles towards the edges\n    num_circles_edge = n - num_circles_center\n    grid_size_edge = int(np.sqrt(num_circles_edge))\n    spacing_edge = 0.2\n    start_x = 0.1\n    start_y = 0.1\n\n    for i in range(grid_size_edge):\n        for j in range(grid_size_edge):\n            if count < n:\n                centers[count] = [start_x + i * spacing_edge, start_y + j * spacing_edge]\n                radii[count] = 0.07\n                count += 1\n\n    # Fill remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0 # Increased Repulsion\n    wall_repulsion = 25.0 # Increased Wall Repulsion\n    dt = 0.01\n    dampening = 0.95\n    gravity = 0.006  # Add a weak gravity towards the center\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - Reduce Perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.008 * temperature, centers.shape)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0012 #Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.6) # Increased Growth\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.12) #Increased Shrink\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.004, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0015) # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist: # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns, multi-stage optimization, and adaptive radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple initializations and optimization strategies\n    for strategy in range(9):  # Increased strategies including a Fibonacci lattice\n        # Initialize with different patterns\n        if strategy == 0:\n            centers, radii = initialize_pattern_hexagonal(n)\n        elif strategy == 1:\n            centers, radii = initialize_pattern_grid(n)\n        elif strategy == 2:\n            centers, radii = initialize_pattern_hybrid(n)\n        elif strategy == 3:\n            centers, radii = initialize_pattern_corner_biased(n)\n        elif strategy == 4:\n            centers, radii = initialize_pattern_random(n)\n        elif strategy == 5:\n            centers, radii = initialize_pattern_modified_hexagonal(n)\n        elif strategy == 6:\n            centers, radii = initialize_pattern_adaptive_grid(n)\n        elif strategy == 7:\n            centers, radii = initialize_pattern_triangular(n)\n        else:\n            centers, radii = initialize_pattern_fibonacci(n) # New strategy\n\n        # Multi-stage optimization\n        centers, radii = optimize_stage1(centers, radii, iterations=300)\n        centers, radii = optimize_stage2(centers, radii, iterations=300)\n        centers, radii = optimize_stage3(centers, radii, iterations=500)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_fibonacci(n):\n    \"\"\"Initialize with a Fibonacci lattice-like pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    phi = (1 + np.sqrt(5)) / 2  # Golden ratio\n    for i in range(n):\n        angle = 2 * np.pi * i / phi\n        radius = np.sqrt(i / (n - 1)) * 0.45  # Scale to fit within the unit square\n        x = 0.5 + radius * np.cos(angle)\n        y = 0.5 + radius * np.sin(angle)\n        centers[i] = [x, y]\n        radii[i] = 0.06 + np.random.rand() * 0.03  # Variable radii\n    return centers, radii\n\ndef initialize_pattern_triangular(n):\n    \"\"\"Initialize with a triangular lattice pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Parameters for the triangular lattice\n    side_length = 0.18  # Adjust for density\n    x_offset = 0.0\n    y_offset = 0.0\n\n    for i in range(8):\n        for j in range(8):\n            if count < n:\n                x = x_offset + i * side_length\n                y = y_offset + j * side_length * np.sqrt(3) / 2\n                if i % 2 != 0:\n                    x += side_length / 2\n                centers[count] = [x, y]\n                radii[count] = 0.075\n                count += 1\n\n    # Randomly place remaining circles\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.05 + 0.05\n        count += 1\n\n    return centers, radii\n\ndef initialize_pattern_hexagonal(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.115  # Slightly Larger center circle\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.098\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.088\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.095 * 1.05 + ring_radius * 1.05 #Slightly increased distance\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.093\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (3 circles) - Reduced to 1 to prevent overlap and add random\n    edge_radius = 0.083\n    centers[count] = [0.5, edge_radius]\n    radii[count] = edge_radius\n    count += 1\n    # Removed 2 Edge Circles\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\n\ndef initialize_pattern_grid(n):\n    \"\"\"Initialize with a grid pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Create a 5x5 grid (25 circles) plus 1 in center\n    grid_size = 5\n    spacing = 1.0 / grid_size\n    count = 0\n\n    # Grid circles\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < 25:\n                centers[count] = [spacing / 2 + i * spacing, spacing / 2 + j * spacing]\n\n                # Larger circles in the middle, smaller at edges\n                dist_to_center = np.sqrt((centers[count][0] - 0.5) ** 2 + (centers[count][1] - 0.5) ** 2)\n                radii[count] = 0.115 * (1 - dist_to_center**1.5) # Quadratic falloff, adjusted power\n                count += 1\n\n    # One extra circle in the center with variable size\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.055\n    count += 1\n\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_hybrid(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on known good patterns for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.125\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.105\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (6 circles)\n    middle_radius = 0.095\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6\n        dist = radii[0] + 2 * inner_radius * 1.05 + middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Outer partial ring (9 circles)\n    outer_radius = 0.085\n    for i in range(9):\n        angle = 2 * np.pi * i / 9\n        dist = radii[0] + 2 * inner_radius * 1.05 + 2 * middle_radius * 1.05\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = outer_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n    return centers, radii\n\n\ndef initialize_pattern_corner_biased(n):\n    \"\"\"Initialize with larger circles in the corners\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    corner_radius = 0.105\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    remaining = n - 4\n    grid_size = int(np.sqrt(remaining))\n    spacing = (1 - 2 * corner_radius) / (grid_size - 1) if grid_size > 1 else 0.5\n\n    count = 4\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                x = corner_radius + i * spacing\n                y = corner_radius + j * spacing\n                centers[count] = [x, y]\n                radii[count] = 0.073\n                count += 1\n    while count < n:\n      centers[count] = np.random.rand(2) * 0.9 + 0.05 # Ensure inside\n      radii[count] = np.random.rand() * 0.05 + 0.05 # Radii between 0.05 and 0.1\n      count += 1\n\n\n    return centers, radii\n\ndef initialize_pattern_random(n):\n    \"\"\"Initialize with random positions and radii\"\"\"\n    centers = np.random.rand(n, 2) * 0.8 + 0.1 # Ensure inside\n    radii = np.random.rand(n) * 0.07 + 0.05  # Radii between 0.05 and 0.12\n    return centers, radii\n\ndef initialize_pattern_modified_hexagonal(n):\n    \"\"\"Initialize with a modified hexagonal pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Central circle\n    centers[count] = [0.5, 0.5]\n    radii[count] = 0.12\n    count += 1\n\n    # Six circles around the center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.10\n        count += 1\n\n    # Twelve circles in the next layer\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        dist = radii[0] + 2 * 0.10\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = 0.08\n        count += 1\n\n    # Remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n    return centers, radii\n\ndef initialize_pattern_adaptive_grid(n):\n    \"\"\"Initialize with an adaptive grid pattern.\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    count = 0\n\n    # Larger circles near the center\n    num_circles_center = 9\n    grid_size_center = int(np.sqrt(num_circles_center))\n    spacing_center = 0.3\n    center_x = 0.5 - spacing_center\n    center_y = 0.5 - spacing_center\n\n    for i in range(grid_size_center):\n        for j in range(grid_size_center):\n            centers[count] = [center_x + i * spacing_center, center_y + j * spacing_center]\n            radii[count] = 0.09\n            count += 1\n\n    # Smaller circles towards the edges\n    num_circles_edge = n - num_circles_center\n    grid_size_edge = int(np.sqrt(num_circles_edge))\n    spacing_edge = 0.2\n    start_x = 0.1\n    start_y = 0.1\n\n    for i in range(grid_size_edge):\n        for j in range(grid_size_edge):\n            if count < n:\n                centers[count] = [start_x + i * spacing_edge, start_y + j * spacing_edge]\n                radii[count] = 0.07\n                count += 1\n\n    # Fill remaining circles randomly\n    while count < n:\n        centers[count] = np.random.rand(2) * 0.8 + 0.1\n        radii[count] = np.random.rand() * 0.04 + 0.06\n        count += 1\n\n    return centers, radii\n\n\ndef optimize_stage1(centers, radii, iterations):\n    \"\"\"\n    First optimization stage: Resolve overlaps and establish basic structure\n    \"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 25.0 # Increased Repulsion\n    wall_repulsion = 25.0 # Increased Wall Repulsion\n    dt = 0.01\n    dampening = 0.95\n    gravity = 0.006  # Add a weak gravity towards the center\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        temperature = 1.0 - iter / iterations  # Simulated annealing temperature\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n            # Gravity towards center\n            forces[i] -= gravity * (centers[i] - 0.5)\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Add random perturbation (simulated annealing) - Reduce Perturbation\n        if iter % 20 == 0:\n            centers += np.random.normal(0, 0.008 * temperature, centers.shape)\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\n\ndef optimize_stage2(centers, radii, iterations):\n    \"\"\"\n    Second optimization stage: Grow radii while maintaining valid packing\n    \"\"\"\n    n = len(centers)\n    growth_rate = 0.0012 #Increased growth rate\n\n    for _ in range(iterations):\n        # Calculate overlaps\n        overlaps = np.zeros(n)\n\n        # Circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    overlaps[i] += overlap\n                    overlaps[j] += overlap\n\n        # Wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                overlaps[i] += r - x\n            if x > 1 - r:\n                overlaps[i] += x - (1 - r)\n            if y < r:\n                overlaps[i] += r - y\n            if y > 1 - r:\n                overlaps[i] += y - (1 - r)\n\n        # Grow circles without overlaps\n        for i in range(n):\n            if overlaps[i] <= 1e-6:\n                # Calculate available space\n                min_dist_to_others = float('inf')\n                for j in range(n):\n                    if i != j:\n                        dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                        min_dist_to_others = min(min_dist_to_others, dist)\n\n                space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n                available_space = min(min_dist_to_others, space_to_walls) - radii[i]\n\n                # Grow radius based on available space\n                radii[i] += min(growth_rate, available_space * 0.6) # Increased Growth\n            else:\n                # Shrink overlapping circles\n                radii[i] = max(0.01, radii[i] - overlaps[i] * 0.12) #Increased Shrink\n\n    return centers, radii\n\n\ndef optimize_stage3(centers, radii, iterations):\n    \"\"\"\n    Third optimization stage: Fine-tune positions and sizes\n    \"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.01  # Initial temperature for simulated annealing\n    cooling_rate = 0.995  # Cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radius\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.004, 2)  # Reduced position perturbation\n        radius_change = np.random.normal(0, 0.0015) # Reduced radius perturbation\n        new_radii[idx] = max(0.01, new_radii[idx] + radius_change)\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps - more efficient overlap check\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            dist_vec = new_centers[idx] - new_centers[i]\n            dist_sq = np.sum(dist_vec * dist_vec)\n            min_dist = new_radii[idx] + new_radii[i]\n            if dist_sq < min_dist * min_dist: # Avoid sqrt\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers\n                radii = new_radii\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n        # Periodically optimize all radii\n        if iter % 50 == 0:\n            centers, radii = optimize_all_radii(centers, radii)\n            sum_radii = np.sum(radii)\n            if sum_radii > best_sum:\n                best_sum = sum_radii\n                best_centers = centers.copy()\n                best_radii = radii.copy()\n\n    return best_centers, best_radii\n\n\ndef optimize_all_radii(centers, radii):\n    \"\"\"Optimize all radii to fill available space\"\"\"\n    n = len(centers)\n\n    # Calculate available space for each circle\n    for _ in range(5):  # Reduced iterations for speed\n        for i in range(n):\n            # Calculate minimum distance to other circles\n            min_dist_to_others = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.linalg.norm(centers[i] - centers[j]) - radii[j]\n                    min_dist_to_others = min(min_dist_to_others, dist)\n\n            # Calculate minimum distance to walls\n            space_to_walls = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Set radius to fill available space - softened update\n            available_space = min(min_dist_to_others, space_to_walls)\n            radii[i] = 0.92 * radii[i] + 0.08 * available_space # Dampened update\n\n    return centers, radii\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}