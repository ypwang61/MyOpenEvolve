{"id": "1711de3b-14be-420b-bd42-77b86e2da573", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a better pattern\n    centers, radii = initialize_optimized_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_optimized_pattern():\n    \"\"\"\n    Initialize with a pattern that places larger circles in the center\n    and smaller circles towards the edges, mimicking optimal packing arrangements.  Uses a layered approach with corner circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Four circles in the corners\n    corner_radius = 0.072\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[:4] = corner_radius\n\n    # Central circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.16  # Increased radius for the central circle\n\n    # Layer 1: 6 circles around the center\n    num_layer1 = 6\n    radius_layer1 = 0.11\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        distance_from_center = 0.3\n        centers[5 + i] = [0.5 + distance_from_center * np.cos(angle),\n                          0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + i] = radius_layer1\n\n    # Layer 2: Remaining circles (distributed more evenly)\n    num_remaining = n - 5 - num_layer1\n    radius_layer2 = 0.065\n    for i in range(num_remaining):\n        angle = 2 * np.pi * i / num_remaining\n        distance_from_center = 0.45  # Further out\n        centers[5 + num_layer1 + i] = [0.5 + distance_from_center * np.cos(angle),\n                                        0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + num_layer1 + i] = radius_layer2\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.  Uses a more efficient and robust physics simulation and gradient descent with momentum.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based repulsion and attraction\n    repulsion_strength = 0.018  # Adjusted repulsion\n    attraction_strength = 0.00012 # Slightly reduced attraction\n    border_repulsion = 0.008  # Adjusted border repulsion\n    num_iterations = 600  # More iterations\n\n    # Initialize velocities for momentum\n    velocities = np.zeros_like(centers)\n    momentum = 0.75  # Momentum factor\n\n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        overlap = min_dist - dist\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += repulsion_strength * direction * overlap # Repulsion proportional to overlap\n\n        # Circle-center attraction (to keep them somewhat centered)\n        for i in range(n):\n            direction = (0.5, 0.5) - centers[i]\n            forces[i] += attraction_strength * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] += border_repulsion / (x + 0.001)**2 - border_repulsion / ((1 - x) + 0.001)**2\n            forces[i, 1] += border_repulsion / (y + 0.001)**2 - border_repulsion / ((1 - y) + 0.001)**2\n\n        # Update positions with momentum - Damping for stability\n        damping = 0.55 # Damping factor\n        velocities = momentum * velocities + (1 - momentum) * forces\n        centers += velocities * (1 - damping)\n        centers = np.clip(centers, 0.001, 0.999)  # Stay within bounds\n\n        # Adjust radii - ensure no overlaps\n        radii = compute_max_radii(centers)\n\n\n    # Stage 2: Gradient Ascent (fine tuning) with adaptive learning rate and momentum\n    learning_rate = 0.00065  # Adjusted learning rate for finer tuning\n    num_gradient_iterations = 350  # Adjusted iterations\n\n    # Initialize velocities for gradient descent momentum\n    grad_velocities = np.zeros_like(centers)\n    grad_momentum = 0.85\n\n    for _ in range(num_gradient_iterations):\n        radii = compute_max_radii(centers)\n        gradients = np.zeros_like(centers)\n\n        for i in range(n):\n            for dim in range(2):\n                delta = 0.000065 # Reduced delta for more accurate gradients\n                perturbed_centers = centers.copy()\n                perturbed_centers[i, dim] += delta\n                perturbed_radii = compute_max_radii(perturbed_centers)\n                gradient = (np.sum(perturbed_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n\n        # Update positions with momentum\n        grad_velocities = grad_momentum * grad_velocities + (1 - grad_momentum) * gradients\n        centers += learning_rate * grad_velocities\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n        learning_rate *= 0.9955  # Adaptive learning rate decay - slower decay\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(90):  # More iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]) / 2.0) # Divide by 2 to distribute the space\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "c417027b-0b0d-4799-9125-199cc9b536ea", "generation": 6, "timestamp": 1750751347.3112576, "iteration_found": 37, "metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "island": 3}, "artifacts_json": "{\"timeout\": true, \"timeout_duration\": 90, \"failure_stage\": \"stage1\", \"error_type\": \"timeout\"}", "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - stage1_passed: 0.0000\n- error: 0.0000\n- timeout: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n## Last Execution Output\n\n### timeout\n```\nTrue\n```\n\n### timeout_duration\n```\n90\n```\n\n### failure_stage\n```\nstage1\n```\n\n### error_type\n```\ntimeout\n```\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.4015)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.3446), Performs well on target_ratio (0.1308), Performs well on combined_score (0.1308)\n\n\n### Program 4 (Score: 0.4015)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and adaptive radii.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.3446), Performs well on target_ratio (0.1308), Performs well on combined_score (0.1308)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9595)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles, optimized with gradient descent and adaptive radii\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a better pattern\n    centers, radii = initialize_optimized_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_optimized_pattern():\n    \"\"\"\n    Initialize with a pattern that places larger circles in the center\n    and smaller circles towards the edges, mimicking optimal packing arrangements.  Uses a layered approach with corner circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Four circles in the corners\n    corner_radius = 0.075\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[:4] = corner_radius\n\n    # Central circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.15  # Increased radius for the central circle\n\n    # Layer 1: 6 circles around the center\n    num_layer1 = 6\n    radius_layer1 = 0.1\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        distance_from_center = 0.3\n        centers[5 + i] = [0.5 + distance_from_center * np.cos(angle),\n                          0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + i] = radius_layer1\n\n    # Layer 2: Remaining circles\n    num_remaining = n - 5 - num_layer1\n    radius_layer2 = 0.06\n    for i in range(num_remaining):\n        angle = 2 * np.pi * i / num_remaining\n        distance_from_center = 0.48  # Further out\n        centers[5 + num_layer1 + i] = [0.5 + distance_from_center * np.cos(angle),\n                                        0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + num_layer1 + i] = radius_layer2\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.  Uses a more efficient and robust physics simulation and gradient descent with momentum.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based repulsion and attraction\n    repulsion_strength = 0.015  # Adjusted repulsion\n    attraction_strength = 0.00015 # Slightly reduced attraction\n    border_repulsion = 0.0075  # Adjusted border repulsion\n    num_iterations = 500  # More iterations\n\n    # Initialize velocities for momentum\n    velocities = np.zeros_like(centers)\n    momentum = 0.7  # Momentum factor\n\n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        overlap = min_dist - dist\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += repulsion_strength * direction * overlap # Repulsion proportional to overlap\n\n        # Circle-center attraction (to keep them somewhat centered)\n        for i in range(n):\n            direction = (0.5, 0.5) - centers[i]\n            forces[i] += attraction_strength * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] += border_repulsion / (x + 0.001)**2 - border_repulsion / ((1 - x) + 0.001)**2\n            forces[i, 1] += border_repulsion / (y + 0.001)**2 - border_repulsion / ((1 - y) + 0.001)**2\n\n        # Update positions with momentum - Damping for stability\n        damping = 0.6 # Damping factor\n        velocities = momentum * velocities + (1 - momentum) * forces\n        centers += velocities * (1 - damping)\n        centers = np.clip(centers, 0.001, 0.999)  # Stay within bounds\n\n        # Adjust radii - ensure no overlaps\n        radii = compute_max_radii(centers)\n\n\n    # Stage 2: Gradient Ascent (fine tuning) with adaptive learning rate and momentum\n    learning_rate = 0.00075  # Adjusted learning rate for finer tuning\n    num_gradient_iterations = 300  # Adjusted iterations\n\n    # Initialize velocities for gradient descent momentum\n    grad_velocities = np.zeros_like(centers)\n    grad_momentum = 0.8\n\n    for _ in range(num_gradient_iterations):\n        radii = compute_max_radii(centers)\n        gradients = np.zeros_like(centers)\n\n        for i in range(n):\n            for dim in range(2):\n                delta = 0.000075 # Reduced delta for more accurate gradients\n                perturbed_centers = centers.copy()\n                perturbed_centers[i, dim] += delta\n                perturbed_radii = compute_max_radii(perturbed_centers)\n                gradient = (np.sum(perturbed_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n\n        # Update positions with momentum\n        grad_velocities = grad_momentum * grad_velocities + (1 - grad_momentum) * gradients\n        centers += learning_rate * grad_velocities\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n        learning_rate *= 0.996  # Adaptive learning rate decay - slower decay\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(75):  # More iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]) / 2.0) # Divide by 2 to distribute the space\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics and gradient descent, optimized for AlphaEvolve.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a better pattern\n    centers, radii = initialize_optimized_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_optimized_pattern():\n    \"\"\"\n    Initialize with a pattern that places larger circles in the center\n    and smaller circles towards the edges, mimicking optimal packing arrangements.  Uses a layered approach with corner circles.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Four circles in the corners\n    corner_radius = 0.072\n    centers[0] = [corner_radius, corner_radius]\n    centers[1] = [1 - corner_radius, corner_radius]\n    centers[2] = [corner_radius, 1 - corner_radius]\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[:4] = corner_radius\n\n    # Central circle\n    centers[4] = [0.5, 0.5]\n    radii[4] = 0.16  # Increased radius for the central circle\n\n    # Layer 1: 6 circles around the center\n    num_layer1 = 6\n    radius_layer1 = 0.11\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        distance_from_center = 0.3\n        centers[5 + i] = [0.5 + distance_from_center * np.cos(angle),\n                          0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + i] = radius_layer1\n\n    # Layer 2: Remaining circles (distributed more evenly)\n    num_remaining = n - 5 - num_layer1\n    radius_layer2 = 0.065\n    for i in range(num_remaining):\n        angle = 2 * np.pi * i / num_remaining\n        distance_from_center = 0.45  # Further out\n        centers[5 + num_layer1 + i] = [0.5 + distance_from_center * np.cos(angle),\n                                        0.5 + distance_from_center * np.sin(angle)]\n        radii[5 + num_layer1 + i] = radius_layer2\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.  Uses a more efficient and robust physics simulation and gradient descent with momentum.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based repulsion and attraction\n    repulsion_strength = 0.018  # Adjusted repulsion\n    attraction_strength = 0.00012 # Slightly reduced attraction\n    border_repulsion = 0.008  # Adjusted border repulsion\n    num_iterations = 600  # More iterations\n\n    # Initialize velocities for momentum\n    velocities = np.zeros_like(centers)\n    momentum = 0.75  # Momentum factor\n\n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        overlap = min_dist - dist\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += repulsion_strength * direction * overlap # Repulsion proportional to overlap\n\n        # Circle-center attraction (to keep them somewhat centered)\n        for i in range(n):\n            direction = (0.5, 0.5) - centers[i]\n            forces[i] += attraction_strength * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] += border_repulsion / (x + 0.001)**2 - border_repulsion / ((1 - x) + 0.001)**2\n            forces[i, 1] += border_repulsion / (y + 0.001)**2 - border_repulsion / ((1 - y) + 0.001)**2\n\n        # Update positions with momentum - Damping for stability\n        damping = 0.55 # Damping factor\n        velocities = momentum * velocities + (1 - momentum) * forces\n        centers += velocities * (1 - damping)\n        centers = np.clip(centers, 0.001, 0.999)  # Stay within bounds\n\n        # Adjust radii - ensure no overlaps\n        radii = compute_max_radii(centers)\n\n\n    # Stage 2: Gradient Ascent (fine tuning) with adaptive learning rate and momentum\n    learning_rate = 0.00065  # Adjusted learning rate for finer tuning\n    num_gradient_iterations = 350  # Adjusted iterations\n\n    # Initialize velocities for gradient descent momentum\n    grad_velocities = np.zeros_like(centers)\n    grad_momentum = 0.85\n\n    for _ in range(num_gradient_iterations):\n        radii = compute_max_radii(centers)\n        gradients = np.zeros_like(centers)\n\n        for i in range(n):\n            for dim in range(2):\n                delta = 0.000065 # Reduced delta for more accurate gradients\n                perturbed_centers = centers.copy()\n                perturbed_centers[i, dim] += delta\n                perturbed_radii = compute_max_radii(perturbed_centers)\n                gradient = (np.sum(perturbed_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n\n        # Update positions with momentum\n        grad_velocities = grad_momentum * grad_velocities + (1 - grad_momentum) * gradients\n        centers += learning_rate * grad_velocities\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n        learning_rate *= 0.9955  # Adaptive learning rate decay - slower decay\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(90):  # More iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]) / 2.0) # Divide by 2 to distribute the space\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}