{"id": "237b8695-447f-45b4-8609-7934805c7fc8", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    patterns = [\n        initialize_pattern_hexagonal_varied,\n        initialize_pattern_hybrid_refined,\n        initialize_pattern_corner_biased_adaptive,\n        initialize_pattern_specialized_26_optimized,  # New specialized pattern for n=26\n        initialize_pattern_literature_based_improved  # Pattern based on mathematical literature\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with different patterns\n        centers, radii = pattern_func(n)\n\n        # Optimize with our multi-stage approach\n        centers, radii = optimize_packing(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal_varied(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.138\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.118\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.007\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.097\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle for better packing\n        dist = radii[0] + 0.118 + 0.097 + 0.012\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.087\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_refined(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.143\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.113\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.007\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (8 circles)\n    middle_radius = 0.101\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi/8\n        dist = radii[0] + inner_radius*2 + 0.012\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (6 circles) - reduced number\n    edge_radius = 0.091\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, 1 - edge_radius],  # Adjusted position\n        [0.75, edge_radius]       # Adjusted position\n    ]\n\n    for i in range(min(6, n - count)):\n        centers[count] = edge_positions[i]\n        radii[count] = edge_radius\n        count += 1\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_corner_biased_adaptive(n):\n    \"\"\"Initialize with larger circles in the corners and edges, adaptively sized\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles (4 circles)\n    corner_radius = 0.113\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Edge circles (8 circles)\n    edge_radius = 0.101\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n\n    for i in range(8):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n\n    # Interior circles (14 circles)\n    interior_radius = 0.083\n    count = 12\n\n    # Create a grid in the interior\n    positions = [[0.2, 0.2], [0.5, 0.2], [0.8, 0.2],\n                 [0.2, 0.5], [0.5, 0.5], [0.8, 0.5],\n                 [0.2, 0.8], [0.5, 0.8], [0.8, 0.8],\n                 [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65], [0.5, 0.35]]\n\n    for i in range(min(14, n - count)):\n        centers[count] = positions[i]\n        radii[count] = interior_radius\n        count += 1\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_specialized_26_optimized(n):\n    \"\"\"Specialized pattern for exactly 26 circles based on mathematical insights, optimized radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.148  # Increased radius\n\n    # First ring (5 circles)\n    first_ring_radius = 0.118\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + first_ring_radius + 0.007\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n\n    # Second ring (10 circles)\n    second_ring_radius = 0.101\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10\n        dist = radii[0] + first_ring_radius*2 + 0.017\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = second_ring_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[16] = [corner_radius, corner_radius]\n    radii[16] = corner_radius\n    centers[17] = [1 - corner_radius, corner_radius]\n    radii[17] = corner_radius\n    centers[18] = [corner_radius, 1 - corner_radius]\n    radii[18] = corner_radius\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[19] = corner_radius\n\n    # Edge circles (6 circles)\n    edge_radius = 0.091\n    centers[20] = [0.5, edge_radius]\n    radii[20] = edge_radius\n    centers[21] = [0.5, 1 - edge_radius]\n    radii[21] = edge_radius\n    centers[22] = [edge_radius, 0.5]\n    radii[22] = edge_radius\n    centers[23] = [1 - edge_radius, 0.5]\n    radii[23] = edge_radius\n    centers[24] = [0.25, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [0.75, edge_radius]\n    radii[25] = edge_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_literature_based_improved(n):\n    \"\"\"Pattern based on mathematical literature for optimal circle packing, refined radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on research by Markot & Csendes for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.151  # Increased radius\n\n    # First ring (7 circles)\n    first_ring_radius = 0.111\n    for i in range(7):\n        angle = 2 * np.pi * i / 7\n        dist = radii[0] + first_ring_radius + 0.007\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n\n    # Second ring (11 circles)\n    second_ring_radius = 0.095\n    for i in range(11):\n        angle = 2 * np.pi * i / 11 + np.pi/11\n        dist = radii[0] + first_ring_radius*2 + 0.017\n        centers[i+8] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+8] = second_ring_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.091\n    centers[19] = [corner_radius, corner_radius]\n    radii[19] = corner_radius\n    centers[20] = [1 - corner_radius, corner_radius]\n    radii[20] = corner_radius\n    centers[21] = [corner_radius, 1 - corner_radius]\n    radii[21] = corner_radius\n    centers[22] = [1 - corner_radius, 1 - corner_radius]\n    radii[22] = corner_radius\n\n    # Edge circles (3 circles)\n    edge_radius = 0.085\n    centers[23] = [0.5, edge_radius]\n    radii[23] = edge_radius\n    centers[24] = [0.5, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [edge_radius, 0.5]\n    radii[25] = edge_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=12):\n    \"\"\"Resolve overlaps in the initial configuration by shrinking radii, fewer iterations\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        has_overlap = False\n\n        # Check for circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist - 1e-6:\n                    has_overlap = True\n                    # Shrink both radii proportionally\n                    ratio = dist / min_dist\n                    radii[i] *= 0.975 * ratio  # Reduced shrinkage factor\n                    radii[j] *= 0.975 * ratio\n\n        # Check for wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                has_overlap = True\n                # Shrink radius\n                radii[i] *= 0.975\n\n        if not has_overlap:\n            break\n\n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"Multi-stage optimization of circle packing, adjusted parameters\"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = optimize_physics_based(centers, radii, iterations=130)  # Reduced iterations\n\n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = optimize_growth(centers, radii, iterations=130)  # Reduced iterations\n\n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = optimize_numerical(centers, radii)\n\n    # Stage 4: Final simulated annealing for fine adjustments\n    centers, radii = optimize_annealing(centers, radii, iterations=180)  # Reduced iterations\n\n    return centers, radii\n\ndef optimize_physics_based(centers, radii, iterations=130):\n    \"\"\"Physics-based optimization with repulsion forces, adjusted parameters\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 35.0  # Increased repulsion\n    wall_repulsion = 35.0  # Increased repulsion\n    dt = 0.022  # Adjusted time step\n    dampening = 0.86  # Adjusted dampening\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef optimize_growth(centers, radii, iterations=130):\n    \"\"\"Grow radii while maintaining valid packing, adjusted growth rate\"\"\"\n    n = len(centers)\n    growth_rate = 0.0015  # Adjusted growth rate\n\n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n\n        # Circle-circle constraints\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                space_i = dist - radii[j] - 1e-6\n                space_j = dist - radii[i] - 1e-6\n                available_space[i] = min(available_space[i], space_i)\n                available_space[j] = min(available_space[j], space_j)\n\n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - 0, y - 0, 1 - x, 1 - y)\n            available_space[i] = min(available_space[i], wall_space)\n\n        # Grow radii proportionally to available space\n        for i in range(n):\n            if available_space[i] > radii[i] * 0.004:  # Only grow if there's space, reduced factor\n                growth = min(growth_rate, available_space[i] - radii[i])\n                radii[i] += growth * 0.92  # Grow conservatively\n    return centers, radii\n\ndef optimize_numerical(centers, radii):\n    \"\"\"Numerical optimization using scipy.optimize.minimize, adjusted parameters\"\"\"\n    n = len(centers)\n\n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n\n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n\n    # Objective function: maximize sum of radii\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)  # Negative because we're minimizing\n\n    # Constraints: no overlaps\n    constraints = []\n\n    # Circle-circle non-overlap\n    for i in range(n):\n        for j in range(i + 1, n):\n            def circle_constraint(params, i=i, j=j):\n                centers, radii = unpack_params(params)\n                dist = np.linalg.norm(centers[i] - centers[j])\n                return dist - (radii[i] + radii[j]) - 1e-7\n\n            constraints.append({'type': 'ineq', 'fun': circle_constraint})\n\n    # Circles within bounds\n    for i in range(n):\n        def left_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 0] - radii[i]\n\n        def right_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 0] - radii[i]\n\n        def bottom_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 1] - radii[i]\n\n        def top_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 1] - radii[i]\n\n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n\n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(params, i=i):\n            _, radii = unpack_params(params)\n            return radii[i] - 0.008  # Minimum radius of 0.008\n\n        constraints.append({'type': 'ineq', 'fun': min_radius})\n\n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n\n    # Run optimization with limited iterations to avoid excessive computation\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints=constraints,\n        options={'maxiter': 75, 'ftol': 1e-7}\n    )\n\n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n\n    return centers, radii\n\ndef optimize_annealing(centers, radii, iterations=180):\n    \"\"\"Fine-tune with simulated annealing, adjusted parameters\"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.016 # Adjusted temperature\n    cooling_rate = 0.982 # Adjusted cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radii\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.007, 2) # Adjusted perturbation\n        radius_change = np.random.normal(0, 0.003) # Adjusted perturbation\n        new_radii[idx] = max(0.008, new_radii[idx] + radius_change) # Adjusted min radius\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n\n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            min_dist = new_radii[idx] + new_radii[i]\n\n            if dist < min_dist - 1e-6:\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n    return best_centers, best_radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END", "language": "python", "parent_id": "c960c505-8180-422f-a8b6-6ac42466ca02", "generation": 9, "timestamp": 1750805469.4157465, "iteration_found": 190, "metrics": {"validity": 1.0, "sum_radii": 2.6093225421763657, "target_ratio": 0.9902552342225298, "combined_score": 0.9902552342225298, "eval_time": 35.05369758605957}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 2.6167483005842556, "target_ratio": 0.9930733588555051, "combined_score": 0.9930733588555051, "eval_time": 32.212769508361816}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.637 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.412, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 2.6167\n- target_ratio: 0.9931\n- combined_score: 0.9931\n- eval_time: 32.2128\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.6181, target_ratio: 0.9936, combined_score: 0.9936, eval_time: 96.8205\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5839, target_ratio: 0.9806, combined_score: 0.9806, eval_time: 99.5983\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.5828, target_ratio: 0.9802, combined_score: 0.9802, eval_time: 100.4894\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 5.1220)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.6360), Performs well on target_ratio (1.0004), Performs well on combined_score (1.0004), Performs well on eval_time (19.9734)\n\n\n### Program 2 (Score: 21.2065)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5828), Performs well on target_ratio (0.9802), Performs well on combined_score (0.9802), Performs well on eval_time (100.4894)\n\n\n### Program 3 (Score: 4.4867)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.5035), Performs well on target_ratio (0.9501), Performs well on combined_score (0.9501), Performs well on eval_time (17.0296)\n\n\n### Program 4 (Score: 5.3979)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.6868), Performs well on target_ratio (0.6402), Performs well on combined_score (0.6402), Performs well on eval_time (23.0224)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 4.9631)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n    \n    # Try multiple specialized patterns known to work well for n=26\n    patterns = [\n        initialize_pattern_hexagonal_varied,\n        initialize_pattern_hybrid_refined,\n        initialize_pattern_corner_biased_adaptive,\n        initialize_pattern_specialized_26_optimized,  # New specialized pattern for n=26\n        initialize_pattern_literature_based_improved  # Pattern based on mathematical literature\n    ]\n    \n    for pattern_func in patterns:\n        # Initialize with different patterns\n        centers, radii = pattern_func(n)\n        \n        # Optimize with our multi-stage approach\n        centers, radii = optimize_packing(centers, radii)\n        \n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n    \n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal_varied(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.135\n    \n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.115\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.005\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.095\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle for better packing\n        dist = radii[0] + 0.115 + 0.095 + 0.01\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.085\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    \n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    return centers, radii\n\ndef initialize_pattern_hybrid_refined(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.14\n    \n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.11\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.005\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n    \n    # Middle ring (8 circles)\n    middle_radius = 0.098\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi/8\n        dist = radii[0] + inner_radius*2 + 0.01\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.092\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    \n    # Edge circles (6 circles) - reduced number\n    edge_radius = 0.088\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, 1 - edge_radius],  # Adjusted position\n        [0.75, edge_radius]       # Adjusted position\n    ]\n    \n    for i in range(min(6, n - count)):\n        centers[count] = edge_positions[i]\n        radii[count] = edge_radius\n        count += 1\n    \n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    return centers, radii\n\ndef initialize_pattern_corner_biased_adaptive(n):\n    \"\"\"Initialize with larger circles in the corners and edges, adaptively sized\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.11\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n    \n    # Edge circles (8 circles)\n    edge_radius = 0.098\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n    \n    for i in range(8):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n    \n    # Interior circles (14 circles)\n    interior_radius = 0.08\n    count = 12\n    \n    # Create a grid in the interior\n    positions = [[0.2, 0.2], [0.5, 0.2], [0.8, 0.2],\n                 [0.2, 0.5], [0.5, 0.5], [0.8, 0.5],\n                 [0.2, 0.8], [0.5, 0.8], [0.8, 0.8],\n                 [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65], [0.5, 0.35]]\n\n    for i in range(min(14, n - count)):\n        centers[count] = positions[i]\n        radii[count] = interior_radius\n        count += 1\n    \n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    return centers, radii\n\ndef initialize_pattern_specialized_26_optimized(n):\n    \"\"\"Specialized pattern for exactly 26 circles based on mathematical insights, optimized radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.145  # Increased radius\n    \n    # First ring (5 circles)\n    first_ring_radius = 0.115\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + first_ring_radius + 0.005\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n    \n    # Second ring (10 circles)\n    second_ring_radius = 0.098\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10\n        dist = radii[0] + first_ring_radius*2 + 0.015\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = second_ring_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.092\n    centers[16] = [corner_radius, corner_radius]\n    radii[16] = corner_radius\n    centers[17] = [1 - corner_radius, corner_radius]\n    radii[17] = corner_radius\n    centers[18] = [corner_radius, 1 - corner_radius]\n    radii[18] = corner_radius\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[19] = corner_radius\n    \n    # Edge circles (6 circles)\n    edge_radius = 0.088\n    centers[20] = [0.5, edge_radius]\n    radii[20] = edge_radius\n    centers[21] = [0.5, 1 - edge_radius]\n    radii[21] = edge_radius\n    centers[22] = [edge_radius, 0.5]\n    radii[22] = edge_radius\n    centers[23] = [1 - edge_radius, 0.5]\n    radii[23] = edge_radius\n    centers[24] = [0.25, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [0.75, edge_radius]\n    radii[25] = edge_radius\n    \n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    return centers, radii\n\ndef initialize_pattern_literature_based_improved(n):\n    \"\"\"Pattern based on mathematical literature for optimal circle packing, refined radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Based on research by Markot & Csendes for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.148  # Increased radius\n    \n    # First ring (7 circles)\n    first_ring_radius = 0.108\n    for i in range(7):\n        angle = 2 * np.pi * i / 7\n        dist = radii[0] + first_ring_radius + 0.005\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n    \n    # Second ring (11 circles)\n    second_ring_radius = 0.092\n    for i in range(11):\n        angle = 2 * np.pi * i / 11 + np.pi/11\n        dist = radii[0] + first_ring_radius*2 + 0.015\n        centers[i+8] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+8] = second_ring_radius\n    \n    # Corner circles (4 circles)\n    corner_radius = 0.088\n    centers[19] = [corner_radius, corner_radius]\n    radii[19] = corner_radius\n    centers[20] = [1 - corner_radius, corner_radius]\n    radii[20] = corner_radius\n    centers[21] = [corner_radius, 1 - corner_radius]\n    radii[21] = corner_radius\n    centers[22] = [1 - corner_radius, 1 - corner_radius]\n    radii[22] = corner_radius\n    \n    # Edge circles (3 circles)\n    edge_radius = 0.082\n    centers[23] = [0.5, edge_radius]\n    radii[23] = edge_radius\n    centers[24] = [0.5, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [edge_radius, 0.5]\n    radii[25] = edge_radius\n    \n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n    \n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=15):\n    \"\"\"Resolve overlaps in the initial configuration by shrinking radii, fewer iterations\"\"\"\n    n = len(centers)\n    \n    for _ in range(iterations):\n        has_overlap = False\n        \n        # Check for circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist - 1e-6:\n                    has_overlap = True\n                    # Shrink both radii proportionally\n                    ratio = dist / min_dist\n                    radii[i] *= 0.98 * ratio  # Reduced shrinkage factor\n                    radii[j] *= 0.98 * ratio\n        \n        # Check for wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                has_overlap = True\n                # Shrink radius\n                radii[i] *= 0.98\n        \n        if not has_overlap:\n            break\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"Multi-stage optimization of circle packing, adjusted parameters\"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = optimize_physics_based(centers, radii, iterations=150)  # Reduced iterations\n    \n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = optimize_growth(centers, radii, iterations=150)  # Reduced iterations\n    \n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = optimize_numerical(centers, radii)\n    \n    # Stage 4: Final simulated annealing for fine adjustments\n    centers, radii = optimize_annealing(centers, radii, iterations=200)  # Reduced iterations\n    \n    return centers, radii\n\ndef optimize_physics_based(centers, radii, iterations=150):\n    \"\"\"Physics-based optimization with repulsion forces, adjusted parameters\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 30.0  # Increased repulsion\n    wall_repulsion = 30.0  # Increased repulsion\n    dt = 0.025  # Adjusted time step\n    dampening = 0.88  # Adjusted dampening\n    \n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n                \n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n        \n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n            \n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n        \n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n        \n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n    \n    return centers, radii\n\ndef optimize_growth(centers, radii, iterations=150):\n    \"\"\"Grow radii while maintaining valid packing, adjusted growth rate\"\"\"\n    n = len(centers)\n    growth_rate = 0.0012  # Adjusted growth rate\n    \n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n        \n        # Circle-circle constraints\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                space_i = dist - radii[j] - 1e-6\n                space_j = dist - radii[i] - 1e-6\n                available_space[i] = min(available_space[i], space_i)\n                available_space[j] = min(available_space[j], space_j)\n        \n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - 0, y - 0, 1 - x, 1 - y)\n            available_space[i] = min(available_space[i], wall_space)\n        \n        # Grow radii proportionally to available space\n        for i in range(n):\n            if available_space[i] > radii[i] * 0.005:  # Only grow if there's space, reduced factor\n                growth = min(growth_rate, available_space[i] - radii[i])\n                radii[i] += growth * 0.9  # Grow conservatively\n    \n    return centers, radii\n\ndef optimize_numerical(centers, radii):\n    \"\"\"Numerical optimization using scipy.optimize.minimize, adjusted parameters\"\"\"\n    n = len(centers)\n    \n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n    \n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n    \n    # Objective function: maximize sum of radii\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)  # Negative because we're minimizing\n    \n    # Constraints: no overlaps\n    constraints = []\n    \n    # Circle-circle non-overlap\n    for i in range(n):\n        for j in range(i + 1, n):\n            def circle_constraint(params, i=i, j=j):\n                centers, radii = unpack_params(params)\n                dist = np.linalg.norm(centers[i] - centers[j])\n                return dist - (radii[i] + radii[j]) - 1e-7\n            \n            constraints.append({'type': 'ineq', 'fun': circle_constraint})\n    \n    # Circles within bounds\n    for i in range(n):\n        def left_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 0] - radii[i]\n        \n        def right_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 0] - radii[i]\n        \n        def bottom_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 1] - radii[i]\n        \n        def top_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 1] - radii[i]\n        \n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n    \n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(params, i=i):\n            _, radii = unpack_params(params)\n            return radii[i] - 0.008  # Minimum radius of 0.008\n        \n        constraints.append({'type': 'ineq', 'fun': min_radius})\n    \n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n    \n    # Run optimization with limited iterations to avoid excessive computation\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints=constraints,\n        options={'maxiter': 80, 'ftol': 1e-7}\n    )\n    \n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n    \n    return centers, radii\n\ndef optimize_annealing(centers, radii, iterations=200):\n    \"\"\"Fine-tune with simulated annealing, adjusted parameters\"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n    \n    temperature = 0.018 # Adjusted temperature\n    cooling_rate = 0.985 # Adjusted cooling rate\n    \n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n        \n        # Randomly perturb positions and radii\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.008, 2) # Adjusted perturbation\n        radius_change = np.random.normal(0, 0.004) # Adjusted perturbation\n        new_radii[idx] = max(0.008, new_radii[idx] + radius_change) # Adjusted min radius\n        \n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n        \n        # Check for overlaps\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n            \n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            min_dist = new_radii[idx] + new_radii[i]\n            \n            if dist < min_dist - 1e-6:\n                valid = False\n                break\n        \n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n            \n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n        \n        # Cool temperature\n        temperature *= cooling_rate\n    \n    return best_centers, best_radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using specialized patterns and optimization techniques\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns and optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    best_centers = None\n    best_radii = None\n    best_sum = 0.0\n\n    # Try multiple specialized patterns known to work well for n=26\n    patterns = [\n        initialize_pattern_hexagonal_varied,\n        initialize_pattern_hybrid_refined,\n        initialize_pattern_corner_biased_adaptive,\n        initialize_pattern_specialized_26_optimized,  # New specialized pattern for n=26\n        initialize_pattern_literature_based_improved  # Pattern based on mathematical literature\n    ]\n\n    for pattern_func in patterns:\n        # Initialize with different patterns\n        centers, radii = pattern_func(n)\n\n        # Optimize with our multi-stage approach\n        centers, radii = optimize_packing(centers, radii)\n\n        # Keep the best result\n        sum_radii = np.sum(radii)\n        if sum_radii > best_sum:\n            best_sum = sum_radii\n            best_centers = centers.copy()\n            best_radii = radii.copy()\n\n    return best_centers, best_radii, best_sum\n\ndef initialize_pattern_hexagonal_varied(n):\n    \"\"\"Initialize with a hexagonal pattern with variable sizes\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Center circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.138\n\n    # First hexagonal ring (6 circles)\n    count = 1\n    ring_radius = 0.118\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + ring_radius + 0.007\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Second hexagonal ring (12 circles)\n    ring_radius = 0.097\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi/12  # Offset angle for better packing\n        dist = radii[0] + 0.118 + 0.097 + 0.012\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = ring_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.087\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_hybrid_refined(n):\n    \"\"\"Initialize with a hybrid pattern optimized for n=26\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.143\n\n    # Inner ring (6 circles)\n    count = 1\n    inner_radius = 0.113\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        dist = radii[0] + inner_radius + 0.007\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = inner_radius\n        count += 1\n\n    # Middle ring (8 circles)\n    middle_radius = 0.101\n    for i in range(8):\n        angle = 2 * np.pi * i / 8 + np.pi/8\n        dist = radii[0] + inner_radius*2 + 0.012\n        centers[count] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[count] = middle_radius\n        count += 1\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[count] = [corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n    centers[count] = [1 - corner_radius, 1 - corner_radius]\n    radii[count] = corner_radius\n    count += 1\n\n    # Edge circles (6 circles) - reduced number\n    edge_radius = 0.091\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, 1 - edge_radius],  # Adjusted position\n        [0.75, edge_radius]       # Adjusted position\n    ]\n\n    for i in range(min(6, n - count)):\n        centers[count] = edge_positions[i]\n        radii[count] = edge_radius\n        count += 1\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_corner_biased_adaptive(n):\n    \"\"\"Initialize with larger circles in the corners and edges, adaptively sized\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Corner circles (4 circles)\n    corner_radius = 0.113\n    centers[0] = [corner_radius, corner_radius]\n    radii[0] = corner_radius\n    centers[1] = [1 - corner_radius, corner_radius]\n    radii[1] = corner_radius\n    centers[2] = [corner_radius, 1 - corner_radius]\n    radii[2] = corner_radius\n    centers[3] = [1 - corner_radius, 1 - corner_radius]\n    radii[3] = corner_radius\n\n    # Edge circles (8 circles)\n    edge_radius = 0.101\n    edge_positions = [\n        [0.5, edge_radius],\n        [0.5, 1 - edge_radius],\n        [edge_radius, 0.5],\n        [1 - edge_radius, 0.5],\n        [0.25, edge_radius],\n        [0.75, edge_radius],\n        [0.25, 1 - edge_radius],\n        [0.75, 1 - edge_radius]\n    ]\n\n    for i in range(8):\n        centers[i+4] = edge_positions[i]\n        radii[i+4] = edge_radius\n\n    # Interior circles (14 circles)\n    interior_radius = 0.083\n    count = 12\n\n    # Create a grid in the interior\n    positions = [[0.2, 0.2], [0.5, 0.2], [0.8, 0.2],\n                 [0.2, 0.5], [0.5, 0.5], [0.8, 0.5],\n                 [0.2, 0.8], [0.5, 0.8], [0.8, 0.8],\n                 [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65], [0.5, 0.35]]\n\n    for i in range(min(14, n - count)):\n        centers[count] = positions[i]\n        radii[count] = interior_radius\n        count += 1\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_specialized_26_optimized(n):\n    \"\"\"Specialized pattern for exactly 26 circles based on mathematical insights, optimized radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.148  # Increased radius\n\n    # First ring (5 circles)\n    first_ring_radius = 0.118\n    for i in range(5):\n        angle = 2 * np.pi * i / 5\n        dist = radii[0] + first_ring_radius + 0.007\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n\n    # Second ring (10 circles)\n    second_ring_radius = 0.101\n    for i in range(10):\n        angle = 2 * np.pi * i / 10 + np.pi/10\n        dist = radii[0] + first_ring_radius*2 + 0.017\n        centers[i+6] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+6] = second_ring_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.095\n    centers[16] = [corner_radius, corner_radius]\n    radii[16] = corner_radius\n    centers[17] = [1 - corner_radius, corner_radius]\n    radii[17] = corner_radius\n    centers[18] = [corner_radius, 1 - corner_radius]\n    radii[18] = corner_radius\n    centers[19] = [1 - corner_radius, 1 - corner_radius]\n    radii[19] = corner_radius\n\n    # Edge circles (6 circles)\n    edge_radius = 0.091\n    centers[20] = [0.5, edge_radius]\n    radii[20] = edge_radius\n    centers[21] = [0.5, 1 - edge_radius]\n    radii[21] = edge_radius\n    centers[22] = [edge_radius, 0.5]\n    radii[22] = edge_radius\n    centers[23] = [1 - edge_radius, 0.5]\n    radii[23] = edge_radius\n    centers[24] = [0.25, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [0.75, edge_radius]\n    radii[25] = edge_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef initialize_pattern_literature_based_improved(n):\n    \"\"\"Pattern based on mathematical literature for optimal circle packing, refined radii\"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Based on research by Markot & Csendes for n=26\n    # Central large circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.151  # Increased radius\n\n    # First ring (7 circles)\n    first_ring_radius = 0.111\n    for i in range(7):\n        angle = 2 * np.pi * i / 7\n        dist = radii[0] + first_ring_radius + 0.007\n        centers[i+1] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+1] = first_ring_radius\n\n    # Second ring (11 circles)\n    second_ring_radius = 0.095\n    for i in range(11):\n        angle = 2 * np.pi * i / 11 + np.pi/11\n        dist = radii[0] + first_ring_radius*2 + 0.017\n        centers[i+8] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n        radii[i+8] = second_ring_radius\n\n    # Corner circles (4 circles)\n    corner_radius = 0.091\n    centers[19] = [corner_radius, corner_radius]\n    radii[19] = corner_radius\n    centers[20] = [1 - corner_radius, corner_radius]\n    radii[20] = corner_radius\n    centers[21] = [corner_radius, 1 - corner_radius]\n    radii[21] = corner_radius\n    centers[22] = [1 - corner_radius, 1 - corner_radius]\n    radii[22] = corner_radius\n\n    # Edge circles (3 circles)\n    edge_radius = 0.085\n    centers[23] = [0.5, edge_radius]\n    radii[23] = edge_radius\n    centers[24] = [0.5, 1 - edge_radius]\n    radii[24] = edge_radius\n    centers[25] = [edge_radius, 0.5]\n    radii[25] = edge_radius\n\n    # Adjust radii to avoid initial overlaps\n    centers, radii = resolve_overlaps(centers, radii)\n\n    return centers, radii\n\ndef resolve_overlaps(centers, radii, iterations=12):\n    \"\"\"Resolve overlaps in the initial configuration by shrinking radii, fewer iterations\"\"\"\n    n = len(centers)\n\n    for _ in range(iterations):\n        has_overlap = False\n\n        # Check for circle-circle overlaps\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist - 1e-6:\n                    has_overlap = True\n                    # Shrink both radii proportionally\n                    ratio = dist / min_dist\n                    radii[i] *= 0.975 * ratio  # Reduced shrinkage factor\n                    radii[j] *= 0.975 * ratio\n\n        # Check for wall overlaps\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r or x > 1 - r or y < r or y > 1 - r:\n                has_overlap = True\n                # Shrink radius\n                radii[i] *= 0.975\n\n        if not has_overlap:\n            break\n\n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"Multi-stage optimization of circle packing, adjusted parameters\"\"\"\n    # Stage 1: Resolve overlaps and establish basic structure\n    centers, radii = optimize_physics_based(centers, radii, iterations=130)  # Reduced iterations\n\n    # Stage 2: Grow radii while maintaining valid packing\n    centers, radii = optimize_growth(centers, radii, iterations=130)  # Reduced iterations\n\n    # Stage 3: Fine-tune with numerical optimization\n    centers, radii = optimize_numerical(centers, radii)\n\n    # Stage 4: Final simulated annealing for fine adjustments\n    centers, radii = optimize_annealing(centers, radii, iterations=180)  # Reduced iterations\n\n    return centers, radii\n\ndef optimize_physics_based(centers, radii, iterations=130):\n    \"\"\"Physics-based optimization with repulsion forces, adjusted parameters\"\"\"\n    n = len(centers)\n    velocity = np.zeros_like(centers)\n    repulsion_strength = 35.0  # Increased repulsion\n    wall_repulsion = 35.0  # Increased repulsion\n    dt = 0.022  # Adjusted time step\n    dampening = 0.86  # Adjusted dampening\n\n    for iter in range(iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist_vec = centers[i] - centers[j]\n                dist = np.linalg.norm(dist_vec)\n                min_dist = radii[i] + radii[j]\n\n                if dist < min_dist:\n                    overlap = min_dist - dist\n                    direction = dist_vec / (dist + 1e-8)\n                    force = repulsion_strength * overlap * direction\n                    forces[i] += force\n                    forces[j] -= force\n\n        # Wall repulsion\n        for i in range(n):\n            x, y = centers[i]\n            r = radii[i]\n\n            if x < r:\n                forces[i, 0] += wall_repulsion * (r - x)\n            if x > 1 - r:\n                forces[i, 0] -= wall_repulsion * (x - (1 - r))\n            if y < r:\n                forces[i, 1] += wall_repulsion * (r - y)\n            if y > 1 - r:\n                forces[i, 1] -= wall_repulsion * (y - (1 - r))\n\n        # Update positions using velocity Verlet integration\n        velocity = dampening * (velocity + forces * dt)\n        centers += velocity * dt\n\n        # Keep circles within bounds\n        for i in range(n):\n            centers[i, 0] = np.clip(centers[i, 0], radii[i], 1 - radii[i])\n            centers[i, 1] = np.clip(centers[i, 1], radii[i], 1 - radii[i])\n\n    return centers, radii\n\ndef optimize_growth(centers, radii, iterations=130):\n    \"\"\"Grow radii while maintaining valid packing, adjusted growth rate\"\"\"\n    n = len(centers)\n    growth_rate = 0.0015  # Adjusted growth rate\n\n    for _ in range(iterations):\n        # Calculate available space for each circle\n        available_space = np.ones(n) * float('inf')\n\n        # Circle-circle constraints\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                space_i = dist - radii[j] - 1e-6\n                space_j = dist - radii[i] - 1e-6\n                available_space[i] = min(available_space[i], space_i)\n                available_space[j] = min(available_space[j], space_j)\n\n        # Wall constraints\n        for i in range(n):\n            x, y = centers[i]\n            wall_space = min(x - 0, y - 0, 1 - x, 1 - y)\n            available_space[i] = min(available_space[i], wall_space)\n\n        # Grow radii proportionally to available space\n        for i in range(n):\n            if available_space[i] > radii[i] * 0.004:  # Only grow if there's space, reduced factor\n                growth = min(growth_rate, available_space[i] - radii[i])\n                radii[i] += growth * 0.92  # Grow conservatively\n    return centers, radii\n\ndef optimize_numerical(centers, radii):\n    \"\"\"Numerical optimization using scipy.optimize.minimize, adjusted parameters\"\"\"\n    n = len(centers)\n\n    # Flatten parameters for optimization\n    def pack_params(centers, radii):\n        return np.concatenate([centers.flatten(), radii])\n\n    def unpack_params(params):\n        centers = params[:2*n].reshape(n, 2)\n        radii = params[2*n:]\n        return centers, radii\n\n    # Objective function: maximize sum of radii\n    def objective(params):\n        _, radii = unpack_params(params)\n        return -np.sum(radii)  # Negative because we're minimizing\n\n    # Constraints: no overlaps\n    constraints = []\n\n    # Circle-circle non-overlap\n    for i in range(n):\n        for j in range(i + 1, n):\n            def circle_constraint(params, i=i, j=j):\n                centers, radii = unpack_params(params)\n                dist = np.linalg.norm(centers[i] - centers[j])\n                return dist - (radii[i] + radii[j]) - 1e-7\n\n            constraints.append({'type': 'ineq', 'fun': circle_constraint})\n\n    # Circles within bounds\n    for i in range(n):\n        def left_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 0] - radii[i]\n\n        def right_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 0] - radii[i]\n\n        def bottom_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return centers[i, 1] - radii[i]\n\n        def top_bound(params, i=i):\n            centers, radii = unpack_params(params)\n            return 1 - centers[i, 1] - radii[i]\n\n        constraints.append({'type': 'ineq', 'fun': left_bound})\n        constraints.append({'type': 'ineq', 'fun': right_bound})\n        constraints.append({'type': 'ineq', 'fun': bottom_bound})\n        constraints.append({'type': 'ineq', 'fun': top_bound})\n\n    # Minimum radius constraint\n    for i in range(n):\n        def min_radius(params, i=i):\n            _, radii = unpack_params(params)\n            return radii[i] - 0.008  # Minimum radius of 0.008\n\n        constraints.append({'type': 'ineq', 'fun': min_radius})\n\n    # Initial parameters\n    initial_params = pack_params(centers, radii)\n\n    # Run optimization with limited iterations to avoid excessive computation\n    result = minimize(\n        objective,\n        initial_params,\n        method='SLSQP',\n        constraints=constraints,\n        options={'maxiter': 75, 'ftol': 1e-7}\n    )\n\n    # Extract optimized parameters\n    centers, radii = unpack_params(result.x)\n\n    return centers, radii\n\ndef optimize_annealing(centers, radii, iterations=180):\n    \"\"\"Fine-tune with simulated annealing, adjusted parameters\"\"\"\n    n = len(centers)\n    best_centers = centers.copy()\n    best_radii = radii.copy()\n    best_sum = np.sum(radii)\n\n    temperature = 0.016 # Adjusted temperature\n    cooling_rate = 0.982 # Adjusted cooling rate\n\n    for iter in range(iterations):\n        # Make a copy of current state\n        new_centers = centers.copy()\n        new_radii = radii.copy()\n\n        # Randomly perturb positions and radii\n        idx = np.random.randint(0, n)\n        new_centers[idx] += np.random.normal(0, 0.007, 2) # Adjusted perturbation\n        radius_change = np.random.normal(0, 0.003) # Adjusted perturbation\n        new_radii[idx] = max(0.008, new_radii[idx] + radius_change) # Adjusted min radius\n\n        # Keep circle within bounds\n        new_centers[idx, 0] = np.clip(new_centers[idx, 0], new_radii[idx], 1 - new_radii[idx])\n        new_centers[idx, 1] = np.clip(new_centers[idx, 1], new_radii[idx], 1 - new_radii[idx])\n\n        # Check for overlaps\n        valid = True\n        for i in range(n):\n            if i == idx:\n                continue\n\n            dist = np.linalg.norm(new_centers[idx] - new_centers[i])\n            min_dist = new_radii[idx] + new_radii[i]\n\n            if dist < min_dist - 1e-6:\n                valid = False\n                break\n\n        # Accept or reject based on simulated annealing\n        if valid:\n            new_sum = np.sum(new_radii)\n            delta_e = new_sum - np.sum(radii)\n\n            if delta_e > 0 or np.random.random() < np.exp(delta_e / temperature):\n                centers = new_centers.copy()\n                radii = new_radii.copy()\n\n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_centers = centers.copy()\n                    best_radii = radii.copy()\n\n        # Cool temperature\n        temperature *= cooling_rate\n\n    return best_centers, best_radii\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    # plt.show()\n    plt.savefig(\"circle_packing_s100.png\")\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n    # Uncomment to visualize:\n    visualize(centers, radii)\n# EVOLVE-BLOCK-END\n```"]}}}