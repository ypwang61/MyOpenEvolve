{"id": "3d415d8c-cc0a-48af-ae69-ca096d6b64dd", "code": "# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a gradient-based optimization approach with strategic initialization and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initialization: Improved initial guess\n    centers, radii = initialize_packing(n)\n\n    # Optimization: Gradient-based optimization using scipy.optimize.minimize\n    # Objective function: Negative sum of radii (since we want to maximize)\n    def objective_function(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        return -np.sum(radii)\n\n    # Constraints: Non-overlapping circles and circles within the unit square\n    def constraint_overlap(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        overlap_penalty = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    overlap_penalty += overlap**2  # Penalize overlap\n        return -overlap_penalty # negative because we want to maximize (minimize the negative overlap)\n\n\n    def constraint_boundary(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        boundary_penalty = 0\n        for i in range(n):\n            boundary_penalty += max(0, radii[i] - centers[i][0])**2  # Left boundary\n            boundary_penalty += max(0, radii[i] - centers[i][1])**2  # Bottom boundary\n            boundary_penalty += max(0, radii[i] - (1 - centers[i][0]))**2  # Right boundary\n            boundary_penalty += max(0, radii[i] - (1 - centers[i][1]))**2  # Top boundary\n        return -boundary_penalty\n\n    # Initial guess for the optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the variables (centers within [0, 1], radii > 0)\n    bounds = [(0, 1)] * (2 * n) + [(0.001, 0.5)] * n  # Radius between 0.001 and 0.5\n\n    # Constraints using the functions defined above\n    constraints = [{'type': 'ineq', 'fun': constraint_overlap},\n                   {'type': 'ineq', 'fun': constraint_boundary}]\n\n    # Run the optimization\n    result = minimize(objective_function, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 500})\n\n    # Extract the optimized centers and radii\n    centers = result.x[:2*n].reshape(n, 2)\n    radii = result.x[2*n:]\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_packing(n):\n    \"\"\"\n    Initialize the circle packing with a strategic arrangement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Larger circles in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.2\n\n    # Four circles in the corners\n    centers[1] = [0.15, 0.15]\n    centers[2] = [0.85, 0.15]\n    centers[3] = [0.15, 0.85]\n    centers[4] = [0.85, 0.85]\n    radii[1:5] = 0.15\n\n    # Edge circles\n    centers[5] = [0.5, 0.15]\n    centers[6] = [0.5, 0.85]\n    centers[7] = [0.15, 0.5]\n    centers[8] = [0.85, 0.5]\n    radii[5:9] = 0.12\n\n    # Remaining circles in a grid-like fashion\n    grid_size = 4\n    spacing = 0.7 / (grid_size - 1)\n    count = 9\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = [0.15 + i * spacing, 0.15 + j * spacing]\n                radii[count] = 0.08 + np.random.rand() * 0.04\n                count += 1\n\n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "819ba30d-bb38-4d10-a4b9-d6a1279ae9ca", "generation": 5, "timestamp": 1750753081.5226088, "iteration_found": 85, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.2645356296976709, "target_ratio": 0.4798996697144861, "combined_score": 0.4798996697144861, "eval_time": 7.59053635597229}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.2645\n- target_ratio: 0.4799\n- combined_score: 0.4799\n- eval_time: 7.5905\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3697, target_ratio: 0.8993, combined_score: 0.8993, eval_time: 51.0383\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 0.8986, target_ratio: 0.3410, combined_score: 0.3410, eval_time: 75.0648\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 15.5291)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a physics-based optimization approach with specialized patterns.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.8986), Performs well on target_ratio (0.3410), Performs well on combined_score (0.3410), Performs well on eval_time (75.0648)\n\n\n### Program 3 (Score: 1.5092)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.6581), Performs well on target_ratio (0.6292), Performs well on combined_score (0.6292), Performs well on eval_time (3.6295)\n\n\n### Program 4 (Score: 1.6760)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid approach:\n    - Optimized initialization with corner, edge, and central biases\n    - Multi-stage optimization: Gradient descent followed by physics-based refinement\n    - Adaptive radius adjustment and collision resolution\n\n    Target AlphaEvolve score: 2.635\n\"\"\"\nimport numpy as np\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.2187), Performs well on target_ratio (0.4625), Performs well on combined_score (0.4625), Performs well on eval_time (5.2363)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, physics-based optimization, and gradient descent with adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics-based refinement.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialization: Start with a good initial guess using a combined hexagonal and grid pattern\n    centers, radii = initialize_packing()\n\n    # Optimization: Refine the arrangement using a physics-based simulation\n    centers, radii = refine_packing(centers, radii)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_packing():\n    \"\"\"\n    Initialize the circle packing with a combination of hexagonal and grid arrangements.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15  # Larger radius for central circle\n\n    # Hexagonal ring around the center (6 circles)\n    angles = np.linspace(0, 2 * np.pi, 7)[:-1]\n    ring_radius = 0.25\n    for i in range(1, 7):\n        centers[i] = [0.5 + ring_radius * np.cos(angles[i - 1]),\n                      0.5 + ring_radius * np.sin(angles[i - 1])]\n        radii[i] = 0.12\n\n    # Grid-like arrangement for the remaining circles (19 circles)\n    grid_size = 4\n    spacing = 0.8 / (grid_size - 1)  # Adjust spacing to fit within the square\n    count = 7\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = [0.1 + i * spacing, 0.1 + j * spacing]\n                radii[count] = 0.08 + np.random.rand() * 0.03  # Introduce some variation\n                count += 1\n\n    # Adjust radii based on environment\n    radii = compute_max_radii(centers)\n    return centers, radii\n\ndef refine_packing(centers, radii, iterations=500, repulsion_strength=0.01, step_size=0.005):\n    \"\"\"\n    Refine the circle packing using a physics-based simulation with repulsion forces.\n    \"\"\"\n    n = centers.shape[0]\n\n    for _ in range(iterations):\n        # Calculate repulsion forces between circles\n        forces = np.zeros((n, 2))\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    distance = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    overlap = radii[i] + radii[j] - distance\n                    if overlap > 0:\n                        # Repulsion force proportional to overlap and inverse square of distance\n                        direction = (centers[i] - centers[j]) / distance\n                        forces[i] += repulsion_strength * overlap * direction\n\n        # Move circles based on forces, but keep them within the unit square\n        centers += forces * step_size\n\n        # Reflect circles off the walls\n        for i in range(n):\n            if centers[i, 0] - radii[i] < 0:\n                centers[i, 0] = radii[i]\n            if centers[i, 0] + radii[i] > 1:\n                centers[i, 0] = 1 - radii[i]\n            if centers[i, 1] - radii[i] < 0:\n                centers[i, 1] = radii[i]\n            if centers[i, 1] + radii[i] > 1:\n                centers[i, 1] = 1 - radii[i]\n\n        # Adjust radii to avoid overlaps\n        radii = compute_max_radii(centers)\n\n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, limit by distances to other circles\n    for _ in range(3):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current sizes\n                        total = radii[i] + radii[j]\n                        if total > 0:  # Avoid division by zero\n                            ratio_i = radii[i] / total\n                            ratio_j = radii[j] / total\n                            radii[i] = ratio_i * dist\n                            radii[j] = ratio_j * dist\n\n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                max_r_i = (dist - radii[j]) / 2.0\n                if max_r_i < radii[i]:\n                    radii[i] = max(0.0, max_r_i)\n                max_r_j = (dist - radii[i]) / 2.0\n                if max_r_j < radii[j]:\n                    radii[j] = max(0.0, max_r_j)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a gradient-based optimization approach with strategic initialization and adaptive radii.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initialization: Improved initial guess\n    centers, radii = initialize_packing(n)\n\n    # Optimization: Gradient-based optimization using scipy.optimize.minimize\n    # Objective function: Negative sum of radii (since we want to maximize)\n    def objective_function(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        return -np.sum(radii)\n\n    # Constraints: Non-overlapping circles and circles within the unit square\n    def constraint_overlap(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        overlap_penalty = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                overlap = radii[i] + radii[j] - dist\n                if overlap > 0:\n                    overlap_penalty += overlap**2  # Penalize overlap\n        return -overlap_penalty # negative because we want to maximize (minimize the negative overlap)\n\n\n    def constraint_boundary(x):\n        centers = x[:2*n].reshape(n, 2)\n        radii = x[2*n:]\n        boundary_penalty = 0\n        for i in range(n):\n            boundary_penalty += max(0, radii[i] - centers[i][0])**2  # Left boundary\n            boundary_penalty += max(0, radii[i] - centers[i][1])**2  # Bottom boundary\n            boundary_penalty += max(0, radii[i] - (1 - centers[i][0]))**2  # Right boundary\n            boundary_penalty += max(0, radii[i] - (1 - centers[i][1]))**2  # Top boundary\n        return -boundary_penalty\n\n    # Initial guess for the optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Bounds for the variables (centers within [0, 1], radii > 0)\n    bounds = [(0, 1)] * (2 * n) + [(0.001, 0.5)] * n  # Radius between 0.001 and 0.5\n\n    # Constraints using the functions defined above\n    constraints = [{'type': 'ineq', 'fun': constraint_overlap},\n                   {'type': 'ineq', 'fun': constraint_boundary}]\n\n    # Run the optimization\n    result = minimize(objective_function, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 500})\n\n    # Extract the optimized centers and radii\n    centers = result.x[:2*n].reshape(n, 2)\n    radii = result.x[2*n:]\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_packing(n):\n    \"\"\"\n    Initialize the circle packing with a strategic arrangement.\n    \"\"\"\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Larger circles in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.2\n\n    # Four circles in the corners\n    centers[1] = [0.15, 0.15]\n    centers[2] = [0.85, 0.15]\n    centers[3] = [0.15, 0.85]\n    centers[4] = [0.85, 0.85]\n    radii[1:5] = 0.15\n\n    # Edge circles\n    centers[5] = [0.5, 0.15]\n    centers[6] = [0.5, 0.85]\n    centers[7] = [0.15, 0.5]\n    centers[8] = [0.85, 0.5]\n    radii[5:9] = 0.12\n\n    # Remaining circles in a grid-like fashion\n    grid_size = 4\n    spacing = 0.7 / (grid_size - 1)\n    count = 9\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if count < n:\n                centers[count] = [0.15 + i * spacing, 0.15 + j * spacing]\n                radii[count] = 0.08 + np.random.rand() * 0.04\n                count += 1\n\n    return centers, radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}