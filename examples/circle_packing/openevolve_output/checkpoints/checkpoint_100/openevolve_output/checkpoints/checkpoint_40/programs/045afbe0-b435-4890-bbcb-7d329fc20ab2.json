{"id": "045afbe0-b435-4890-bbcb-7d329fc20ab2", "code": "# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters and pre-defined structure.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.  Incorporates a pre-defined structure\n    to guide the optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # 1. Define a structured initial arrangement.  A mix of hexagonal and boundary packing.\n    #    This is crucial for escaping local minima.  Adjust these initial values.\n    centers = np.array([\n        [0.25, 0.25], [0.75, 0.25], [0.5, 0.5], [0.25, 0.75], [0.75, 0.75],  # Central cluster\n        [0.1, 0.5], [0.9, 0.5], [0.5, 0.1], [0.5, 0.9],  # Edge positions\n        [0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9],  # Corner positions\n        [0.25, 0.4], [0.75, 0.4], [0.4, 0.25], [0.6, 0.25], [0.25, 0.6], [0.75, 0.6], [0.4, 0.75], [0.6, 0.75],  # Intermediate\n        [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65], [0.5, 0.35] # More Intermediate\n    ])\n\n\n    # Initial radii (variable sizes based on location - crucial!)\n    radii = np.array([\n        0.08, 0.08, 0.08, 0.08, 0.08,  # Central cluster\n        0.07, 0.07, 0.07, 0.07,  # Edge positions\n        0.06, 0.06, 0.06, 0.06,  # Corner positions\n        0.065, 0.065, 0.065, 0.065, 0.065, 0.065, 0.065, 0.065, # Intermediate\n        0.0625, 0.0625, 0.0625, 0.0625, 0.0625 # More Intermediate\n    ])\n\n\n    # Combine centers and radii into a single parameter vector for optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Define the objective function to minimize (-sum of radii)\n    def objective(x):\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers_reshaped = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        return -np.sum(radii)\n\n    # Define the constraints\n    def constraint_overlap(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                overlap += np.maximum(0, radii[i] + radii[j] - dist)**2  # Squared overlap penalty\n        return -overlap  # Constraint is satisfied when >= 0\n\n    def constraint_boundaries(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        min_distance = np.min(centers - radii.reshape(-1, 1), axis=0)\n        max_distance = np.max(centers + radii.reshape(-1, 1), axis=0)\n        return np.min(np.concatenate([centers[:,0] - radii, centers[:,1] - radii, 1 - (centers[:,0] + radii), 1 - (centers[:,1] + radii)]))\n\n    # Define the constraints as a sequence of dictionaries\n    constraints = [\n        {'type': 'ineq', 'fun': constraint_overlap},\n        {'type': 'ineq', 'fun': constraint_boundaries}\n    ]\n\n    # Define bounds for the radii and centers\n    center_bounds = [(0.001, 0.999)] * (2 * n) # Centers within the square\n    radii_bounds = [(0.005, 0.2)] * n  # Radii between 0.005 and 0.2  (Tuned!)\n    bounds = center_bounds + radii_bounds\n\n    # Perform the optimization using a suitable algorithm (e.g., SLSQP)\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 500, 'ftol': 1e-7})  # Increased iterations, tighter tolerance\n\n    # Extract the optimized centers and radii\n    x_optimized = result.x\n    centers_flat = x_optimized[:2 * n]\n    radii_flat = x_optimized[2 * n:]\n    centers = centers_flat.reshape((n, 2))\n    radii = radii_flat\n\n    # Ensure radii are positive and centers within bounds (redundant, but good practice)\n    radii = np.maximum(radii, 0.005)\n    centers = np.clip(centers, 0.001, 0.999)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "8a6e6fa5-0004-479f-a4fd-72077dab24e5", "generation": 4, "timestamp": 1750751390.0923526, "iteration_found": 39, "metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 0.0, "combined_score": 0.0, "error": "Program execution failed: No module named 'scipy'"}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 0.0000\n- combined_score: 0.0000\n- error: Program execution failed: No module named 'scipy'\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: validity, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.6550)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.9056), Performs well on target_ratio (0.3437), Performs well on combined_score (0.3437), Performs well on eval_time (0.6818)\n\n\n### Program 4 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on sum_radii (0.0000), Performs well on target_ratio (0.0000), Performs well on combined_score (0.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: -16.0286)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid pattern, variable sizes, and physics-based optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    # Initial guess: quasi-random positions\n    centers = np.random.rand(n, 2) * 0.8 + 0.1  # Ensure circles are not too close to the border\n\n    # Initial radii (all equal)\n    radii = np.ones(n) * 0.05\n\n    # Combine centers and radii into a single parameter vector for optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Define the objective function to minimize (-sum of radii)\n    def objective(x):\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers_reshaped = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        return -np.sum(radii)\n\n    # Define the constraints\n    def constraint_overlap(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                overlap += max(0, radii[i] + radii[j] - dist)  # Penalize overlaps\n        return -overlap  # Constraint is satisfied when >= 0\n\n    def constraint_boundaries(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        min_distance = np.min(centers - radii.reshape(-1, 1), axis=0)\n        max_distance = np.max(centers + radii.reshape(-1, 1), axis=0)\n        return np.min(np.concatenate([centers[:,0] - radii, centers[:,1] - radii, 1 - (centers[:,0] + radii), 1 - (centers[:,1] + radii)]))\n\n    # Define the constraints as a sequence of dictionaries\n    constraints = [\n        {'type': 'ineq', 'fun': constraint_overlap},\n        {'type': 'ineq', 'fun': constraint_boundaries}\n    ]\n\n    # Define bounds for the radii (positive)\n    bounds = [(0.0, 1.0)] * (2 * n) + [(0.001, 0.4)] * n # Radii between 0.001 and 0.4\n\n    # Perform the optimization using a suitable algorithm (e.g., SLSQP)\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 300, 'ftol': 1e-6})\n\n    # Extract the optimized centers and radii\n    x_optimized = result.x\n    centers_flat = x_optimized[:2 * n]\n    radii_flat = x_optimized[2 * n:]\n    centers = centers_flat.reshape((n, 2))\n    radii = radii_flat\n\n    # Ensure radii are positive and centers within bounds (redundant, but good practice)\n    radii = np.maximum(radii, 0.001)\n    centers = np.clip(centers, 0.001, 0.999)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters and pre-defined structure.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.  Incorporates a pre-defined structure\n    to guide the optimization.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n\n    # 1. Define a structured initial arrangement.  A mix of hexagonal and boundary packing.\n    #    This is crucial for escaping local minima.  Adjust these initial values.\n    centers = np.array([\n        [0.25, 0.25], [0.75, 0.25], [0.5, 0.5], [0.25, 0.75], [0.75, 0.75],  # Central cluster\n        [0.1, 0.5], [0.9, 0.5], [0.5, 0.1], [0.5, 0.9],  # Edge positions\n        [0.1, 0.1], [0.9, 0.1], [0.1, 0.9], [0.9, 0.9],  # Corner positions\n        [0.25, 0.4], [0.75, 0.4], [0.4, 0.25], [0.6, 0.25], [0.25, 0.6], [0.75, 0.6], [0.4, 0.75], [0.6, 0.75],  # Intermediate\n        [0.35, 0.35], [0.65, 0.35], [0.35, 0.65], [0.65, 0.65], [0.5, 0.35] # More Intermediate\n    ])\n\n\n    # Initial radii (variable sizes based on location - crucial!)\n    radii = np.array([\n        0.08, 0.08, 0.08, 0.08, 0.08,  # Central cluster\n        0.07, 0.07, 0.07, 0.07,  # Edge positions\n        0.06, 0.06, 0.06, 0.06,  # Corner positions\n        0.065, 0.065, 0.065, 0.065, 0.065, 0.065, 0.065, 0.065, # Intermediate\n        0.0625, 0.0625, 0.0625, 0.0625, 0.0625 # More Intermediate\n    ])\n\n\n    # Combine centers and radii into a single parameter vector for optimization\n    x0 = np.concatenate([centers.flatten(), radii])\n\n    # Define the objective function to minimize (-sum of radii)\n    def objective(x):\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers_reshaped = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        return -np.sum(radii)\n\n    # Define the constraints\n    def constraint_overlap(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        overlap = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.linalg.norm(centers[i] - centers[j])\n                overlap += np.maximum(0, radii[i] + radii[j] - dist)**2  # Squared overlap penalty\n        return -overlap  # Constraint is satisfied when >= 0\n\n    def constraint_boundaries(x):\n        n = 26\n        centers_flat = x[:2 * n]\n        radii_flat = x[2 * n:]\n        centers = centers_flat.reshape((n, 2))\n        radii = radii_flat\n        min_distance = np.min(centers - radii.reshape(-1, 1), axis=0)\n        max_distance = np.max(centers + radii.reshape(-1, 1), axis=0)\n        return np.min(np.concatenate([centers[:,0] - radii, centers[:,1] - radii, 1 - (centers[:,0] + radii), 1 - (centers[:,1] + radii)]))\n\n    # Define the constraints as a sequence of dictionaries\n    constraints = [\n        {'type': 'ineq', 'fun': constraint_overlap},\n        {'type': 'ineq', 'fun': constraint_boundaries}\n    ]\n\n    # Define bounds for the radii and centers\n    center_bounds = [(0.001, 0.999)] * (2 * n) # Centers within the square\n    radii_bounds = [(0.005, 0.2)] * n  # Radii between 0.005 and 0.2  (Tuned!)\n    bounds = center_bounds + radii_bounds\n\n    # Perform the optimization using a suitable algorithm (e.g., SLSQP)\n    result = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 500, 'ftol': 1e-7})  # Increased iterations, tighter tolerance\n\n    # Extract the optimized centers and radii\n    x_optimized = result.x\n    centers_flat = x_optimized[:2 * n]\n    radii_flat = x_optimized[2 * n:]\n    centers = centers_flat.reshape((n, 2))\n    radii = radii_flat\n\n    # Ensure radii are positive and centers within bounds (redundant, but good practice)\n    radii = np.maximum(radii, 0.005)\n    centers = np.clip(centers, 0.001, 0.999)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}