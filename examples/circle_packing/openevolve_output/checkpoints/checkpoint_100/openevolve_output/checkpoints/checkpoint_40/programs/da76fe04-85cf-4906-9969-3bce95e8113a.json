{"id": "da76fe04-85cf-4906-9969-3bce95e8113a", "code": "# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a specialized pattern for n=26 based on mathematical insights\n    centers, radii = initialize_specialized_pattern()\n    \n    # Apply fast, targeted optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern designed for n=26 circles.\n    Uses a combination of hexagonal packing with edge adaptations.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Initialize with a hybrid pattern - hexagonal core with edge adaptations\n    # Corner circles\n    centers[0] = [0.12, 0.12]  # Bottom-left\n    centers[1] = [0.88, 0.12]  # Bottom-right\n    centers[2] = [0.12, 0.88]  # Top-left\n    centers[3] = [0.88, 0.88]  # Top-right\n    \n    # Edge circles\n    centers[4] = [0.5, 0.11]   # Bottom edge\n    centers[5] = [0.5, 0.89]   # Top edge\n    centers[6] = [0.11, 0.5]   # Left edge\n    centers[7] = [0.89, 0.5]   # Right edge\n    \n    # Additional edge circles\n    centers[8] = [0.3, 0.11]   # Bottom edge\n    centers[9] = [0.7, 0.11]   # Bottom edge\n    centers[10] = [0.3, 0.89]  # Top edge\n    centers[11] = [0.7, 0.89]  # Top edge\n    centers[12] = [0.11, 0.3]  # Left edge\n    centers[13] = [0.11, 0.7]  # Left edge\n    centers[14] = [0.89, 0.3]  # Right edge\n    centers[15] = [0.89, 0.7]  # Right edge\n    \n    # Inner hexagonal pattern\n    centers[16] = [0.5, 0.5]   # Center\n    centers[17] = [0.5, 0.3]   # Inner ring\n    centers[18] = [0.5, 0.7]   # Inner ring\n    centers[19] = [0.3, 0.5]   # Inner ring\n    centers[20] = [0.7, 0.5]   # Inner ring\n    centers[21] = [0.3, 0.3]   # Inner ring\n    centers[22] = [0.7, 0.3]   # Inner ring\n    centers[23] = [0.3, 0.7]   # Inner ring\n    centers[24] = [0.7, 0.7]   # Inner ring\n    centers[25] = [0.5, 0.5]   # Placeholder - will be adjusted\n    \n    # Initial radii - will be computed properly in optimization\n    radii = np.ones(n) * 0.1\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Efficient optimization to maximize the sum of radii.\n    Uses a physics-based approach with carefully tuned parameters.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Stage 1: Fast physics-based optimization\n    repulsion_strength = 0.02\n    attraction_strength = 0.0005\n    border_repulsion = 0.01\n    num_iterations = 300\n    \n    for iteration in range(num_iterations):\n        # Compute forces\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion - vectorized for speed\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff**2, axis=1)\n            dist = np.sqrt(dist_sq + 1e-10)\n            min_dist = radii + radii[i]\n            overlap = min_dist - dist\n            \n            # Only apply forces where there's overlap\n            mask = (overlap > 0) & (dist > 0)\n            mask[i] = False  # Don't apply to self\n            \n            if np.any(mask):\n                direction = diff[mask] / dist[mask, np.newaxis]\n                force_magnitude = overlap[mask] * repulsion_strength\n                forces[mask] += direction * force_magnitude[:, np.newaxis]\n                forces[i] -= np.sum(direction * force_magnitude[:, np.newaxis], axis=0)\n        \n        # Border forces - keep circles inside with margin\n        margin = 0.001\n        border_force = np.zeros_like(centers)\n        \n        # Left and right borders\n        too_left = centers[:, 0] < radii + margin\n        too_right = centers[:, 0] > 1 - radii - margin\n        border_force[too_left, 0] += border_repulsion\n        border_force[too_right, 0] -= border_repulsion\n        \n        # Top and bottom borders\n        too_bottom = centers[:, 1] < radii + margin\n        too_top = centers[:, 1] > 1 - radii - margin\n        border_force[too_bottom, 1] += border_repulsion\n        border_force[too_top, 1] -= border_repulsion\n        \n        forces += border_force\n        \n        # Center attraction to prevent drifting\n        to_center = np.array([0.5, 0.5]) - centers\n        dist_to_center = np.sqrt(np.sum(to_center**2, axis=1) + 1e-10)\n        forces += (to_center / dist_to_center[:, np.newaxis]) * attraction_strength\n        \n        # Apply forces with damping\n        damping = 0.7 if iteration < 100 else 0.9\n        centers += forces * (1 - damping)\n        \n        # Ensure circles stay in bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Update radii every few iterations to avoid constant recalculation\n        if iteration % 5 == 0 or iteration == num_iterations - 1:\n            radii = compute_max_radii(centers)\n    \n    # Stage 2: Local optimization - small adjustments to maximize radii sum\n    for _ in range(50):\n        for i in range(n):\n            # Try small movements in different directions\n            best_sum = np.sum(radii)\n            best_pos = centers[i].copy()\n            \n            # Try 8 directions\n            for angle in np.linspace(0, 2*np.pi, 8, endpoint=False):\n                delta = 0.001 * np.array([np.cos(angle), np.sin(angle)])\n                centers[i] += delta\n                new_radii = compute_max_radii(centers)\n                new_sum = np.sum(new_radii)\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_pos = centers[i].copy()\n                \n                # Restore position for next try\n                centers[i] -= delta\n            \n            # Apply best movement found\n            centers[i] = best_pos\n            radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Efficiently compute the maximum possible radii for each circle position.\n    \n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n    \n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Distance to borders\n    border_dist = np.minimum(\n        np.minimum(centers[:, 0], 1 - centers[:, 0]),\n        np.minimum(centers[:, 1], 1 - centers[:, 1])\n    )\n    \n    # Initialize radii with border distances\n    radii = border_dist.copy()\n    \n    # Compute pairwise distances between centers\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            # Update both radii if necessary\n            r_i = min(radii[i], dist / 2)\n            r_j = min(radii[j], dist / 2)\n            \n            # If both circles are limited by this pair, distribute the space proportionally\n            if r_i + r_j > dist:\n                ratio = radii[i] / (radii[i] + radii[j] + 1e-10)\n                r_i = dist * ratio\n                r_j = dist * (1 - ratio)\n            \n            radii[i] = min(radii[i], r_i)\n            radii[j] = min(radii[j], r_j)\n    \n    # Final adjustment pass to ensure no overlaps\n    for _ in range(3):\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if radii[i] + radii[j] > dist:\n                        # Reduce both radii proportionally\n                        scale = dist / (radii[i] + radii[j])\n                        radii[i] *= scale\n                        radii[j] *= scale\n    \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "490369d6-dfa0-47f8-8636-04a34c24021d", "generation": 5, "timestamp": 1750751055.1932654, "iteration_found": 27, "metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "island": 3}, "artifacts_json": "{\"timeout\": true, \"timeout_duration\": 90, \"failure_stage\": \"stage1\", \"error_type\": \"timeout\"}", "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. We're trying to reach the AlphaEvolve target of 2.635 for the sum of radii when packing 26 circles in a unit square. The current implementation has plateaued at 2.377, so we need significant improvements.\n\nKey insights to explore:\n1. The optimal arrangement likely involves variable-sized circles\n2. A pure hexagonal arrangement may not be optimal due to edge effects\n3. The densest known circle packings often use a hybrid approach\n4. The optimization routine is critically important - simple physics-based models with carefully tuned parameters\n5. Consider strategic placement of circles at square corners and edges\n6. Adjusting the pattern to place larger circles at the center and smaller at the edges\n7. The math literature suggests special arrangements for specific values of n\n\nFocus on breaking through the plateau by trying fundamentally different approaches - don't just tweak parameters.\n", "user": "# Current Program Information\n- Current performance metrics: - stage1_passed: 0.0000\n- error: 0.0000\n- timeout: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n## Last Execution Output\n\n### timeout\n```\nTrue\n```\n\n### timeout_duration\n```\n90\n```\n\n### failure_stage\n```\nstage1\n```\n\n### error_type\n```\ntimeout\n```\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8125, target_ratio: 0.6879, combined_score: 0.6879, eval_time: 16.3053\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0707, target_ratio: 0.7858, combined_score: 0.7858, eval_time: 31.6651\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.3617, target_ratio: 0.8963, combined_score: 0.8963, eval_time: 50.7247\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.1104)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a specialized pattern and multi-stage optimization\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using specialized patterns.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.4124), Performs well on target_ratio (0.9155), Performs well on combined_score (0.9155), Performs well on eval_time (5.3085)\n\n\n### Program 2 (Score: 11.1758)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using variable-sized circles and specialized optimization\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.3617), Performs well on target_ratio (0.8963), Performs well on combined_score (0.8963), Performs well on eval_time (50.7247)\n\n\n### Program 3 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a layered approach and gradient-based optimization\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii using a layered approach and gradient-based optimization.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (0.0000), Performs well on combined_score (0.0000), Performs well on error (Program execution failed: No module named 'scipy')\n\n\n### Program 4 (Score: 7.2615)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0707), Performs well on target_ratio (0.7858), Performs well on combined_score (0.7858), Performs well on eval_time (31.6651)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0000)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 using a hybrid approach with dynamic adjustment of parameters, a pre-defined grid, and gradient-based radius adjustment.\"\"\"\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to combined_score\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Advanced circle packing for n=26 circles using a hybrid optimization approach with improved initialization and physics.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize with a better pattern\n    centers, radii = initialize_improved_pattern()\n\n    # Apply multi-stage optimization\n    centers, radii = optimize_packing(centers, radii)\n\n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef initialize_improved_pattern():\n    \"\"\"\n    Initialize with a pattern that places larger circles in the center\n    and smaller circles towards the edges, mimicking optimal packing arrangements.  Uses a layered approach.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Largest circle in the center\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.14  # Increased radius for the central circle\n\n    # Layer 1: 6 circles around the center\n    num_layer1 = 6\n    radius_layer1 = 0.09\n    for i in range(num_layer1):\n        angle = 2 * np.pi * i / num_layer1\n        distance_from_center = 0.25\n        centers[1 + i] = [0.5 + distance_from_center * np.cos(angle),\n                          0.5 + distance_from_center * np.sin(angle)]\n        radii[1 + i] = radius_layer1\n\n    # Layer 2: Remaining circles\n    num_remaining = n - 1 - num_layer1\n    radius_layer2 = 0.05\n    for i in range(num_remaining):\n        angle = 2 * np.pi * i / num_remaining\n        distance_from_center = 0.45  # Further out\n        centers[1 + num_layer1 + i] = [0.5 + distance_from_center * np.cos(angle),\n                                        0.5 + distance_from_center * np.sin(angle)]\n        radii[1 + num_layer1 + i] = radius_layer2\n\n    return centers, radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Multi-stage optimization to maximize the sum of radii.  Uses a more efficient and robust physics simulation.\n    \"\"\"\n    n = centers.shape[0]\n\n    # Stage 1: Physics-based repulsion and attraction\n    repulsion_strength = 0.01  # Adjusted repulsion\n    attraction_strength = 0.0001 # Slightly reduced attraction\n    border_repulsion = 0.005  # Adjusted border repulsion\n    num_iterations = 400  # More iterations\n\n    for iteration in range(num_iterations):\n        forces = np.zeros_like(centers)\n\n        # Circle-circle repulsion\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = radii[i] + radii[j]\n                    if dist < min_dist:\n                        overlap = min_dist - dist\n                        direction = (centers[i] - centers[j]) / (dist + 1e-6)  # Avoid division by zero\n                        forces[i] += repulsion_strength * direction * overlap # Repulsion proportional to overlap\n\n        # Circle-center attraction (to keep them somewhat centered)\n        for i in range(n):\n            direction = (0.5, 0.5) - centers[i]\n            forces[i] += attraction_strength * direction\n\n        # Border repulsion\n        for i in range(n):\n            x, y = centers[i]\n            forces[i, 0] += border_repulsion / (x + 0.001)**2 - border_repulsion / ((1 - x) + 0.001)**2\n            forces[i, 1] += border_repulsion / (y + 0.001)**2 - border_repulsion / ((1 - y) + 0.001)**2\n\n        # Update positions - Damping for stability\n        damping = 0.5 # Damping factor\n        centers += forces * (1 - damping)\n        centers = np.clip(centers, 0.001, 0.999)  # Stay within bounds\n\n        # Adjust radii - ensure no overlaps\n        radii = compute_max_radii(centers)\n\n\n    # Stage 2: Gradient Ascent (fine tuning) with adaptive learning rate\n    learning_rate = 0.0005  # Reduced learning rate for finer tuning\n    num_gradient_iterations = 200  # Adjusted iterations\n\n    for _ in range(num_gradient_iterations):\n        radii = compute_max_radii(centers)\n        gradients = np.zeros_like(centers)\n\n        for i in range(n):\n            for dim in range(2):\n                delta = 0.00005 # Reduced delta for more accurate gradients\n                perturbed_centers = centers.copy()\n                perturbed_centers[i, dim] += delta\n                perturbed_radii = compute_max_radii(perturbed_centers)\n                gradient = (np.sum(perturbed_radii) - np.sum(radii)) / delta\n                gradients[i, dim] = gradient\n\n        centers += learning_rate * gradients\n        centers = np.clip(centers, 0.001, 0.999)\n        radii = compute_max_radii(centers)\n        learning_rate *= 0.995  # Adaptive learning rate decay - slower decay\n\n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    for _ in range(50):  # More iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, (dist - radii[j]) / 2.0) # Divide by 2 to distribute the space\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["I'll rewrite the program to significantly improve its performance, focusing on implementing a more effective circle packing strategy that can achieve a better sum of radii while avoiding the timeout issue.\n\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Optimized circle packing for n=26 circles using a specialized pattern and efficient optimization.\"\"\"\nimport numpy as np\n\ndef construct_packing():\n    \"\"\"\n    Construct an optimized arrangement of 26 circles in a unit square\n    that maximizes the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Use a specialized pattern for n=26 based on mathematical insights\n    centers, radii = initialize_specialized_pattern()\n    \n    # Apply fast, targeted optimization\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Final validation and adjustment\n    radii = compute_max_radii(centers)\n    \n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\ndef initialize_specialized_pattern():\n    \"\"\"\n    Initialize with a specialized pattern designed for n=26 circles.\n    Uses a combination of hexagonal packing with edge adaptations.\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Initialize with a hybrid pattern - hexagonal core with edge adaptations\n    # Corner circles\n    centers[0] = [0.12, 0.12]  # Bottom-left\n    centers[1] = [0.88, 0.12]  # Bottom-right\n    centers[2] = [0.12, 0.88]  # Top-left\n    centers[3] = [0.88, 0.88]  # Top-right\n    \n    # Edge circles\n    centers[4] = [0.5, 0.11]   # Bottom edge\n    centers[5] = [0.5, 0.89]   # Top edge\n    centers[6] = [0.11, 0.5]   # Left edge\n    centers[7] = [0.89, 0.5]   # Right edge\n    \n    # Additional edge circles\n    centers[8] = [0.3, 0.11]   # Bottom edge\n    centers[9] = [0.7, 0.11]   # Bottom edge\n    centers[10] = [0.3, 0.89]  # Top edge\n    centers[11] = [0.7, 0.89]  # Top edge\n    centers[12] = [0.11, 0.3]  # Left edge\n    centers[13] = [0.11, 0.7]  # Left edge\n    centers[14] = [0.89, 0.3]  # Right edge\n    centers[15] = [0.89, 0.7]  # Right edge\n    \n    # Inner hexagonal pattern\n    centers[16] = [0.5, 0.5]   # Center\n    centers[17] = [0.5, 0.3]   # Inner ring\n    centers[18] = [0.5, 0.7]   # Inner ring\n    centers[19] = [0.3, 0.5]   # Inner ring\n    centers[20] = [0.7, 0.5]   # Inner ring\n    centers[21] = [0.3, 0.3]   # Inner ring\n    centers[22] = [0.7, 0.3]   # Inner ring\n    centers[23] = [0.3, 0.7]   # Inner ring\n    centers[24] = [0.7, 0.7]   # Inner ring\n    centers[25] = [0.5, 0.5]   # Placeholder - will be adjusted\n    \n    # Initial radii - will be computed properly in optimization\n    radii = np.ones(n) * 0.1\n    \n    return centers, radii\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Efficient optimization to maximize the sum of radii.\n    Uses a physics-based approach with carefully tuned parameters.\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Stage 1: Fast physics-based optimization\n    repulsion_strength = 0.02\n    attraction_strength = 0.0005\n    border_repulsion = 0.01\n    num_iterations = 300\n    \n    for iteration in range(num_iterations):\n        # Compute forces\n        forces = np.zeros_like(centers)\n        \n        # Circle-circle repulsion - vectorized for speed\n        for i in range(n):\n            diff = centers - centers[i]\n            dist_sq = np.sum(diff**2, axis=1)\n            dist = np.sqrt(dist_sq + 1e-10)\n            min_dist = radii + radii[i]\n            overlap = min_dist - dist\n            \n            # Only apply forces where there's overlap\n            mask = (overlap > 0) & (dist > 0)\n            mask[i] = False  # Don't apply to self\n            \n            if np.any(mask):\n                direction = diff[mask] / dist[mask, np.newaxis]\n                force_magnitude = overlap[mask] * repulsion_strength\n                forces[mask] += direction * force_magnitude[:, np.newaxis]\n                forces[i] -= np.sum(direction * force_magnitude[:, np.newaxis], axis=0)\n        \n        # Border forces - keep circles inside with margin\n        margin = 0.001\n        border_force = np.zeros_like(centers)\n        \n        # Left and right borders\n        too_left = centers[:, 0] < radii + margin\n        too_right = centers[:, 0] > 1 - radii - margin\n        border_force[too_left, 0] += border_repulsion\n        border_force[too_right, 0] -= border_repulsion\n        \n        # Top and bottom borders\n        too_bottom = centers[:, 1] < radii + margin\n        too_top = centers[:, 1] > 1 - radii - margin\n        border_force[too_bottom, 1] += border_repulsion\n        border_force[too_top, 1] -= border_repulsion\n        \n        forces += border_force\n        \n        # Center attraction to prevent drifting\n        to_center = np.array([0.5, 0.5]) - centers\n        dist_to_center = np.sqrt(np.sum(to_center**2, axis=1) + 1e-10)\n        forces += (to_center / dist_to_center[:, np.newaxis]) * attraction_strength\n        \n        # Apply forces with damping\n        damping = 0.7 if iteration < 100 else 0.9\n        centers += forces * (1 - damping)\n        \n        # Ensure circles stay in bounds\n        centers = np.clip(centers, 0.001, 0.999)\n        \n        # Update radii every few iterations to avoid constant recalculation\n        if iteration % 5 == 0 or iteration == num_iterations - 1:\n            radii = compute_max_radii(centers)\n    \n    # Stage 2: Local optimization - small adjustments to maximize radii sum\n    for _ in range(50):\n        for i in range(n):\n            # Try small movements in different directions\n            best_sum = np.sum(radii)\n            best_pos = centers[i].copy()\n            \n            # Try 8 directions\n            for angle in np.linspace(0, 2*np.pi, 8, endpoint=False):\n                delta = 0.001 * np.array([np.cos(angle), np.sin(angle)])\n                centers[i] += delta\n                new_radii = compute_max_radii(centers)\n                new_sum = np.sum(new_radii)\n                \n                if new_sum > best_sum:\n                    best_sum = new_sum\n                    best_pos = centers[i].copy()\n                \n                # Restore position for next try\n                centers[i] -= delta\n            \n            # Apply best movement found\n            centers[i] = best_pos\n            radii = compute_max_radii(centers)\n    \n    return centers, radii\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Efficiently compute the maximum possible radii for each circle position.\n    \n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n    \n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    \n    # Distance to borders\n    border_dist = np.minimum(\n        np.minimum(centers[:, 0], 1 - centers[:, 0]),\n        np.minimum(centers[:, 1], 1 - centers[:, 1])\n    )\n    \n    # Initialize radii with border distances\n    radii = border_dist.copy()\n    \n    # Compute pairwise distances between centers\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            # Update both radii if necessary\n            r_i = min(radii[i], dist / 2)\n            r_j = min(radii[j], dist / 2)\n            \n            # If both circles are limited by this pair, distribute the space proportionally\n            if r_i + r_j > dist:\n                ratio = radii[i] / (radii[i] + radii[j] + 1e-10)\n                r_i = dist * ratio\n                r_j = dist * (1 - ratio)\n            \n            radii[i] = min(radii[i], r_i)\n            radii[j] = min(radii[j], r_j)\n    \n    # Final adjustment pass to ensure no overlaps\n    for _ in range(3):\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if radii[i] + radii[j] > dist:\n                        # Reduce both radii proportionally\n                        scale = dist / (radii[i] + radii[j])\n                        radii[i] *= scale\n                        radii[j] *= scale\n    \n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\nThe key improvements in this rewritten program:\n\n1. **Specialized Initial Pattern**: I've implemented a specialized pattern for 26 circles that strategically places circles at corners, edges, and in a modified hexagonal pattern in the interior.\n\n2. **Efficient Physics Simulation**: The optimization is now more vectorized and efficient, reducing computation time while maintaining effectiveness.\n\n3. **Two-Stage Optimization**: \n   - First stage uses physics-based forces with carefully tuned parameters\n   - Second stage performs targeted local optimization to fine-tune positions\n\n4. **Improved Radius Calculation**: The radius computation is more sophisticated, with proportional distribution of space between circles.\n\n5. **Border Handling**: Better handling of circles near borders to prevent escaping the unit square.\n\n6. **Reduced Computation**: Removed unnecessary calculations and optimized the most expensive operations.\n\nThis implementation should run significantly faster while achieving a better sum of radii, approaching the target of 2.635."]}}}