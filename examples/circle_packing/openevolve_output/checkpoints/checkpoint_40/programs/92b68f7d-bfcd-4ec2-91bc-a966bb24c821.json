{"id": "92b68f7d-bfcd-4ec2-91bc-a966bb24c821", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Scaling factor to adjust radii\n    scale = 0.2635 / 2.0\n\n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11 * scale\n\n    centers[1] = [0.5 + np.sqrt(3) * radii[0], 0.5]\n    radii[1] = 0.11 * scale\n    centers[2] = [0.5 - np.sqrt(3) * radii[0], 0.5]\n    radii[2] = 0.11 * scale\n    centers[3] = [0.5, 0.5 + np.sqrt(3) * radii[0]]\n    radii[3] = 0.11 * scale\n    centers[4] = [0.5, 0.5 - np.sqrt(3) * radii[0]]\n    radii[4] = 0.11 * scale\n    centers[5] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[5] = 0.11 * scale\n    centers[6] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[6] = 0.11 * scale\n\n    # Layer 2 (6 circles) - distorted hexagonal\n    r2_dist = 3 * radii[0]\n    radii_l2 = 0.09 * scale\n    centers[7] = [0.5 + 2*np.sqrt(3)/2 * radii[0], 0.5 + 0]\n    radii[7] = radii_l2\n    centers[8] = [0.5 - 2*np.sqrt(3)/2 * radii[0], 0.5 + 0]\n    radii[8] = radii_l2\n    centers[9] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 + 3/2 * radii[0]]\n    radii[9] = radii_l2\n    centers[10] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 + 3/2 * radii[0]]\n    radii[10] = radii_l2\n    centers[11] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 - 3/2 * radii[0]]\n    radii[11] = radii_l2\n    centers[12] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 - 3/2 * radii[0]]\n    radii[12] = radii_l2\n\n    # Layer 3 (6 circles)\n    radii_l3 = 0.08 * scale\n    centers[13] = [0.5 + np.sqrt(3) * 2 * radii[0], 0.5]\n    radii[13] = radii_l3\n    centers[14] = [0.5 - np.sqrt(3) * 2 * radii[0], 0.5]\n    radii[14] = radii_l3\n    centers[15] = [0.5, 0.5 + np.sqrt(3) * 2* radii[0]]\n    radii[15] = radii_l3\n    centers[16] = [0.5, 0.5 - np.sqrt(3) * 2 * radii[0]]\n    radii[16] = radii_l3\n    centers[17] = [0.5 + np.sqrt(3) / 2 * 3 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[17] = radii_l3\n    centers[18] = [0.5 - np.sqrt(3) / 2 * 3 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[18] = radii_l3\n\n    # Corners (4 circles)\n    radii_corners = 0.07 * scale\n    centers[19] = [0.1, 0.1]\n    radii[19] = radii_corners\n    centers[20] = [0.9, 0.1]\n    radii[20] = radii_corners\n    centers[21] = [0.1, 0.9]\n    radii[21] = radii_corners\n    centers[22] = [0.9, 0.9]\n    radii[22] = radii_corners\n\n    # Edges (3 circles)\n    radii_edges = 0.06 * scale\n    centers[23] = [0.5, 0.1]\n    radii[23] = radii_edges\n    centers[24] = [0.1, 0.5]\n    radii[24] = radii_edges\n    centers[25] = [0.9, 0.5]\n    radii[25] = radii_edges\n\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    # This is more efficient than the previous approach\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum:\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "71e5d42d-634f-4982-b65c-b8eab9967093", "generation": 3, "timestamp": 1750748263.1692936, "iteration_found": 17, "metrics": {"stage1_passed": 0.0, "error": 0.0, "timeout": true}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.8963045804213905, "target_ratio": 0.7196601823231084, "combined_score": 0.7196601823231084, "eval_time": 3.9429562091827393}, "island": 0}, "artifacts_json": "{\"timeout\": true, \"timeout_duration\": 60, \"failure_stage\": \"stage1\", \"error_type\": \"timeout\"}", "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.8963\n- target_ratio: 0.7197\n- combined_score: 0.7197\n- eval_time: 3.9430\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.8770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7512), Performs well on target_ratio (0.6646), Performs well on combined_score (0.6646), Performs well on eval_time (0.3047)\n\n\n### Program 3 (Score: 0.8770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7512), Performs well on target_ratio (0.6646), Performs well on combined_score (0.6646), Performs well on eval_time (0.3047)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9867)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.8782)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial guess for radii based on a uniform distribution\n    radii[:] = 0.08\n\n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    centers[1] = [0.5 + 2 * radii[1], 0.5]\n    centers[2] = [0.5 - 2 * radii[2], 0.5]\n    centers[3] = [0.5 + radii[3], 0.5 + np.sqrt(3) * radii[3]]\n    centers[4] = [0.5 + radii[4], 0.5 - np.sqrt(3) * radii[4]]\n    centers[5] = [0.5 - radii[5], 0.5 + np.sqrt(3) * radii[5]]\n    centers[6] = [0.5 - radii[6], 0.5 - np.sqrt(3) * radii[6]]\n\n\n    # Layer 2 (12 circles) - distorted hexagonal\n    r2_dist = 0.25  # Distance from center\n    for i in range(12):\n        angle = 2 * np.pi * i / 12\n        centers[7 + i] = [0.5 + r2_dist * np.cos(angle), 0.5 + r2_dist * np.sin(angle)]\n        radii[7 + i] = 0.07\n\n    # Layer 3 (7 circles) - corners and mid-edges\n    centers[19] = [0.15, 0.15]\n    centers[20] = [0.85, 0.15]\n    centers[21] = [0.15, 0.85]\n    centers[22] = [0.85, 0.85]\n    centers[23] = [0.5, 0.1]\n    centers[24] = [0.1, 0.5]\n    centers[25] = [0.9, 0.5]\n    radii[19:] = 0.06\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    # This is more efficient than the previous approach\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum:\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize arrays for 26 circles\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Scaling factor to adjust radii\n    scale = 0.2635 / 2.0\n\n    # Core hexagonal arrangement (7 circles)\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.11 * scale\n\n    centers[1] = [0.5 + np.sqrt(3) * radii[0], 0.5]\n    radii[1] = 0.11 * scale\n    centers[2] = [0.5 - np.sqrt(3) * radii[0], 0.5]\n    radii[2] = 0.11 * scale\n    centers[3] = [0.5, 0.5 + np.sqrt(3) * radii[0]]\n    radii[3] = 0.11 * scale\n    centers[4] = [0.5, 0.5 - np.sqrt(3) * radii[0]]\n    radii[4] = 0.11 * scale\n    centers[5] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[5] = 0.11 * scale\n    centers[6] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[6] = 0.11 * scale\n\n    # Layer 2 (6 circles) - distorted hexagonal\n    r2_dist = 3 * radii[0]\n    radii_l2 = 0.09 * scale\n    centers[7] = [0.5 + 2*np.sqrt(3)/2 * radii[0], 0.5 + 0]\n    radii[7] = radii_l2\n    centers[8] = [0.5 - 2*np.sqrt(3)/2 * radii[0], 0.5 + 0]\n    radii[8] = radii_l2\n    centers[9] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 + 3/2 * radii[0]]\n    radii[9] = radii_l2\n    centers[10] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 + 3/2 * radii[0]]\n    radii[10] = radii_l2\n    centers[11] = [0.5 + np.sqrt(3)/2 * radii[0], 0.5 - 3/2 * radii[0]]\n    radii[11] = radii_l2\n    centers[12] = [0.5 - np.sqrt(3)/2 * radii[0], 0.5 - 3/2 * radii[0]]\n    radii[12] = radii_l2\n\n    # Layer 3 (6 circles)\n    radii_l3 = 0.08 * scale\n    centers[13] = [0.5 + np.sqrt(3) * 2 * radii[0], 0.5]\n    radii[13] = radii_l3\n    centers[14] = [0.5 - np.sqrt(3) * 2 * radii[0], 0.5]\n    radii[14] = radii_l3\n    centers[15] = [0.5, 0.5 + np.sqrt(3) * 2* radii[0]]\n    radii[15] = radii_l3\n    centers[16] = [0.5, 0.5 - np.sqrt(3) * 2 * radii[0]]\n    radii[16] = radii_l3\n    centers[17] = [0.5 + np.sqrt(3) / 2 * 3 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[17] = radii_l3\n    centers[18] = [0.5 - np.sqrt(3) / 2 * 3 * radii[0], 0.5 + 1.5 * radii[0]]\n    radii[18] = radii_l3\n\n    # Corners (4 circles)\n    radii_corners = 0.07 * scale\n    centers[19] = [0.1, 0.1]\n    radii[19] = radii_corners\n    centers[20] = [0.9, 0.1]\n    radii[20] = radii_corners\n    centers[21] = [0.1, 0.9]\n    radii[21] = radii_corners\n    centers[22] = [0.9, 0.9]\n    radii[22] = radii_corners\n\n    # Edges (3 circles)\n    radii_edges = 0.06 * scale\n    centers[23] = [0.5, 0.1]\n    radii[23] = radii_edges\n    centers[24] = [0.1, 0.5]\n    radii[24] = radii_edges\n    centers[25] = [0.9, 0.5]\n    radii[25] = radii_edges\n\n\n    # Ensure all circles are inside the unit square\n    centers = np.clip(centers, 0.001, 0.999)\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, initialize radii based on distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    # This is more efficient than the previous approach\n    converged = False\n    while not converged:\n        converged = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                max_sum = dist\n\n                # If current radii would cause overlap\n                if radii[i] + radii[j] > max_sum:\n                    # Reduce the larger radius to prevent overlap\n                    reduction = (radii[i] + radii[j] - max_sum) / 2.0\n                    if radii[i] > radii[j]:\n                        old_radius = radii[i]\n                        radii[i] -= reduction\n                        if abs(old_radius - radii[i]) > 1e-8:\n                            converged = False\n                    else:\n                        old_radius = radii[j]\n                        radii[j] -= reduction\n                        if abs(old_radius - radii[j]) > 1e-8:\n                            converged = False\n\n                    radii[i] = max(radii[i], 0.0001)\n                    radii[j] = max(radii[j], 0.0001)\n\n    return radii\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}