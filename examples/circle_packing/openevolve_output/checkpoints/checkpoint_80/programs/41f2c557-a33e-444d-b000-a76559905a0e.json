{"id": "41f2c557-a33e-444d-b000-a76559905a0e", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial radii guesses, refined based on AlphaEvolve principles.\n    r_large = 0.20  # Initial guess for large circles\n    r_medium = 0.12 # Initial guess for medium circles\n    r_small = 0.08  # Initial guess for small circles\n    r_center = 0.15\n\n    # Layer 1: Corners (4 large circles)\n    centers[0] = [r_large, r_large]\n    centers[1] = [1 - r_large, r_large]\n    centers[2] = [r_large, 1 - r_large]\n    centers[3] = [1 - r_large, 1 - r_large]\n    radii[0:4] = r_large\n\n    # Layer 2: Edge midpoints (4 medium circles per edge = 16 total)\n    num_edge_circles = 4\n    edge_positions = np.linspace(r_medium * 2, 1 - r_medium * 2, num_edge_circles)\n\n    for i in range(num_edge_circles):\n        centers[4 + i] = [edge_positions[i], r_medium]  # Top\n        centers[4 + num_edge_circles + i] = [edge_positions[i], 1 - r_medium]  # Bottom\n        centers[4 + 2 * num_edge_circles + i] = [r_medium, edge_positions[i]]  # Left\n        centers[4 + 3 * num_edge_circles + i] = [1 - r_medium, edge_positions[i]]  # Right\n        radii[4 + i : 4 + 4*num_edge_circles] = r_medium\n\n    # Layer 3: Center (1 circle)\n    centers[24] = [0.5, 0.5]\n    radii[24] = r_center\n    \n    # Place a single small circle near the center to fill space\n    centers[25] = [0.3, 0.7]\n    radii[25] = r_small\n\n    # Refine the packing to maximize radii without overlaps\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the packing by adjusting radii to their maximum possible values\n    without causing overlaps or going outside the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with initial radius of each circle\n\n    Returns:\n        Tuple of (centers, radii) with optimized values\n    \"\"\"\n    n = centers.shape[0]\n\n    def compute_max_radius(index):\n        \"\"\"Computes the maximum radius for a circle at a given index\"\"\"\n        center = centers[index]\n        max_r = min(center[0], center[1], 1 - center[0], 1 - center[1])\n\n        for j in range(n):\n            if j != index:\n                other_center = centers[j]\n                dist = np.sqrt(np.sum((center - other_center)**2))\n                max_r = min(max_r, (dist - radii[j]))\n\n        return max_r\n\n    for iteration in range(20):  # Increased iterations\n        for i in range(n):\n            radii[i] = compute_max_radius(i)\n\n    # Final adjustments to avoid overlaps\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            if radii[i] + radii[j] > dist:\n                scale = dist / (radii[i] + radii[j]) * 0.99  # Small safety margin\n                radii[i] *= scale\n                radii[j] *= scale\n                \n    # Ensure circles are within bounds\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1-x, 1-y)\n        \n        if x - radii[i] < 0:\n            centers[i, 0] = radii[i]\n        elif x + radii[i] > 1:\n            centers[i, 0] = 1 - radii[i]\n            \n        if y - radii[i] < 0:\n            centers[i, 1] = radii[i]\n        elif y + radii[i] > 1:\n            centers[i, 1] = 1 - radii[i]\n            \n    return centers, radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "38ef40c5-0d01-43bf-84c2-bfedebfa6b2a", "generation": 2, "timestamp": 1750749091.9966543, "iteration_found": 66, "metrics": {"validity": 1.0, "sum_radii": 1.5502881842340257, "target_ratio": 0.5883446619483969, "combined_score": 0.5883446619483969, "eval_time": 0.32109689712524414}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 0.6762428879445668, "target_ratio": 0.25663866715163824, "combined_score": 0.25663866715163824, "eval_time": 0.44539713859558105}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 0.6762\n- target_ratio: 0.2566\n- combined_score: 0.2566\n- eval_time: 0.4454\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.6891)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.3024), Performs well on target_ratio (0.4943), Performs well on combined_score (0.4943), Performs well on eval_time (0.1547)\n\n\n### Program 3 (Score: 0.5979)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.9598), Performs well on target_ratio (0.3642), Performs well on combined_score (0.3642), Performs well on eval_time (0.3013)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9637)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.5775)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n    \n    # Optimal pattern based on hexagonal packing with adjustments for edge effects\n    # This pattern is derived from the AlphaEvolve paper's findings\n    \n    # Parameters for the pattern\n    r1 = 0.15  # Radius for the largest circles\n    \n    # Place 4 large circles in the corners with some padding\n    padding = 0.15\n    centers[0] = [padding, padding]\n    centers[1] = [1-padding, padding]\n    centers[2] = [padding, 1-padding]\n    centers[3] = [1-padding, 1-padding]\n    radii[0:4] = r1\n    \n    # Place 5 circles in a row in the middle\n    middle_y = 0.5\n    spacing = 0.2\n    for i in range(5):\n        centers[4+i] = [0.1 + i*spacing, middle_y]\n        radii[4+i] = 0.095\n    \n    # Place 4 medium circles along the top and bottom edges\n    for i in range(4):\n        centers[9+i] = [0.2 + i*0.2, 0.15]\n        centers[13+i] = [0.2 + i*0.2, 0.85]\n        radii[9+i] = 0.08\n        radii[13+i] = 0.08\n    \n    # Place 4 medium circles along the left and right edges\n    for i in range(4):\n        centers[17+i] = [0.15, 0.2 + i*0.2]\n        centers[21+i] = [0.85, 0.2 + i*0.2]\n        radii[17+i] = 0.08\n        radii[21+i] = 0.08\n    \n    # Add a central circle\n    centers[25] = [0.5, 0.5]\n    radii[25] = 0.1\n    \n    # Refine the packing to maximize radii without overlaps\n    centers, radii = optimize_packing(centers, radii)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the packing by adjusting radii to their maximum possible values\n    without causing overlaps or going outside the unit square.\n    \n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with initial radius of each circle\n        \n    Returns:\n        Tuple of (centers, radii) with optimized values\n    \"\"\"\n    n = centers.shape[0]\n    \n    # First, ensure all circles are within the unit square\n    for i in range(n):\n        x, y = centers[i]\n        # Adjust centers if needed to ensure circles stay within bounds\n        min_dist_to_border = min(x, y, 1-x, 1-y)\n        if radii[i] > min_dist_to_border:\n            # Move the center inward if needed\n            if x < radii[i]:\n                centers[i, 0] = radii[i]\n            elif x > 1 - radii[i]:\n                centers[i, 0] = 1 - radii[i]\n                \n            if y < radii[i]:\n                centers[i, 1] = radii[i]\n            elif y > 1 - radii[i]:\n                centers[i, 1] = 1 - radii[i]\n    \n    # Iteratively adjust radii to maximize them without overlaps\n    for _ in range(10):  # Multiple iterations for better convergence\n        # Reset radii constraints based on distance to borders\n        max_radii = np.minimum.reduce([\n            centers[:, 0],                # Distance to left border\n            centers[:, 1],                # Distance to bottom border\n            1 - centers[:, 0],            # Distance to right border\n            1 - centers[:, 1]             # Distance to top border\n        ])\n        \n        # Adjust radii based on distances between circles\n        for i in range(n):\n            for j in range(i+1, n):\n                dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                \n                # Calculate maximum possible radii to avoid overlap\n                if radii[i] + radii[j] > dist:\n                    # Distribute the necessary reduction proportionally\n                    total = radii[i] + radii[j]\n                    ratio_i = radii[i] / total\n                    ratio_j = radii[j] / total\n                    \n                    new_i = dist * ratio_i\n                    new_j = dist * ratio_j\n                    \n                    # Update if this constraint is tighter than existing ones\n                    if new_i < max_radii[i]:\n                        max_radii[i] = new_i\n                    if new_j < max_radii[j]:\n                        max_radii[j] = new_j\n        \n        # Apply the new maximum radii\n        radii = np.minimum(radii, max_radii)\n        \n        # Try to grow all radii slightly\n        growth_factor = 1.01\n        radii = np.minimum(radii * growth_factor, max_radii)\n    \n    # Final validation to ensure no overlaps\n    radii = compute_max_radii(centers)\n    \n    return centers, radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.ones(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n\n    # Then, limit by distance to other circles\n    for _ in range(5):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if radii[i] + radii[j] > dist:\n                        # Scale down the larger radius more\n                        if radii[i] > radii[j]:\n                            radii[i] = dist - radii[j]\n                        else:\n                            radii[j] = dist - radii[i]\n\n    # Final adjustment to ensure no overlaps\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            if radii[i] + radii[j] > dist:\n                scale = dist / (radii[i] + radii[j]) * 0.99  # 1% safety margin\n                radii[i] *= scale\n                radii[j] *= scale\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial radii guesses, refined based on AlphaEvolve principles.\n    r_large = 0.20  # Initial guess for large circles\n    r_medium = 0.12 # Initial guess for medium circles\n    r_small = 0.08  # Initial guess for small circles\n    r_center = 0.15\n\n    # Layer 1: Corners (4 large circles)\n    centers[0] = [r_large, r_large]\n    centers[1] = [1 - r_large, r_large]\n    centers[2] = [r_large, 1 - r_large]\n    centers[3] = [1 - r_large, 1 - r_large]\n    radii[0:4] = r_large\n\n    # Layer 2: Edge midpoints (4 medium circles per edge = 16 total)\n    num_edge_circles = 4\n    edge_positions = np.linspace(r_medium * 2, 1 - r_medium * 2, num_edge_circles)\n\n    for i in range(num_edge_circles):\n        centers[4 + i] = [edge_positions[i], r_medium]  # Top\n        centers[4 + num_edge_circles + i] = [edge_positions[i], 1 - r_medium]  # Bottom\n        centers[4 + 2 * num_edge_circles + i] = [r_medium, edge_positions[i]]  # Left\n        centers[4 + 3 * num_edge_circles + i] = [1 - r_medium, edge_positions[i]]  # Right\n        radii[4 + i : 4 + 4*num_edge_circles] = r_medium\n\n    # Layer 3: Center (1 circle)\n    centers[24] = [0.5, 0.5]\n    radii[24] = r_center\n    \n    # Place a single small circle near the center to fill space\n    centers[25] = [0.3, 0.7]\n    radii[25] = r_small\n\n    # Refine the packing to maximize radii without overlaps\n    centers, radii = optimize_packing(centers, radii)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef optimize_packing(centers, radii):\n    \"\"\"\n    Optimize the packing by adjusting radii to their maximum possible values\n    without causing overlaps or going outside the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with initial radius of each circle\n\n    Returns:\n        Tuple of (centers, radii) with optimized values\n    \"\"\"\n    n = centers.shape[0]\n\n    def compute_max_radius(index):\n        \"\"\"Computes the maximum radius for a circle at a given index\"\"\"\n        center = centers[index]\n        max_r = min(center[0], center[1], 1 - center[0], 1 - center[1])\n\n        for j in range(n):\n            if j != index:\n                other_center = centers[j]\n                dist = np.sqrt(np.sum((center - other_center)**2))\n                max_r = min(max_r, (dist - radii[j]))\n\n        return max_r\n\n    for iteration in range(20):  # Increased iterations\n        for i in range(n):\n            radii[i] = compute_max_radius(i)\n\n    # Final adjustments to avoid overlaps\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            if radii[i] + radii[j] > dist:\n                scale = dist / (radii[i] + radii[j]) * 0.99  # Small safety margin\n                radii[i] *= scale\n                radii[j] *= scale\n                \n    # Ensure circles are within bounds\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1-x, 1-y)\n        \n        if x - radii[i] < 0:\n            centers[i, 0] = radii[i]\n        elif x + radii[i] > 1:\n            centers[i, 0] = 1 - radii[i]\n            \n        if y - radii[i] < 0:\n            centers[i, 1] = radii[i]\n        elif y + radii[i] > 1:\n            centers[i, 1] = 1 - radii[i]\n            \n    return centers, radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}