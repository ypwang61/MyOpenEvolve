{"id": "7eb703d3-1eda-48f6-bf65-db4beeda1ce9", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n\n    # First ring - 6 circles\n    r1 = 0.23  # Increased radius\n    angles1 = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 1] = [0.5 + r1 * np.cos(angles1[i]), 0.5 + r1 * np.sin(angles1[i])]\n\n    # Second ring - 12 circles\n    r2 = 0.41 # increased radius\n    angles2 = np.linspace(0, 2 * np.pi, 12, endpoint=False)\n    for i in range(12):\n        centers[i + 7] = [0.5 + r2 * np.cos(angles2[i]), 0.5 + r2 * np.sin(angles2[i])]\n\n    # Four corner circles\n    corner_offset = 0.095  # Increased offset\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n\n    # Four edge circles\n    edge_offset = 0.085 # Increased offset\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26-1] = [1 - edge_offset, 0.5]\n\n\n    # Fine-tuning adjustments\n    centers[0] = [0.5, 0.5]  # Re-center\n\n    # Adjust first ring\n    for i in range(1, 7):\n        angle = angles1[i-1]\n        dist = r1 + 0.007 * np.sin(4 * angle)  # Adjusted sine wave\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n\n    # Adjust second ring\n    for i in range(7, 19):\n        angle = angles2[i-7]\n        dist = r2 + 0.009 * np.cos(3 * angle)  # Adjusted cosine wave\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n\n    # Adjust corners\n    centers[19] = [corner_offset + 0.002, corner_offset + 0.002]\n    centers[20] = [1 - corner_offset - 0.002, corner_offset + 0.002]\n    centers[21] = [corner_offset + 0.002, 1 - corner_offset - 0.002]\n    centers[22] = [1 - corner_offset - 0.002, 1 - corner_offset - 0.002]\n\n    # Adjust edges\n    centers[23] = [0.5, edge_offset + 0.003]\n    centers[24] = [0.5, 1 - edge_offset - 0.003]\n    centers[25] = [edge_offset + 0.003, 0.5]\n    centers[26-1] = [1 - edge_offset - 0.003, 0.5]\n\n\n    radii = compute_max_radii(centers)\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # Initialize radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Improved overlap resolution using binary search\n    for i in range(n):\n        for _ in range(10):  # Binary search iterations\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = min(min_dist, dist - radii[j])\n\n            radii[i] = min(radii[i], min_dist / 2)\n            radii[i] = max(0, radii[i]) # ensure radius is not negative\n\n    # Ensure all circles are within bounds, final check\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n        radii[i] = max(0, radii[i]) # ensure radius is not negative\n\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "51a9e66c-0e0c-4927-8ed1-f93d5da24c8a", "generation": 3, "timestamp": 1750748695.2063396, "iteration_found": 43, "metrics": {"validity": 1.0, "sum_radii": 0.693455440839281, "target_ratio": 0.26317094529004975, "combined_score": 0.26317094529004975, "eval_time": 0.865898847579956}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.7066310238436153, "target_ratio": 0.6476778079102905, "combined_score": 0.6476778079102905, "eval_time": 0.3311028480529785}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7066\n- target_ratio: 0.6477\n- combined_score: 0.6477\n- eval_time: 0.3311\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.7560)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.4100), Performs well on target_ratio (0.5351), Performs well on combined_score (0.5351), Performs well on eval_time (0.2996)\n\n\n### Program 3 (Score: 0.8782)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.1691), Performs well on target_ratio (0.4437), Performs well on combined_score (0.4437), Performs well on eval_time (1.3348)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 1.0762)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.6225)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    \n    # Define the pattern based on the AlphaEvolve paper's findings\n    # The pattern combines a central large circle, concentric rings, and corner/edge circles\n    \n    # Central circle\n    centers[0] = [0.5, 0.5]\n    \n    # First ring - 6 circles in hexagonal pattern\n    angles1 = np.linspace(0, 2*np.pi, 7)[:-1]  # 6 equally spaced angles\n    r1 = 0.22  # distance from center\n    for i, angle in enumerate(angles1):\n        centers[i+1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n    \n    # Second ring - 12 circles\n    angles2 = np.linspace(0, 2*np.pi, 13)[:-1]  # 12 equally spaced angles\n    r2 = 0.39  # distance from center\n    for i, angle in enumerate(angles2):\n        centers[i+7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n    \n    # Corner circles\n    corner_dist = 0.09  # distance from corner\n    centers[19] = [corner_dist, corner_dist]\n    centers[20] = [1-corner_dist, corner_dist]\n    centers[21] = [corner_dist, 1-corner_dist]\n    centers[22] = [1-corner_dist, 1-corner_dist]\n    \n    # Edge circles\n    edge_dist = 0.08  # distance from edge\n    centers[23] = [0.5, edge_dist]\n    centers[24] = [0.5, 1-edge_dist]\n    centers[25] = [edge_dist, 0.5]\n    \n    # Apply fine-tuning adjustments to improve packing density\n    \n    # Adjust central circle slightly\n    centers[0] = [0.5, 0.5]\n    \n    # Fine-tune first ring positions\n    for i in range(1, 7):\n        idx = i-1\n        angle = angles1[idx]\n        # Vary distance slightly based on position\n        dist = 0.22 + 0.005 * np.sin(3*angle)\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Fine-tune second ring positions\n    for i in range(7, 19):\n        idx = i-7\n        angle = angles2[idx]\n        # Vary distance slightly based on position for better packing\n        dist = 0.39 + 0.01 * np.sin(2*angle)\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n    \n    # Adjust corner circles\n    centers[19] = [0.085, 0.085]\n    centers[20] = [0.915, 0.085]\n    centers[21] = [0.085, 0.915]\n    centers[22] = [0.915, 0.915]\n    \n    # Adjust edge circles\n    centers[23] = [0.5, 0.075]\n    centers[24] = [0.5, 0.925]\n    centers[25] = [0.075, 0.5]\n    \n    # Add the missing edge circle (was missing in original code)\n    centers[25] = [0.075, 0.5]\n    centers[25] = [0.925, 0.5]\n    \n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n    \n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n    \n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # Initialize radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1-x, 1-y)\n    \n    # Iteratively adjust radii to prevent overlaps\n    for _ in range(20):  # Increased iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current values\n                        total = radii[i] + radii[j]\n                        if total > 0:  # Avoid division by zero\n                            ratio = dist / total\n                            radii[i] *= ratio\n                            radii[j] *= ratio\n    \n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j])**2))\n            if dist < radii[i] + radii[j]:\n                # Reduce larger radius to ensure no overlap\n                overlap = radii[i] + radii[j] - dist\n                if radii[i] >= radii[j]:\n                    radii[i] -= overlap\n                else:\n                    radii[j] -= overlap\n    \n    # Ensure all circles are within bounds\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1-x, 1-y)\n    \n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n\n    # First ring - 6 circles\n    r1 = 0.23  # Increased radius\n    angles1 = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 1] = [0.5 + r1 * np.cos(angles1[i]), 0.5 + r1 * np.sin(angles1[i])]\n\n    # Second ring - 12 circles\n    r2 = 0.41 # increased radius\n    angles2 = np.linspace(0, 2 * np.pi, 12, endpoint=False)\n    for i in range(12):\n        centers[i + 7] = [0.5 + r2 * np.cos(angles2[i]), 0.5 + r2 * np.sin(angles2[i])]\n\n    # Four corner circles\n    corner_offset = 0.095  # Increased offset\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n\n    # Four edge circles\n    edge_offset = 0.085 # Increased offset\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26-1] = [1 - edge_offset, 0.5]\n\n\n    # Fine-tuning adjustments\n    centers[0] = [0.5, 0.5]  # Re-center\n\n    # Adjust first ring\n    for i in range(1, 7):\n        angle = angles1[i-1]\n        dist = r1 + 0.007 * np.sin(4 * angle)  # Adjusted sine wave\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n\n    # Adjust second ring\n    for i in range(7, 19):\n        angle = angles2[i-7]\n        dist = r2 + 0.009 * np.cos(3 * angle)  # Adjusted cosine wave\n        centers[i] = [0.5 + dist * np.cos(angle), 0.5 + dist * np.sin(angle)]\n\n    # Adjust corners\n    centers[19] = [corner_offset + 0.002, corner_offset + 0.002]\n    centers[20] = [1 - corner_offset - 0.002, corner_offset + 0.002]\n    centers[21] = [corner_offset + 0.002, 1 - corner_offset - 0.002]\n    centers[22] = [1 - corner_offset - 0.002, 1 - corner_offset - 0.002]\n\n    # Adjust edges\n    centers[23] = [0.5, edge_offset + 0.003]\n    centers[24] = [0.5, 1 - edge_offset - 0.003]\n    centers[25] = [edge_offset + 0.003, 0.5]\n    centers[26-1] = [1 - edge_offset - 0.003, 0.5]\n\n\n    radii = compute_max_radii(centers)\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # Initialize radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Improved overlap resolution using binary search\n    for i in range(n):\n        for _ in range(10):  # Binary search iterations\n            min_dist = float('inf')\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = min(min_dist, dist - radii[j])\n\n            radii[i] = min(radii[i], min_dist / 2)\n            radii[i] = max(0, radii[i]) # ensure radius is not negative\n\n    # Ensure all circles are within bounds, final check\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n        radii[i] = max(0, radii[i]) # ensure radius is not negative\n\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}