{"id": "08274382-530e-4a98-a7de-e32ac0dfa8f0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial guess based on hexagonal packing and some adjustments\n    centers[0] = [0.5, 0.5]  # Center\n    radii[0] = 0.24\n\n    # Layer 1 (6 circles)\n    r1 = 0.21\n    angles1 = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 1] = [0.5 + 1.9*r1 * np.cos(angles1[i]), 0.5 + 1.9*r1 * np.sin(angles1[i])]\n        radii[i+1] = r1\n\n    # Layer 2 (6 circles, interleaved)\n    r2 = 0.14\n    angles2 = np.linspace(np.pi / 6, 2 * np.pi + np.pi / 6, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 7] = [0.5 + 2.75*r2 * np.cos(angles2[i]), 0.5 + 2.75*r2 * np.sin(angles2[i])]\n        radii[i+7] = r2\n\n    # Corners (4 circles)\n    r_corner = 0.11\n    centers[13] = [r_corner, r_corner]\n    centers[14] = [1 - r_corner, r_corner]\n    centers[15] = [r_corner, 1 - r_corner]\n    centers[16] = [1 - r_corner, 1 - r_corner]\n    radii[13] = r_corner\n    radii[14] = r_corner\n    radii[15] = r_corner\n    radii[16] = r_corner\n\n    # Edges (4 circles)\n    r_edge = 0.09\n    centers[17] = [0.5, r_edge]\n    centers[18] = [0.5, 1 - r_edge]\n    centers[19] = [r_edge, 0.5]\n    centers[20] = [1 - r_edge, 0.5]\n    radii[17] = r_edge\n    radii[18] = r_edge\n    radii[19] = r_edge\n    radii[20] = r_edge\n\n    # Fill remaining gaps (6 circles)\n    r_fill = 0.07\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.3]\n    radii[21] = r_fill\n    radii[22] = r_fill\n    radii[23] = r_fill\n    radii[24] = r_fill\n    radii[25] = r_fill\n\n    # Refine radii to prevent overlaps and ensure validity.  Fewer iterations, more precise initial guess\n    for _ in range(10):\n        for i in range(n):\n            # Check for overlaps with other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Reduce the radii proportionally to their sizes.\n                        reduction_i = overlap * radii[i] / (radii[i] + radii[j])\n                        reduction_j = overlap * radii[j] / (radii[i] + radii[j])\n                        radii[i] = max(0.005, radii[i] - reduction_i)\n                        radii[j] = max(0.005, radii[j] - reduction_j)\n\n            # Ensure the circle is within the unit square\n            radii[i] = min(radii[i], centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "f961edb6-0355-4e27-9ef9-14058e03ae0e", "generation": 4, "timestamp": 1750747980.1132104, "iteration_found": 8, "metrics": {"validity": 1.0, "sum_radii": 1.3299761261778595, "target_ratio": 0.5047347727430207, "combined_score": 0.5047347727430207, "eval_time": 0.6337325572967529}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.6048291254204898, "target_ratio": 0.6090433113550247, "combined_score": 0.6090433113550247, "eval_time": 0.3187124729156494}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.6048\n- target_ratio: 0.6090\n- combined_score: 0.6090\n- eval_time: 0.3187\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.7066, target_ratio: 0.6477, combined_score: 0.6477, eval_time: 0.3311\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.7512, target_ratio: 0.6646, combined_score: 0.6646, eval_time: 0.3047\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 1.6557)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.8963), Performs well on target_ratio (0.7197), Performs well on combined_score (0.7197), Performs well on eval_time (3.9430)\n\n\n### Program 2 (Score: 0.7560)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.4100), Performs well on target_ratio (0.5351), Performs well on combined_score (0.5351), Performs well on eval_time (0.2996)\n\n\n### Program 3 (Score: 0.8770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7512), Performs well on target_ratio (0.6646), Performs well on combined_score (0.6646), Performs well on eval_time (0.3047)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8576)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.5979)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n\n    # Layer 1: Central circle\n    centers[0] = [0.5, 0.5]\n\n    # Layer 2: 6 circles around the center\n    r1 = 0.23  # Radius of the first layer circles\n    angles1 = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 1] = [0.5 + r1 * np.cos(angles1[i]), 0.5 + r1 * np.sin(angles1[i])]\n\n    # Layer 3: 6 circles, interleaving with Layer 2. Smaller radius than Layer 2\n    r2 = 0.165 # Radius of the second layer circles\n    angles2 = np.linspace(np.pi/6, 2 * np.pi + np.pi/6, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 7] = [0.5 + 0.75*r1 * np.cos(angles2[i]), 0.5 + 0.75*r1 * np.sin(angles2[i])]\n    \n    # Layer 4: 4 corner circles\n    corner_offset = 0.095\n    centers[13] = [corner_offset, corner_offset]\n    centers[14] = [1 - corner_offset, corner_offset]\n    centers[15] = [corner_offset, 1 - corner_offset]\n    centers[16] = [1 - corner_offset, 1 - corner_offset]\n\n    # Layer 5: 4 edge circles\n    edge_offset = 0.075\n    centers[17] = [0.5, edge_offset]\n    centers[18] = [0.5, 1 - edge_offset]\n    centers[19] = [edge_offset, 0.5]\n    centers[20] = [1 - edge_offset, 0.5]\n\n    # Remaining circles: Distribute in gaps\n    centers[21] = [0.25, 0.25]  # Smaller circles filling gaps\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.35] # Filling central gaps\n\n    # Compute maximum valid radii for this configuration\n    radii = compute_max_radii(centers)\n\n    # Calculate the sum of radii\n    sum_radii = np.sum(radii)\n\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # Initialize radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    for _ in range(25):  # Increased iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current values, but prevent radii from becoming too small.\n                        total = radii[i] + radii[j]\n                        if total > 0:\n                            ratio = dist / total\n                            radii[i] = max(0.005, radii[i] * ratio)  # Minimum radius\n                            radii[j] = max(0.005, radii[j] * ratio)  # Minimum radius\n\n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n            if dist < radii[i] + radii[j]:\n                # Reduce larger radius to ensure no overlap\n                overlap = radii[i] + radii[j] - dist\n                if radii[i] >= radii[j]:\n                    radii[i] = max(0.005, radii[i] - overlap)\n                else:\n                    radii[j] = max(0.005, radii[j] - overlap)\n\n    # Ensure all circles are within bounds\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial guess based on hexagonal packing and some adjustments\n    centers[0] = [0.5, 0.5]  # Center\n    radii[0] = 0.24\n\n    # Layer 1 (6 circles)\n    r1 = 0.21\n    angles1 = np.linspace(0, 2 * np.pi, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 1] = [0.5 + 1.9*r1 * np.cos(angles1[i]), 0.5 + 1.9*r1 * np.sin(angles1[i])]\n        radii[i+1] = r1\n\n    # Layer 2 (6 circles, interleaved)\n    r2 = 0.14\n    angles2 = np.linspace(np.pi / 6, 2 * np.pi + np.pi / 6, 6, endpoint=False)\n    for i in range(6):\n        centers[i + 7] = [0.5 + 2.75*r2 * np.cos(angles2[i]), 0.5 + 2.75*r2 * np.sin(angles2[i])]\n        radii[i+7] = r2\n\n    # Corners (4 circles)\n    r_corner = 0.11\n    centers[13] = [r_corner, r_corner]\n    centers[14] = [1 - r_corner, r_corner]\n    centers[15] = [r_corner, 1 - r_corner]\n    centers[16] = [1 - r_corner, 1 - r_corner]\n    radii[13] = r_corner\n    radii[14] = r_corner\n    radii[15] = r_corner\n    radii[16] = r_corner\n\n    # Edges (4 circles)\n    r_edge = 0.09\n    centers[17] = [0.5, r_edge]\n    centers[18] = [0.5, 1 - r_edge]\n    centers[19] = [r_edge, 0.5]\n    centers[20] = [1 - r_edge, 0.5]\n    radii[17] = r_edge\n    radii[18] = r_edge\n    radii[19] = r_edge\n    radii[20] = r_edge\n\n    # Fill remaining gaps (6 circles)\n    r_fill = 0.07\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.3]\n    radii[21] = r_fill\n    radii[22] = r_fill\n    radii[23] = r_fill\n    radii[24] = r_fill\n    radii[25] = r_fill\n\n    # Refine radii to prevent overlaps and ensure validity.  Fewer iterations, more precise initial guess\n    for _ in range(10):\n        for i in range(n):\n            # Check for overlaps with other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        # Reduce the radii proportionally to their sizes.\n                        reduction_i = overlap * radii[i] / (radii[i] + radii[j])\n                        reduction_j = overlap * radii[j] / (radii[i] + radii[j])\n                        radii[i] = max(0.005, radii[i] - reduction_i)\n                        radii[j] = max(0.005, radii[j] - reduction_j)\n\n            # Ensure the circle is within the unit square\n            radii[i] = min(radii[i], centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}