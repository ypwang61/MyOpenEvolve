{"id": "fa92f24f-8728-456b-8a33-9ef9d562eb94", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial layout: Prioritize hexagonal packing near center\n    centers[0] = [0.5, 0.5]  # Center circle\n\n    # Layer 2: 6 circles around the center\n    r1 = 0.22  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n\n    # Layer 3: 6 circles interleaved between layer 2 and corners\n    r2 = 0.40  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6  # Interleaved\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n\n    # Corners\n    corner_offset = 0.12\n    centers[13] = [corner_offset, corner_offset]\n    centers[14] = [1 - corner_offset, corner_offset]\n    centers[15] = [corner_offset, 1 - corner_offset]\n    centers[16] = [1 - corner_offset, 1 - corner_offset]\n\n    # Edge Midpoints\n    edge_offset = 0.08\n    centers[17] = [0.5, edge_offset]\n    centers[18] = [0.5, 1 - edge_offset]\n    centers[19] = [edge_offset, 0.5]\n    centers[20] = [1 - edge_offset, 0.5]\n\n    # More circles in the remaining space, strategically placed\n    centers[21] = [0.2, 0.8]\n    centers[22] = [0.8, 0.2]\n    centers[23] = [0.2, 0.2]\n    centers[24] = [0.8, 0.8]\n    centers[25] = [0.5, 0.15]\n\n    # Optimized radius calculation using binary search\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square using binary search.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    for i in range(n):\n        # Binary search for the maximum radius\n        low = 0.0\n        high = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])  # Border constraint\n        for _ in range(50):  # Iterate to refine radius\n            mid = (low + high) / 2.0\n            valid = True\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < mid + radii[j]:\n                        valid = False\n                        break\n            if valid:\n                low = mid\n            else:\n                high = mid\n        radii[i] = low\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "721fd05a-b1b2-4865-b8cf-4aded62f0788", "generation": 5, "timestamp": 1750748658.4094613, "iteration_found": 40, "metrics": {"validity": 1.0, "sum_radii": 1.1824291337682373, "target_ratio": 0.44873970920995726, "combined_score": 0.44873970920995726, "eval_time": 0.19052815437316895}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.5043415255237695, "target_ratio": 0.5709075998192674, "combined_score": 0.5709075998192674, "eval_time": 1.1723899841308594}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.5043\n- target_ratio: 0.5709\n- combined_score: 0.5709\n- eval_time: 1.1724\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.8770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7512), Performs well on target_ratio (0.6646), Performs well on combined_score (0.6646), Performs well on eval_time (0.3047)\n\n\n### Program 3 (Score: 0.8770)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.7512), Performs well on target_ratio (0.6646), Performs well on combined_score (0.6646), Performs well on eval_time (0.3047)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8782)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.1885)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Layer 1: Central circle\n    centers[0] = [0.5, 0.5]\n\n    # Layer 2: 6 circles around the center\n    r1 = 0.20  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n\n    # Layer 3: 6 circles interleaved between layer 2 and corners\n    r2 = 0.38  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6  # Interleaved\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n\n    # Corners\n    corner_offset = 0.10  # Adjusted corner offset\n    centers[13] = [corner_offset, corner_offset]\n    centers[14] = [1 - corner_offset, corner_offset]\n    centers[15] = [corner_offset, 1 - corner_offset]\n    centers[16] = [1 - corner_offset, 1 - corner_offset]\n    \n    # Edge Midpoints\n    edge_offset = 0.06\n    centers[17] = [0.5, edge_offset]\n    centers[18] = [0.5, 1 - edge_offset]\n    centers[19] = [edge_offset, 0.5]\n    centers[20] = [1 - edge_offset, 0.5]\n\n    # Remaining 6 circles, distribute evenly in remaining space\n    centers[21] = [0.25, 0.25]\n    centers[22] = [0.75, 0.25]\n    centers[23] = [0.25, 0.75]\n    centers[24] = [0.75, 0.75]\n    centers[25] = [0.5, 0.90] #near top edge\n\n    # Initial radii estimation based on position\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iterative adjustment of radii\n    for _ in range(100):\n        for i in range(n):\n            # Calculate maximum possible radius\n            max_radius = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n            for j in range(n):\n                if i != j:\n                    distance = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_radius = min(max_radius, (distance - radii[j]))\n            radii[i] = max_radius * 0.999  # Reduce radius slightly to prevent overlap\n\n    # Recalculate radii with more precision\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n    \n    # First pass: initialize each radius based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n    \n    # Second pass: reduce radii based on distances between circles\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n            if dist < radii[i] + radii[j]:\n                # Scale both radii proportionally to fit\n                scale = dist / (radii[i] + radii[j])\n                radii[i] *= scale\n                radii[j] *= scale\n    \n    # Iterative refinement to maximize radii\n    for _ in range(50):  # Limit iterations for efficiency\n        changes_made = False\n        \n        for i in range(n):\n            # Start with border constraints\n            x, y = centers[i]\n            max_r = min(x, y, 1 - x, 1 - y)\n            \n            # Check constraints from other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_r = min(max_r, dist - radii[j])\n            \n            # Update radius if we can increase it\n            if max_r > radii[i] + 1e-10:\n                radii[i] = max_r\n                changes_made = True\n        \n        if not changes_made:\n            break\n    \n    # Ensure minimum radius\n    radii = np.maximum(radii, 1e-6)\n    \n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial layout: Prioritize hexagonal packing near center\n    centers[0] = [0.5, 0.5]  # Center circle\n\n    # Layer 2: 6 circles around the center\n    r1 = 0.22  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n\n    # Layer 3: 6 circles interleaved between layer 2 and corners\n    r2 = 0.40  # Increased distance from center\n    for i in range(6):\n        angle = 2 * np.pi * i / 6 + np.pi / 6  # Interleaved\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n\n    # Corners\n    corner_offset = 0.12\n    centers[13] = [corner_offset, corner_offset]\n    centers[14] = [1 - corner_offset, corner_offset]\n    centers[15] = [corner_offset, 1 - corner_offset]\n    centers[16] = [1 - corner_offset, 1 - corner_offset]\n\n    # Edge Midpoints\n    edge_offset = 0.08\n    centers[17] = [0.5, edge_offset]\n    centers[18] = [0.5, 1 - edge_offset]\n    centers[19] = [edge_offset, 0.5]\n    centers[20] = [1 - edge_offset, 0.5]\n\n    # More circles in the remaining space, strategically placed\n    centers[21] = [0.2, 0.8]\n    centers[22] = [0.8, 0.2]\n    centers[23] = [0.2, 0.2]\n    centers[24] = [0.8, 0.8]\n    centers[25] = [0.5, 0.15]\n\n    # Optimized radius calculation using binary search\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square using binary search.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    for i in range(n):\n        # Binary search for the maximum radius\n        low = 0.0\n        high = min(centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])  # Border constraint\n        for _ in range(50):  # Iterate to refine radius\n            mid = (low + high) / 2.0\n            valid = True\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < mid + radii[j]:\n                        valid = False\n                        break\n            if valid:\n                low = mid\n            else:\n                high = mid\n        radii[i] = low\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}