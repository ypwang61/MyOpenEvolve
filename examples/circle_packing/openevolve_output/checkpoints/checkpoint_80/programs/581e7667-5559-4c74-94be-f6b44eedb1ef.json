{"id": "581e7667-5559-4c74-94be-f6b44eedb1ef", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize centers and radii arrays\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Layer 1: Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Layer 2: Six circles around the center\n    r1 = 0.13\n    d1 = radii[0] + r1\n    for i in range(6):\n        angle = i * np.pi / 3\n        centers[i + 1] = [0.5 + d1 * np.cos(angle), 0.5 + d1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Layer 3: Twelve circles\n    r2 = 0.095\n    d2 = d1 + r1 + r2\n    for i in range(12):\n        angle = i * np.pi / 6\n        centers[i + 7] = [0.5 + d2 * np.cos(angle), 0.5 + d2 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Optimized corner and edge circles: More strategic placement\n    radii[19:23] = 0.08  # Slightly larger corner circles\n    centers[19] = [0.08, 0.08]\n    centers[20] = [0.92, 0.08]\n    centers[21] = [0.08, 0.92]\n    centers[22] = [0.92, 0.92]\n\n    radii[23:26] = 0.09  # Slightly larger edge circles\n    centers[23] = [0.5, 0.09]\n    centers[24] = [0.5, 0.91]\n    centers[25] = [0.91, 0.5]\n\n    # Refinement through iterative radius adjustment with a tailored approach\n    radii = compute_max_radii_optimized(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii_optimized(centers, initial_radii):\n    \"\"\"\n    Compute the maximum possible radii for each circle position,\n    optimized for faster convergence and better packing.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        initial_radii: initial guess for radii\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = initial_radii.copy()\n\n    # Iteratively adjust radii to prevent overlaps with adaptive learning rate\n    learning_rate = 0.2  # Initial learning rate\n    min_radius = 0.001\n    for _ in range(200):  # More iterations with learning rate decay\n        overlap_detected = False\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        overlap_detected = True\n                        # Adjust radii proportionally, but with a learning rate\n                        radii[i] -= learning_rate * overlap * radii[i] / (radii[i] + radii[j])\n                        radii[j] -= learning_rate * overlap * radii[j] / (radii[i] + radii[j])\n                        radii[i] = max(min_radius, radii[i])\n                        radii[j] = max(min_radius, radii[j])\n\n            # Ensure circle stays within bounds\n            x, y = centers[i]\n            radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n        if not overlap_detected:\n            break  # Stop if no overlaps were detected in this iteration\n\n        learning_rate *= 0.99  # Decay learning rate\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "63067c2a-d3c7-4206-b7df-8602df2f571e", "generation": 6, "timestamp": 1750749145.7578146, "iteration_found": 71, "metrics": {"validity": 1.0, "sum_radii": 1.8869920307220531, "target_ratio": 0.7161260078641568, "combined_score": 0.7161260078641568, "eval_time": 0.9215130805969238}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.7720258010236836, "target_ratio": 0.6724955601607908, "combined_score": 0.6724955601607908, "eval_time": 0.5545592308044434}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7720\n- target_ratio: 0.6725\n- combined_score: 0.6725\n- eval_time: 0.5546\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.8935)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.8153), Performs well on target_ratio (0.6889), Performs well on combined_score (0.6889), Performs well on eval_time (0.2743)\n\n\n### Program 3 (Score: 0.9637)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.5043), Performs well on target_ratio (0.5709), Performs well on combined_score (0.5709), Performs well on eval_time (1.1724)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8576)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.1885)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize centers and radii arrays\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Initial radii estimates based on hexagonal packing principles\n    radii[:] = 0.1\n\n    # Layer 1: Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Layer 2: Six circles around the center\n    r1 = 0.13\n    d1 = radii[0] + r1\n    for i in range(6):\n        angle = i * np.pi / 3\n        centers[i + 1] = [0.5 + d1 * np.cos(angle), 0.5 + d1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Layer 3: Twelve circles\n    r2 = 0.095\n    d2 = d1 + r1 + r2\n    for i in range(12):\n        angle = i * np.pi / 6\n        centers[i + 7] = [0.5 + d2 * np.cos(angle), 0.5 + d2 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Layer 4: Four corner circles\n    r3 = 0.075\n    centers[19] = [r3, r3]\n    centers[20] = [1 - r3, r3]\n    centers[21] = [r3, 1 - r3]\n    centers[22] = [1 - r3, 1 - r3]\n    radii[19:23] = r3\n\n    # Layer 5: Three edge circles\n    r4 = 0.085\n    centers[23] = [0.5, r4]\n    centers[24] = [0.5, 1 - r4]\n    centers[25] = [1 - r4, 0.5]\n    radii[23:26] = r4\n\n    # Optimized radii adjustments (less reliance on external 'optimal' values)\n    radii = compute_max_radii(centers)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # Initialize radii based on distance to borders\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Iteratively adjust radii to prevent overlaps\n    for _ in range(100):  # More iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    if dist < radii[i] + radii[j]:\n                        # Adjust both radii proportionally to their current values\n                        total = radii[i] + radii[j]\n                        if total > 0:\n                            ratio = dist / total\n                            radii[i] = max(0.001, radii[i] * (ratio - 0.001))  # Slight safety margin\n                            radii[j] = max(0.001, radii[j] * (ratio - 0.001))\n\n    # Final pass to ensure no overlaps\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n            if dist < radii[i] + radii[j]:\n                # Reduce larger radius to ensure no overlap\n                overlap = radii[i] + radii[j] - dist\n                if radii[i] >= radii[j]:\n                    radii[i] = max(0.001, radii[i] - overlap)\n                else:\n                    radii[j] = max(0.001, radii[j] - overlap)\n\n    # Ensure all circles are within bounds\n    for i in range(n):\n        x, y = centers[i]\n        radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    # Initialize centers and radii arrays\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Layer 1: Central circle\n    centers[0] = [0.5, 0.5]\n    radii[0] = 0.15\n\n    # Layer 2: Six circles around the center\n    r1 = 0.13\n    d1 = radii[0] + r1\n    for i in range(6):\n        angle = i * np.pi / 3\n        centers[i + 1] = [0.5 + d1 * np.cos(angle), 0.5 + d1 * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Layer 3: Twelve circles\n    r2 = 0.095\n    d2 = d1 + r1 + r2\n    for i in range(12):\n        angle = i * np.pi / 6\n        centers[i + 7] = [0.5 + d2 * np.cos(angle), 0.5 + d2 * np.sin(angle)]\n        radii[i + 7] = r2\n\n    # Optimized corner and edge circles: More strategic placement\n    radii[19:23] = 0.08  # Slightly larger corner circles\n    centers[19] = [0.08, 0.08]\n    centers[20] = [0.92, 0.08]\n    centers[21] = [0.08, 0.92]\n    centers[22] = [0.92, 0.92]\n\n    radii[23:26] = 0.09  # Slightly larger edge circles\n    centers[23] = [0.5, 0.09]\n    centers[24] = [0.5, 0.91]\n    centers[25] = [0.91, 0.5]\n\n    # Refinement through iterative radius adjustment with a tailored approach\n    radii = compute_max_radii_optimized(centers, radii)\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii_optimized(centers, initial_radii):\n    \"\"\"\n    Compute the maximum possible radii for each circle position,\n    optimized for faster convergence and better packing.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        initial_radii: initial guess for radii\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = initial_radii.copy()\n\n    # Iteratively adjust radii to prevent overlaps with adaptive learning rate\n    learning_rate = 0.2  # Initial learning rate\n    min_radius = 0.001\n    for _ in range(200):  # More iterations with learning rate decay\n        overlap_detected = False\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        overlap_detected = True\n                        # Adjust radii proportionally, but with a learning rate\n                        radii[i] -= learning_rate * overlap * radii[i] / (radii[i] + radii[j])\n                        radii[j] -= learning_rate * overlap * radii[j] / (radii[i] + radii[j])\n                        radii[i] = max(min_radius, radii[i])\n                        radii[j] = max(min_radius, radii[j])\n\n            # Ensure circle stays within bounds\n            x, y = centers[i]\n            radii[i] = min(radii[i], x, y, 1 - x, 1 - y)\n\n        if not overlap_detected:\n            break  # Stop if no overlaps were detected in this iteration\n\n        learning_rate *= 0.99  # Decay learning rate\n\n    return radii\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}