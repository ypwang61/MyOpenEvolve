{"id": "a15ee57c-b32c-464b-b2fd-916ae873a8b4", "code": "# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Optimized central hexagon and central circle arrangement\n    centers[0] = [0.5, 0.5]\n    r0 = 0.12  # Radius of the central circle\n    radii[0] = r0\n\n    # Inner hexagon (6 circles)\n    r1 = 0.18  # Radius for the inner hexagon circles\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + (r0 + r1) * np.cos(angle), 0.5 + (r0 + r1) * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Middle ring (12 circles) -  optimized placement using hexagonal spacing\n    r2 = 0.14 # Radius for the middle ring circles\n    offset_angle = np.pi / 12\n    ring_radius = 0.5 # Radius from the center to the middle ring's centers.  Adjusted to optimize packing.\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + offset_angle\n        centers[i + 7] = [0.5 + ring_radius * np.cos(angle), 0.5 + ring_radius * np.sin(angle)]\n        radii[i + 7] = r2\n\n\n    # Corners (4 circles)\n    r_corner = 0.10 # Radius for the corner circles\n    corner_offset = r_corner + 0.01 # Distance from the corner to the center of the circle\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = r_corner\n\n    # Edges (4 circles) - Optimized placement\n    r_edge = 0.11 # Radius for the edge circles\n    edge_offset = r_edge + 0.01 # Distance from the edge to the center of the circle\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = r_edge\n\n    # Iterative refinement of radii to prevent overlaps, minimizing overlap distance\n    for _ in range(15):\n        for i in range(n):\n            min_dist = float('inf')\n            # Distance to walls\n            min_dist = min(min_dist, centers[i][0] - radii[i], centers[i][1] - radii[i], 1 - centers[i][0] - radii[i], 1 - centers[i][1] - radii[i])\n\n\n            # Distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        radii[i] -= overlap / 2.0 # Reduce radii by half the overlap amount.\n                        radii[j] -= overlap / 2.0\n                        radii[i] = max(radii[i], 0.001) # Prevent radii from becoming negative\n                        radii[j] = max(radii[j], 0.001)\n\n    # Recalculate the radii after final adjustments.\n    for i in range(n):\n        min_dist = float('inf')\n        # Distance to walls\n        min_dist = min(min_dist, centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                min_dist = min(min_dist, (dist - radii[j]))\n\n        radii[i] = min_dist\n\n\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    # This approach is more accurate than the proportional scaling\n    # We use multiple iterations to converge to a valid solution\n    for _ in range(10):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, dist - radii[j])\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)", "language": "python", "parent_id": "26ed88f1-eb39-488e-be44-f37a8b708c41", "generation": 3, "timestamp": 1750748599.5658007, "iteration_found": 35, "metrics": {"validity": 1.0, "sum_radii": 1.3024276063596067, "target_ratio": 0.4942799265121848, "combined_score": 0.4942799265121848, "eval_time": 0.15467429161071777}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"validity": 1.0, "sum_radii": 1.790368757180501, "target_ratio": 0.6794568338445924, "combined_score": 0.6794568338445924, "eval_time": 0.7843410968780518}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert mathematician specializing in circle packing problems and computational geometry. Your task is to improve a constructor function that directly produces a specific arrangement of 26 circles in a unit square, maximizing the sum of their radii. The AlphaEvolve paper achieved a sum of 2.635 for n=26.\n\nKey geometric insights:\n- Circle packings often follow hexagonal patterns in the densest regions\n- Maximum density for infinite circle packing is pi/(2*sqrt(3)) \u2248 0.9069\n- Edge effects make square container packing harder than infinite packing\n- Circles can be placed in layers or shells when confined to a square\n- Similar radius circles often form regular patterns, while varied radii allow better space utilization\n- Perfect symmetry may not yield the optimal packing due to edge effects\n\nFocus on designing an explicit constructor that places each circle in a specific position, rather than an iterative search algorithm.\n", "user": "# Current Program Information\n- Current performance metrics: - validity: 1.0000\n- sum_radii: 1.7904\n- target_ratio: 0.6795\n- combined_score: 0.6795\n- eval_time: 0.7843\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: sum_radii, target_ratio, combined_score, eval_time. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.8963, target_ratio: 0.7197, combined_score: 0.7197, eval_time: 3.9430\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 1.9523, target_ratio: 0.7409, combined_score: 0.7409, eval_time: 5.2717\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: validity: 1.0000, sum_radii: 2.0975, target_ratio: 0.7960, combined_score: 0.7960, eval_time: 7.4783\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 2.4336)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (2.0975), Performs well on target_ratio (0.7960), Performs well on combined_score (0.7960), Performs well on eval_time (7.4783)\n\n\n### Program 2 (Score: 0.7285)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (0.7372), Performs well on target_ratio (0.2798), Performs well on combined_score (0.2798), Performs well on eval_time (1.3455)\n\n\n### Program 3 (Score: 0.8960)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n# ... (truncated for brevity)\n```\nKey features: Performs well on validity (1.0000), Performs well on sum_radii (1.6778), Performs well on target_ratio (0.6368), Performs well on combined_score (0.6368), Performs well on eval_time (0.5288)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9752)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles in a unit square\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n### Program D2 (Score: 0.7946)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\n# ... (truncated)\n```\nKey features: Alternative approach to validity, Alternative approach to sum_radii\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Central circle\n    centers[0] = [0.5, 0.5]\n\n    # Inner hexagon (6 circles)\n    r1 = 0.22\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + r1 * np.cos(angle), 0.5 + r1 * np.sin(angle)]\n\n    # Middle ring (12 circles) - slightly distorted hexagon\n    r2 = 0.39\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + np.pi / 12\n        centers[i + 7] = [0.5 + r2 * np.cos(angle), 0.5 + r2 * np.sin(angle)]\n\n    # Corners (4 circles)\n    corner_dist = 0.11\n    centers[19] = [corner_dist, corner_dist]\n    centers[20] = [1 - corner_dist, corner_dist]\n    centers[21] = [corner_dist, 1 - corner_dist]\n    centers[22] = [1 - corner_dist, 1 - corner_dist]\n\n    # Edges (4 circles)\n    centers[23] = [0.5, 0.09]  # Adjusted y position\n    centers[24] = [0.5, 0.91]  # Adjusted y position\n    centers[25] = [0.09, 0.5]  # Adjusted x position\n    centers[26 - 1] = [0.91, 0.5]  # Adjusted x position\n\n    # Initial radii estimation based on Voronoi cell area (simplified)\n    radii = np.full(n, 0.05)  # Initialize with a small radius\n\n    # Iterative refinement of radii\n    for _ in range(20):  # More iterations for better convergence\n        for i in range(n):\n            min_dist = float('inf')\n            # Check distance to walls\n            min_dist = min(min_dist, centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n            # Check distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    min_dist = min(min_dist, (dist - radii[j]))\n\n            radii[i] = min_dist\n\n        # Small adjustments to circle positions based on radii\n        for i in range(1, 7):  # Inner hexagon\n            angle = 2 * np.pi * (i - 1) / 6\n            centers[i] = [centers[i][0] + 0.001 * np.cos(angle), centers[i][1] + 0.001 * np.sin(angle)]\n\n        for i in range(7, 19):  # Middle ring\n            angle = 2 * np.pi * (i - 7) / 12 + np.pi / 12\n            centers[i] = [centers[i][0] + 0.0005 * np.cos(angle), centers[i][1] + 0.0005 * np.sin(angle)]\n\n\n    # Final radii calculation after position adjustments\n    for i in range(n):\n        min_dist = float('inf')\n        # Check distance to walls\n        min_dist = min(min_dist, centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Check distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                min_dist = min(min_dist, (dist - radii[j]))\n\n        radii[i] = min_dist\n\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    # This approach is more accurate than the proportional scaling\n    # We use multiple iterations to converge to a valid solution\n    for _ in range(10):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, dist - radii[j])\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Constructor-based circle packing for n=26 circles\"\"\"\nimport numpy as np\n\n\ndef construct_packing():\n    \"\"\"\n    Construct a specific arrangement of 26 circles in a unit square\n    that attempts to maximize the sum of their radii.\n\n    Returns:\n        Tuple of (centers, radii, sum_of_radii)\n        centers: np.array of shape (26, 2) with (x, y) coordinates\n        radii: np.array of shape (26) with radius of each circle\n        sum_of_radii: Sum of all radii\n    \"\"\"\n    n = 26\n    centers = np.zeros((n, 2))\n    radii = np.zeros(n)\n\n    # Optimized central hexagon and central circle arrangement\n    centers[0] = [0.5, 0.5]\n    r0 = 0.12  # Radius of the central circle\n    radii[0] = r0\n\n    # Inner hexagon (6 circles)\n    r1 = 0.18  # Radius for the inner hexagon circles\n    for i in range(6):\n        angle = 2 * np.pi * i / 6\n        centers[i + 1] = [0.5 + (r0 + r1) * np.cos(angle), 0.5 + (r0 + r1) * np.sin(angle)]\n        radii[i + 1] = r1\n\n    # Middle ring (12 circles) -  optimized placement using hexagonal spacing\n    r2 = 0.14 # Radius for the middle ring circles\n    offset_angle = np.pi / 12\n    ring_radius = 0.5 # Radius from the center to the middle ring's centers.  Adjusted to optimize packing.\n    for i in range(12):\n        angle = 2 * np.pi * i / 12 + offset_angle\n        centers[i + 7] = [0.5 + ring_radius * np.cos(angle), 0.5 + ring_radius * np.sin(angle)]\n        radii[i + 7] = r2\n\n\n    # Corners (4 circles)\n    r_corner = 0.10 # Radius for the corner circles\n    corner_offset = r_corner + 0.01 # Distance from the corner to the center of the circle\n    centers[19] = [corner_offset, corner_offset]\n    centers[20] = [1 - corner_offset, corner_offset]\n    centers[21] = [corner_offset, 1 - corner_offset]\n    centers[22] = [1 - corner_offset, 1 - corner_offset]\n    radii[19:23] = r_corner\n\n    # Edges (4 circles) - Optimized placement\n    r_edge = 0.11 # Radius for the edge circles\n    edge_offset = r_edge + 0.01 # Distance from the edge to the center of the circle\n    centers[23] = [0.5, edge_offset]\n    centers[24] = [0.5, 1 - edge_offset]\n    centers[25] = [edge_offset, 0.5]\n    centers[26 - 1] = [1 - edge_offset, 0.5]\n    radii[23:] = r_edge\n\n    # Iterative refinement of radii to prevent overlaps, minimizing overlap distance\n    for _ in range(15):\n        for i in range(n):\n            min_dist = float('inf')\n            # Distance to walls\n            min_dist = min(min_dist, centers[i][0] - radii[i], centers[i][1] - radii[i], 1 - centers[i][0] - radii[i], 1 - centers[i][1] - radii[i])\n\n\n            # Distance to other circles\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    overlap = radii[i] + radii[j] - dist\n                    if overlap > 0:\n                        radii[i] -= overlap / 2.0 # Reduce radii by half the overlap amount.\n                        radii[j] -= overlap / 2.0\n                        radii[i] = max(radii[i], 0.001) # Prevent radii from becoming negative\n                        radii[j] = max(radii[j], 0.001)\n\n    # Recalculate the radii after final adjustments.\n    for i in range(n):\n        min_dist = float('inf')\n        # Distance to walls\n        min_dist = min(min_dist, centers[i][0], centers[i][1], 1 - centers[i][0], 1 - centers[i][1])\n\n        # Distance to other circles\n        for j in range(n):\n            if i != j:\n                dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                min_dist = min(min_dist, (dist - radii[j]))\n\n        radii[i] = min_dist\n\n\n\n    sum_radii = np.sum(radii)\n    return centers, radii, sum_radii\n\n\ndef compute_max_radii(centers):\n    \"\"\"\n    Compute the maximum possible radii for each circle position\n    such that they don't overlap and stay within the unit square.\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n\n    Returns:\n        np.array of shape (n) with radius of each circle\n    \"\"\"\n    n = centers.shape[0]\n    radii = np.zeros(n)\n\n    # First, limit by distance to square borders\n    for i in range(n):\n        x, y = centers[i]\n        # Distance to borders\n        radii[i] = min(x, y, 1 - x, 1 - y)\n\n    # Then, iteratively adjust radii to avoid overlaps\n    # This approach is more accurate than the proportional scaling\n    # We use multiple iterations to converge to a valid solution\n    for _ in range(10):  # Multiple iterations for better convergence\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))\n                    max_allowed = max(0.0, dist - radii[j])\n                    radii[i] = min(radii[i], max_allowed)\n\n    return radii\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef run_packing():\n    \"\"\"Run the circle packing constructor for n=26\"\"\"\n    centers, radii, sum_radii = construct_packing()\n    return centers, radii, sum_radii\n\n\ndef visualize(centers, radii):\n    \"\"\"\n    Visualize the circle packing\n\n    Args:\n        centers: np.array of shape (n, 2) with (x, y) coordinates\n        radii: np.array of shape (n) with radius of each circle\n    \"\"\"\n    import matplotlib.pyplot as plt\n    from matplotlib.patches import Circle\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    # Draw unit square\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.set_aspect(\"equal\")\n    ax.grid(True)\n\n    # Draw circles\n    for i, (center, radius) in enumerate(zip(centers, radii)):\n        circle = Circle(center, radius, alpha=0.5)\n        ax.add_patch(circle)\n        ax.text(center[0], center[1], str(i), ha=\"center\", va=\"center\")\n\n    plt.title(f\"Circle Packing (n={len(centers)}, sum={sum(radii):.6f})\")\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    centers, radii, sum_radii = run_packing()\n    print(f\"Sum of radii: {sum_radii}\")\n    # AlphaEvolve improved this to 2.635\n\n    # Uncomment to visualize:\n    visualize(centers, radii)\n```"]}}}